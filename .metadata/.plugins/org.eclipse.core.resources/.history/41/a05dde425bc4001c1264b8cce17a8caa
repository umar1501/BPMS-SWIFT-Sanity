package com.ctl.it.qa.bpms.steps;

import static org.junit.Assert.assertTrue;

import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;

import org.apache.http.util.TextUtils;
import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.ElementClickInterceptedException;
import org.openqa.selenium.ElementNotVisibleException;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ctl.it.qa.bpms.pages.ProductConfigPage;
import com.ctl.it.qa.bpms.pages.ProductSummaryPage;
import com.ctl.it.qa.staf.Steps;

import net.thucydides.core.annotations.Step;



@SuppressWarnings("serial")
public class ProductConfigSteps extends Steps{

	private transient Logger slf4jLogger = LoggerFactory.getLogger(SalesforceLoginSteps.class);
	transient ProductConfigPage productConfigPage;
	transient ProductSummaryPage productSummaryPage;
	ProductSummaryPage productSummarySteps = new ProductSummaryPage();
	public WebElement CoTermEndDate;
	public WebElement prod;
	public Double MRCAdjusted;
	public Double NRCAdjusted;
	public Double newMRCAdjusted;
	public Double newNRCAdjusted;
	public String ExpiraionDate;
	public String InternetMRC;
	public String InternetNRC;
	public String ManagedRouterMRC;
	public String ManagedRouterNRC;
	public String selectedUNIid;
	public String count = "a";
	public String APop = "";
	public String ZPop = "";
		
	@Step
	public void selectAttributesUNI(String testID, String attributesList)  throws Exception{
		try {
			Thread.sleep(10000);
			WebDriver driver = getDriver();
			Wait<WebDriver> wait = new WebDriverWait(driver, 10000);
			Map<String, String> configKeyValuePair = new HashMap<String, String>();
			configKeyValuePair = createConfigKeyValuePair(attributesList);
			if(driver.findElement(By.xpath("//*[@id='AttributeForm']/div[1]/div[2]/table/tbody/tr[3]/td[2]/div/span/span/span[1]")).getText().isEmpty()||
					driver.findElement(By.xpath("//*[@id='AttributeForm']/div[1]/div[2]/table/tbody/tr[3]/td[2]/div/span/span/span[1]")).getText().contains("Select")){
				Thread.sleep(1000);
				productConfigPage.address1.click();
				productConfigPage.address1List.get(2).click();
				Thread.sleep(11000);
			}
			if(testID.equals("2062")||testID.equals("2063")) {
				if(productConfigPage.uniNetworkStatus.getText().equalsIgnoreCase("On Net"))
					productConfigPage.uniNetworkStatus.sendKeys("Off Net");
				Thread.sleep(5000);
			}
			if(configKeyValuePair.get("portbandwidth")!=null) {
				slf4jLogger.info("port bandwidth method");
				wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.uniPortBandwidth));
			  	productConfigPage.uniPortBandwidth.sendKeys(configKeyValuePair.get("portbandwidth"));
				WaitForPageToLoad(5000);
				Thread.sleep(5000);
				slf4jLogger.info("selected UNI_PortBandwidth");
			}
			if(configKeyValuePair.get("UNI_Type")!=null) {
				slf4jLogger.info("UNI Type method");
				wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.uniType));
				productConfigPage.uniType.click();
				WaitForPageToLoad(5000);
				Thread.sleep(1000);
				productConfigPage.uniType.sendKeys(configKeyValuePair.get("UNI_Type"));
		        WaitForPageToLoad(5000);
		        productConfigPage.uniTypeLabel.click();
		        Thread.sleep(5000);
		        slf4jLogger.info("selected UNI_Type");
			}
			if(configKeyValuePair.get("InsideWiring")!=null) {
				slf4jLogger.info("inside wiring method");
				wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.unibillingExtension));
				productConfigPage.unibillingExtension.click();
				WaitForPageToLoad(5000);
				Thread.sleep(1000);
				productConfigPage.unibillingExtension.sendKeys(configKeyValuePair.get("InsideWiring"));
				
		        WaitForPageToLoad(5000);
		        productConfigPage.uniBandwidthLabel.click();
		        Thread.sleep(5000);
		        slf4jLogger.info("selected UNI_InsideWiring");
			}
	       if(configKeyValuePair.get("Bandwidth")!=null) {
	    	   slf4jLogger.info("bandwidth method");
	    	   wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.uniBandwidth));
				productConfigPage.uniBandwidth.click();
				productConfigPage.uniBandwidth.sendKeys(configKeyValuePair.get("Bandwidth"));
				WaitForPageToLoad(5000);
				 Thread.sleep(1000);
				productConfigPage.uniBandwidthLabel.click();
				WaitForPageToLoad(5000);
		        Thread.sleep(5000);
		        slf4jLogger.info("selected UNI_Bandwidth");
	       }
	       if(configKeyValuePair.get("evc")!=null) {
	    	   slf4jLogger.info("evc method");
	    	   wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.uniEvc));
				productConfigPage.uniEvc.click();
				productConfigPage.uniEvc.sendKeys(configKeyValuePair.get("evc"));
				Thread.sleep(1000);
				productConfigPage.unievclabel.click();
				WaitForPageToLoad(5000);
				Thread.sleep(1000);
				WaitForPageToLoad(5000);
		        Thread.sleep(5000);
		        slf4jLogger.info("selected UNI_evc");
	       }
	       slf4jLogger.info("UNI Product configuration Success..");
		}
		catch (Exception e) {
			slf4jLogger.info("UNI Product configuration failed..");
			Assert.fail(e.getMessage());
		}
		}
	
	@Step
	public  ProductConfigSteps selectAttributesDIA(String testID, String attributeList) throws Exception{
		WebDriver driver = getDriver();
		Wait<WebDriver> wait = new WebDriverWait(driver, 1000);
		Map<String, String> configKeyValuePair = new HashMap<String, String>();
		configKeyValuePair = createConfigKeyValuePair(attributeList);
		Thread.sleep(4000);
		try {
			slf4jLogger.info("Product configuration for DIA");
			String[] attributes =  attributeList.split(";");
			WaitForPageToLoad(5000);
			
			  for(int i=0;i<attributes.length;i++){
				   String[] keyValuePair =  attributes[i].split(":");
					  String key = keyValuePair[0];
					  String value = keyValuePair[1];
					  WaitForPageToLoad(6000);	
					  driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
						
						if(key.equals("Bandwidth")) {
							  	wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.bandwidth));
								productConfigPage.bandwidth.sendKeys(value);
								WaitForPageToLoad(5000);
								Thread.sleep(2000);
								slf4jLogger.info("selected Bandwidth");
						  }
						  else if(key.equals("AccessSubBandwidth")) {
							  	wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.accessSubBandwidth));
							  	productConfigPage.accessSubBandwidth.sendKeys(value);
								WaitForPageToLoad(5000);
								Thread.sleep(2000);
								slf4jLogger.info("selected AccessSubBandwidth");
						  }
						  else if(key.equals("InsideWiring")) {
							  	wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.billingExtension));
							  	productConfigPage.billingExtension.sendKeys(value);
								WaitForPageToLoad(5000);
								Thread.sleep(2000);
								slf4jLogger.info("selected insidewiring");
						  }
						  else if(key.equals("BillingMethod")) {
							    wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.diaBillingType));
							    WaitForPageToLoad(5000);
								productConfigPage.diaBillingType.sendKeys(value);
								WaitForPageToLoad(5000);
								Thread.sleep(4000);
								slf4jLogger.info("selected billing method");
						  }
						  else if(key.equals("MultipleLogicals")) {
							  wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.multipleLogicals));
							  WaitForPageToLoad(5000);
								productConfigPage.multipleLogicals.sendKeys(value);
								WaitForPageToLoad(5000);
								Thread.sleep(2000);
								slf4jLogger.info("selected MultipleLogicals");
						  }
						}
			Thread.sleep(5000);
			if(!testID.equals("10941")){
			if(configKeyValuePair.get("BillingMethod").equals("Billing Arrangement")) {
				clickOnContinue();
			//	productConfigPage.billingArrangement.get(productConfigPage.billingArrangement.size()-1).click();
			//	Select select = new Select(productConfigPage.billingArrangement.get(1));
			//	select.selectByVisibleText("Create New");*/
				wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.billingArrangement));
				//productConfigPage.billingArrangementName.click();
				if(!productConfigPage.billingArrangement.getText().contains("Test"))
					slf4jLogger.info("BillingArrangement not selected");
				
			  }
			clickOnContinue();
			WaitForPageToLoad(5000);
			wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.routerPOP));
			productConfigPage.routerPOP.sendKeys(configKeyValuePair.get("RouterPOP"));
			WaitForPageToLoad(5000);
			Thread.sleep(2000);
			slf4jLogger.info("selected RouterPOP");
			WaitForPageToLoad(10000);
			waitABit(5000);
			slf4jLogger.info(" Product configuration success ");
			}
		}
		catch (Exception e) {
			slf4jLogger.info(e.getMessage());
			Assert.fail(System.currentTimeMillis() + "@"
					+ "Error occured while configuring  produt");
		}
		return new ProductConfigSteps();
		
	}
	
	public void clickOnQuickSave(String testID) throws Exception {
		WebDriver driver = getDriver();
		JavascriptExecutor js = (JavascriptExecutor) driver;
		try {
			Thread.sleep(1000);
			js.executeScript("window.scrollBy(0,250)", "");
			ExpectedConditions.elementToBeClickable(productConfigPage.quickSaveBtn);
			productConfigPage.quickSaveBtn.click();
			Thread.sleep(15000);
			WaitForPageToLoad(10000);
			WaitForPageToLoad(10000);
			slf4jLogger.info("Clicked on QuickSave Btn..");
			Thread.sleep(10000);
		} catch (Exception e) {
			try{
				
				js.executeScript("window.scrollBy(0,-150)", "");
				driver.findElement(By.xpath("//*[@id='ProductPackageWizardView']/div[1]/div[4]/div[3]/button")).click();
			}
			catch (Exception e1) {
				Assert.fail(testID + ": @" + System.currentTimeMillis() + "@"
						+ "Error occured while clicking on Quick Save button");
			}
			}
		
	}
	
	
	

	@Step
	public void selectAttributesElineEVC(String attributesList,String testID)  throws Exception{
		try {
			slf4jLogger.info("inside E-Line EVC attributes function");
			Thread.sleep(8000);
			WebDriver driver = getDriver();
			Map<String, String> configKeyValuePair = new HashMap<String, String>();
			configKeyValuePair = createConfigKeyValuePair(attributesList);
			String[] attributes =  attributesList.split(";");
			
			ExpectedConditions.elementToBeClickable(productConfigPage.clearSelections);
		    productConfigPage.clearSelections.click();
			Thread.sleep(3000);

			Thread.sleep(8000);
			
			if(configKeyValuePair.get("relALoc_UNI")!=null) {
				ExpectedConditions.elementToBeClickable(productConfigPage.relALOCuniListbox);
				productConfigPage.relALOCuniListbox.click();
				Thread.sleep(4000);
				productConfigPage.aLOCuniSelection.click();
			  	Thread.sleep(8000);
				slf4jLogger.info("selected ALoc_UNI");
			}
			
			if(configKeyValuePair.get("EVC_Type")!=null) {
				ExpectedConditions.elementToBeClickable(productConfigPage.evcTypelistbox);
				productConfigPage.evcTypelistbox.click();
				Thread.sleep(4000);
				List<WebElement> options = driver.findElements(By.xpath("//li[text()='" + configKeyValuePair.get("EVC_Type") +"']"));
				options.get(options.size() - 1).click();
			  	Thread.sleep(5000);
				slf4jLogger.info("selected evcType");
			}
			if(configKeyValuePair.get("bandwidth")!=null) {
				ExpectedConditions.elementToBeClickable(productConfigPage.uniType);
				productConfigPage.evcBandwidth.click();
				WaitForPageToLoad(5000);
				Thread.sleep(2000);
				List<WebElement> options = driver.findElements(By.xpath("//li[text()='" +configKeyValuePair.get("bandwidth") +"']"));
				options.get(options.size() - 1).click();	
		       Thread.sleep(5000);
		       slf4jLogger.info("selected Bandwidth");
			}
			if(configKeyValuePair.get("EVC_Class")!=null) {
				try{

			        ExpectedConditions.elementToBeClickable(productConfigPage.evcClass);
					productConfigPage.evcClass.click();
					Thread.sleep(2000);
					List<WebElement> evcclass = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("EVC_Class")+"']"));
					Thread.sleep(1000);
					evcclass.get(evcclass.size() - 1).click();
			        WaitForPageToLoad(5000);
			        Thread.sleep(5000);
				
				}catch (Exception e) {

			        ExpectedConditions.elementToBeClickable(productConfigPage.evcClass);
					productConfigPage.evcClass.click();
					WaitForPageToLoad(5000);
					Thread.sleep(2000);
					List<WebElement> evcclass = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("EVC_Class")+"']"));
					Thread.sleep(1000);
					evcclass.get(evcclass.size() - 1).click();
			        WaitForPageToLoad(5000);
			        Thread.sleep(5000);
					
					
					
				
				}
				 slf4jLogger.info("selected EVC_Class");
			}
	       if(configKeyValuePair.get("ALocInsideWiring")!=null) {
	    	   Thread.sleep(2000);
		        ExpectedConditions.elementToBeClickable(productConfigPage.evcALocBuildingExtension);
				productConfigPage.evcALocBuildingExtension.click();
				
				 WaitForPageToLoad(5000);
				Thread.sleep(1000);
				List<WebElement> billingextns = driver.findElements(By.xpath("//li[text()='Standard Delivery - To the MPoE (Customer Provided)']"));
				slf4jLogger.info("Size:" +billingextns.size());
				Thread.sleep(5000);
				for (int j=0;j<billingextns.size();j++)
				{
					if(billingextns.get(j).getText().equals("Standard Delivery - To the MPoE (Customer Provided)"))
						billingextns.get(j).click();
				}	
		        WaitForPageToLoad(5000);
		        Thread.sleep(5000);
		        slf4jLogger.info("selected ALocInsideWiring");
		       
	       }
	       if(configKeyValuePair.get("ZLocInsideWiring")!=null) {
		        ExpectedConditions.elementToBeClickable(productConfigPage.evcZLocBuildingExtension);
				productConfigPage.evcZLocBuildingExtension.click();
				 WaitForPageToLoad(5000);
			    Thread.sleep(1000);
					List<WebElement> billingextns = driver.findElements(By.xpath("//li[text()='Standard Delivery - To the MPoE (Customer Provided)']"));
					slf4jLogger.info("Size:" +billingextns.size());
					Thread.sleep(5000);
					for (int j=0;j<billingextns.size();j++)
					{
						if(billingextns.get(j).getText().equals("Standard Delivery - To the MPoE (Customer Provided)"))
							billingextns.get(j).click();
					}	
			        WaitForPageToLoad(5000);
			        Thread.sleep(5000);
			      slf4jLogger.info("selected ZLocInsideWiring");
	       }
	       driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[1]/h3/label")).click();
	       Thread.sleep(10000);
		}
		catch (Exception e) {
			slf4jLogger.info("E Line EVC  Product configuration failed..");
			Assert.fail(e.getMessage());
		}
		Thread.sleep(10000);
		}

	
	@Step
	public  ProductConfigSteps selectAttributesWavelength(String attributeList) throws Exception{
		Thread.sleep(1000);
		WebDriver driver = getDriver();
		Wait<WebDriver> wait = new WebDriverWait(driver, 10000);
		try {
			slf4jLogger.info("Product configuration for Wavelength Product");
			String[] attributes =  attributeList.split(";");
			WaitForPageToLoad(5000);
			  for(int i=0;i<attributes.length;i++){
				    String[] keyValuePair =  attributes[i].split(":");
					  String key = keyValuePair[0];
					  String value = keyValuePair[1];
					  
						WaitForPageToLoad(5000);	
						driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
						
						if(key.equals("Bandwidth")) {
							wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.waveBandwidth));
							ExpectedConditions.elementToBeClickable(productConfigPage.waveBandwidth);
								productConfigPage.waveBandwidth.sendKeys(value);
								WaitForPageToLoad(5000);
								slf4jLogger.info("selected Bandwidth");
						  }
						  else if(key.equals("ALocInsideWiring")) {
							   WaitForPageToLoad(5000);
							  	productConfigPage.aLocbillingExtension.sendKeys(value);
								WaitForPageToLoad(5000);
								slf4jLogger.info("selected A Loc insidewiring");
						  }
						
						  else if(key.equals("ZLocInsideWiring")) {
							   WaitForPageToLoad(5000);
								productConfigPage.zLocbillingExtension.sendKeys(value);
								WaitForPageToLoad(5000);
								slf4jLogger.info("selected Z Loc insidewiring");
						  }
						  else if(key.equals("BillingMethod")) {
								WaitForPageToLoad(5000);
								productConfigPage.diaBillingType.sendKeys(value);
								WaitForPageToLoad(5000);
								slf4jLogger.info("selected billing method");
						  }
						
						  else if(key.equals("CustomRoute")) {
								WaitForPageToLoad(5000);
								productConfigPage.customRoute.sendKeys(value);
								WaitForPageToLoad(5000);
								slf4jLogger.info("selected Custom Route");
						  }
						  else if(key.equals("MultipleLogicals")) {
								WaitForPageToLoad(5000);
								productConfigPage.multipleLogicals.sendKeys(value);
								WaitForPageToLoad(5000);
								slf4jLogger.info("selected MultipleLogicalF");
						  }Thread.sleep(2000);
							
			  }
			  slf4jLogger.info("Wavelength Product configuration success ");
		}
		catch (Exception e) {
			slf4jLogger.info(e.getMessage());
			Assert.fail(System.currentTimeMillis() + "@"
					+ "Error occured while configuring Wavelength produt");	
		}
		return new ProductConfigSteps();
		
	}

	@Step
	public ProductConfigSteps clickOnFinishButton(String testID) throws Exception{
		WebDriver driver = getDriver();
		Wait<WebDriver> wait = new WebDriverWait(driver, 10000);
		Wait<WebDriver> fluentwait =new FluentWait<WebDriver>(driver)
		        .pollingEvery(Duration.ofSeconds(2))
				.withTimeout(Duration.ofMinutes(5))
				.ignoring(NoSuchElementException.class)
				.ignoring(StaleElementReferenceException.class)
				.ignoring(ElementNotVisibleException.class)
				.ignoring(ElementClickInterceptedException.class);
		try {
			    wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.finishbtn));
			    ExpectedConditions.visibilityOfElementLocated(By.xpath(".//*[@id='btnfinish']"));
			    WaitForPageToLoad(5000);
			    
			    WaitForPageToLoad(5000);
				driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
				Thread.sleep(1000);
				productConfigPage.finishbtn.click();	
				WaitForPageToLoad(5000);
				WaitForPageToLoad(5000);
				
				WaitForPageToLoad(5000);
				boolean alertPresent = productConfigPage.editPrevMRCDialoguebox.isVisible();
				if(testID.equals("28571")) {
					if(alertPresent)
						slf4jLogger.info("Getting Warning Message if location pair have not added before saving the package.");
					else
						Assert.fail(System.currentTimeMillis() + "@"
								+ "Not Getting the Warning Message if location pair have not added before saving the package.");
				}
				else if(testID.equals("28573")) {
					if(alertPresent) {
						productConfigPage.continueEditing.click();
						WaitForPageToLoad(5000);
					}
				}
				else if(testID.equals("28574")) {
					if(!alertPresent)
						slf4jLogger.info("Not Getting the Warning Message when location pair is added before saving the package.");
					else
						Assert.fail(System.currentTimeMillis() + "@"
								+ "Getting the Warning Message even after added location pair before saving the package.");
				}
				else if(testID.equals("24240")) {
					if(alertPresent) {
						WaitForPageToLoad(3000);
						productConfigPage.previousmrcXpath.isCurrentlyEnabled();
						productConfigPage.previousmrcXpath.click();
						productConfigPage.previousmrcXpath.sendKeys("0");
						WaitForPageToLoad(3000);
						productConfigPage.previousMRCSave.click();
						WaitForPageToLoad(1000);
						fluentwait.until(ExpectedConditions.elementToBeClickable(productConfigPage.finishbtn));
						if(productConfigPage.finishbtn.isPresent()) {
							productConfigPage.finishbtn.click();
							slf4jLogger.info("Save package is allowed after setting the previous MRC value to Zero");
						}
						else {
							Assert.fail(System.currentTimeMillis() + "@"
									+ "Save package is not allowed after setting the previous MRC value to Zero");
						}
					}
				}
				else if((testID.equals("30628"))||(testID.equals("30629"))||(testID.equals("32603"))) {
					if(alertPresent) {
						productConfigPage.saveAndExit.click();
						WaitForPageToLoad(5000);
					}
				}
				else {
					if(alertPresent){
						if(productConfigPage.editPrevMRCDialoguebox.getText().contains("You selected extra addresses for configuration but have not defined any additional location pairs. Are you sure you want to finish without assinging additional location pairs ?")) {
							productConfigPage.finishunusedLocationAlert.click();
							WaitForPageToLoad(1000);
						}
						else {
						WaitForPageToLoad(9000);
						if(productConfigPage.previousmrcXpath.isCurrentlyEnabled()) {
							productConfigPage.previousmrcXpath.click();
							productConfigPage.previousmrcXpath.sendKeys("500");
							WaitForPageToLoad(3000);
							productConfigPage.previousMRCSave.click();
							WaitForPageToLoad(1000);
							productConfigPage.finishbtn.click();
							}
						}
						
					}
				}
				slf4jLogger.info("Clicked on Finish button, saving the product");
				
		}
		catch (Exception e) {
			slf4jLogger.info(e.getMessage());
			Assert.fail(System.currentTimeMillis() + "@"
					+ "Error occured while clicking on Finish Button");
		}
		return new ProductConfigSteps();
	}
	
	
	@Step
	public  ProductConfigPage selectAttributesIPVPN(String attributeList) throws Exception{
		WebDriver driver = getDriver();
		try {
			slf4jLogger.info("Product configuration for IPVPN Product");
			String[] attributes =  attributeList.split(";");
			WaitForPageToLoad(4000);
			
		for(int i=0;i<attributes.length;i++){
			  String[] keyValuePair =  attributes[i].split(":");
				  String key = keyValuePair[0];
				  String value = keyValuePair[1];
				  WaitForPageToLoad(5000);	
				driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
					
				if(key.equals("Access")) {
					WaitForPageToLoad(5000);
					ExpectedConditions.elementToBeClickable(productConfigPage.access);
					productConfigPage.access.sendKeys(value);
					WaitForPageToLoad(5000);
					Thread.sleep(3000);
					slf4jLogger.info("selected Access");
				  }
				  else if(key.equals("InsideWiring")) {
					 WaitForPageToLoad(5000);
					 Thread.sleep(3000);
					 ExpectedConditions.elementToBeClickable(productConfigPage.billingExtension);
					productConfigPage.billingExtension.sendKeys(value);
					WaitForPageToLoad(5000);
					Thread.sleep(1000);
					slf4jLogger.info("selected insidewiring");
				  }
				  else if(key.equals("MultiService")) {
					  WaitForPageToLoad(5000);
					  ExpectedConditions.elementToBeClickable(productConfigPage.multiService);
					  	productConfigPage.multiService.sendKeys(value);
						WaitForPageToLoad(5000);
						Thread.sleep(1000);
						slf4jLogger.info("selected MultiServiceSelection");
				  }
				  else if(key.equals("Specific Design Requirement")) {
					  Thread.sleep(10000);
					  if(attributes.length==4 || attributes.length==7){
						  JavascriptExecutor js = (JavascriptExecutor) driver;
						  js.executeScript("window.scrollBy(0,150)", "");
					     Thread.sleep(3000);
						  WaitForPageToLoad(5000);
						  js.executeScript("window.scrollBy(0,550)", "");
						  Thread.sleep(2000);
						  }
					   WaitForPageToLoad(5000);
					   try {
						   clickOnContinue();
						   //productConfigPage.continue_btn.click();
						   Thread.sleep(4000);
						   ExpectedConditions.elementToBeClickable(productConfigPage.changeLabelSDRDiversity);
						   productConfigPage.changeLabelSDRDiversity.click();
					   }catch (Exception e) {
						   for(int x=0;x<2;x++) {
							   clickOnContinue();
							   Thread.sleep(1000);
							   productConfigPage.changeLabelSDRDiversity.click();
								   }
						   }
					   WaitForPageToLoad(2000);
					   Thread.sleep(1000);
				  }
					  else if(key.equals("Access Diversity")) {
						  WaitForPageToLoad(5000);
						  ExpectedConditions.elementToBeClickable(productConfigPage.accessDiversity);
							productConfigPage.accessDiversity.sendKeys(value);
							WaitForPageToLoad(5000);
							Thread.sleep(1000);
							slf4jLogger.info("selected AccessDiversity");
					  }
					  else if(key.equals("ProductPOPDiversity")) {
						  WaitForPageToLoad(5000);
						  ExpectedConditions.elementToBeClickable(productConfigPage.productPOPDiversity);
							productConfigPage.productPOPDiversity.sendKeys(value);
							WaitForPageToLoad(5000);
							Thread.sleep(3000);
							slf4jLogger.info("selected ProductPOPDiversity");
					  }
					  else if(key.equals("SPCRID")) {
						    WaitForPageToLoad(5000);
							ExpectedConditions.elementToBeClickable(productConfigPage.spcrID);
						  	productConfigPage.spcrID.sendKeys(value);
						  	WaitForPageToLoad(5000);
							Thread.sleep(7000);
							slf4jLogger.info("selected DLR");
					  }
					 else if(key.equals("DiverseCircuitDiversity")) {
					    WaitForPageToLoad(5000);
						ExpectedConditions.elementToBeClickable(productConfigPage.diverseCircuitDiversity);
						productConfigPage.diverseCircuitDiversity.sendKeys(value);
						Thread.sleep(1000);
						WaitForPageToLoad(5000);
						Thread.sleep(1000);;
						slf4jLogger.info("selected DiverseCircuitDiversity");
				  }
				  else if(key.equals("DiverseCircuitType")) {
					    WaitForPageToLoad(6000);
					    ExpectedConditions.elementToBeClickable(productConfigPage.diverseCircuitType);
						productConfigPage.diverseCircuitType.sendKeys(value);
						WaitForPageToLoad(5000);
						Thread.sleep(1000);
						slf4jLogger.info("selected DiverseCircuitType");
				  }		
				  else if(key.equals("BackupCircuit")) {
					  WaitForPageToLoad(5000);
					  ExpectedConditions.elementToBeClickable(productConfigPage.backupCircuit);
					  productConfigPage.backupCircuit.sendKeys(value);
					  	Thread.sleep(1000);
						WaitForPageToLoad(5000);
						Thread.sleep(1000);
						slf4jLogger.info("selected BackupCircuit");
				 }
				  else if(key.equals("PrimaryCircuit")) {
					  WaitForPageToLoad(5000);
					  ExpectedConditions.elementToBeClickable(productConfigPage.primaryCircuit);
					
					  productConfigPage.primaryCircuit.selectByIndex(2);
					  	Thread.sleep(1000);
						WaitForPageToLoad(5000);
						Thread.sleep(1000);
						slf4jLogger.info("selected PrimaryCircuit");
				 }
					  else if(key.equals("Term")) {
						  WaitForPageToLoad(5000);
						  ExpectedConditions.elementToBeClickable(productConfigPage.term);
						  productConfigPage.term.sendKeys(value);
							WaitForPageToLoad(5000);
							Thread.sleep(1000);
							slf4jLogger.info("selected Term");
					 }
					  else if(key.equals("IPVPNLogical")) {
						  clickOnContinue();
						  ExpectedConditions.elementToBeClickable(productConfigPage.changeLabelIPVPNlogical);
						  if(productConfigPage.changeLabelIPVPNlogical.isCurrentlyVisible() && productConfigPage.changeLabelIPVPNlogical.isPresent())
								productConfigPage.changeLabelIPVPNlogical.click();
							WaitForPageToLoad(5000);
							ExpectedConditions.elementToBeClickable(productConfigPage.addNewBtn);
							Thread.sleep(1000);
							productConfigPage.addNewBtn.click();
							Thread.sleep(3000);
							ExpectedConditions.elementToBeClickable(productConfigPage.saveBtnSC);
							productConfigPage.saveBtnSC.click();
							WaitForPageToLoad(10000);
					  }
				 }
			
			slf4jLogger.info("Ip VPN Product configuration success ");
		}
		catch (Exception e) {
			slf4jLogger.info(e.getMessage());
			driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
			Assert.fail(e.getMessage());
			
		}
		return new ProductConfigPage();
		
	}
	
	@Step
	public  ProductConfigPage selectAddressDQP(String addressList) throws InterruptedException{
		
		WebDriver driver = getDriver();
		try {
			Thread.sleep(5000);
			WaitForPageToLoad(5500);
			
			driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);

			List<WebElement> addressDropdwn = driver.findElements(By.id("ddlAddress"));
			slf4jLogger.info("Size:" +addressDropdwn.size());
			try{for(int i=0;i<addressDropdwn.size();i++) {
					addressDropdwn.get(i).click();
					int j=i+2;
					driver.findElement(By.xpath("//select[@id='ddlAddress']/option["+j+"]")).click();
					WaitForPageToLoad(5500);
				}
			
			}catch (Exception e) {
				
			for(int i=1;i<=addressDropdwn.size();i++) {
				Thread.sleep(12000);
				Select address=new Select(driver.findElement(By.xpath(
						"/html/body/app-root/app-package/div[2]/app-panel[1]/div/div[2]/app-package-details/form/div[4]/div["+i+"]/div[1]/select")));
			    address.selectByIndex(i);
				Thread.sleep(2000);
			}
			}
			WaitForPageToLoad(5500);
				slf4jLogger.info("Selected address!");
				Thread.sleep(3000);
				
		}
		catch (Exception e) {
			slf4jLogger.info(e.getMessage());
			Assert.fail(e.getMessage());
		}
		return new ProductConfigPage();
	}
	
	@Step
	public  void productConfigUNI(String portBandwidth, String uniType) throws InterruptedException{}
	
	@Step
	public void verifyNetMRC(String netMRC) throws InterruptedException{try{}	catch (Exception e) {
		slf4jLogger.info(e.getMessage());
		Assert.fail(e.getMessage());
	}
	}
	
	@Step
	public void clickOnContinue() throws Exception {
		try {
			WebDriver driver = getDriver();
			Wait<WebDriver> wait = new WebDriverWait(driver, 15000);
			wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.continuebtn));
			((JavascriptExecutor)driver).executeScript("arguments[0].click();", productConfigPage.continuebtn);
			WaitForPageToLoad(4000);
			Thread.sleep(2500);
			WaitForPageToLoad(8000);
			slf4jLogger.info("Clicked on continue..");
		} catch (Exception e) {
			Assert.fail("Error while clicking on Contine" + "@" + e.getMessage());
		}
		
	}
	
	public Map<String, String> createConfigKeyValuePair(String entries) throws Exception {
		
		String[] attributes =  entries.split(";");
		Map<String, String> map = new HashMap<String, String>();
		for (String entry : attributes) {
	        if (!TextUtils.isEmpty(entry) && entry.contains(":")) {
	            String[] keyValue = entry.split(":");
	            map.put(keyValue[0], keyValue[1]);
	        }
	    }
		
		return map;
	}
	
	public  void SwitchToASideAccess() throws InterruptedException{
		try {
			WebDriver driver = getDriver();
			slf4jLogger.info("Switch to A Side Access configuration Module");
			WaitForPageToLoad(8000);
			Wait<WebDriver> fluentwait =new FluentWait<WebDriver>(driver)
			        .pollingEvery(Duration.ofSeconds(2))
					.withTimeout(Duration.ofMinutes(5))
					.ignoring(NoSuchElementException.class)
					.ignoring(StaleElementReferenceException.class)
					.ignoring(ElementNotVisibleException.class)
					.ignoring(ElementClickInterceptedException.class);
		
			Wait<WebDriver> wait = new WebDriverWait(driver, 15000);
			wait.until(ExpectedConditions.visibilityOf(productConfigPage.aSideAcccesModule));
			ExpectedConditions.elementToBeClickable(productConfigPage.aSideAcccesModule);
			
			WebElement ZSide_textArg = fluentwait.until(new Function<WebDriver, WebElement>(){
			public WebElement apply(WebDriver driver) {
				productConfigPage.aSideAcccesModule.click();
				return driver.findElement(By.xpath(".//*[@id='parentAttributes']/div/div[1]/form/p"));
				}
			});
			if(ZSide_textArg.getText().equals("Specify the A side access for your Wavelength service.")) {
				slf4jLogger.info("Switch to A Side Access configuration Module Successfull..");
			}	
		
		}catch (Exception e) {
			slf4jLogger.info("Switch to A Side Access configuration Module failed..");
			Assert.fail(e.getMessage());
		}
		
		
	}
	
	
	public  void SwitchToZSideAccess() throws InterruptedException{
		try {
			WebDriver driver = getDriver();
			Wait<WebDriver> wait = new WebDriverWait(driver, 10000);
			Wait<WebDriver> fluentwait =new FluentWait<WebDriver>(driver)
			        .pollingEvery(Duration.ofSeconds(2))
					.withTimeout(Duration.ofMinutes(5))
					.ignoring(NoSuchElementException.class)
					.ignoring(StaleElementReferenceException.class)
					.ignoring(ElementNotVisibleException.class)
					.ignoring(ElementClickInterceptedException.class);
			slf4jLogger.info("Switch to Z Side Access configuration Module");
			WaitForPageToLoad(5000);
			wait.until(ExpectedConditions.visibilityOf(productConfigPage.aSideAcccesModule));
			wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.aSideAcccesModule));
			driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
			
			WebElement ZSide_textArg = fluentwait.until(new Function<WebDriver, WebElement>(){
			public WebElement apply(WebDriver driver) {
				 productConfigPage.aSideAcccesModule.click();
				 return driver.findElement(By.xpath(".//*[@id='parentAttributes']/div/div[1]/form/p"));
				}
			});
			if(ZSide_textArg.getText().equals("Specify the Z side access for your Wavelength service.")) {
				slf4jLogger.info("Switch to Z Side Access configuration Module Successfull..");
			}	
		}
		catch (Exception e) {
			slf4jLogger.info("Switch to Z Side Access configuration Module failed..");
			Assert.fail(e.getMessage());
		}
	}

public ProductConfigSteps selectAttributesENNI(String attributeList, String testID) throws InterruptedException {
	WebDriver driver = getDriver();
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	
	try {
		slf4jLogger.info("Product configuration for Product");
		String[] attributes =  attributeList.split(";");
		WaitForPageToLoad(5000);
		
		  for(int i=0;i<attributes.length;i++){
			   String[] keyValuePair =  attributes[i].split(":");
				  String key = keyValuePair[0];
				  String value = keyValuePair[1];
				  WaitForPageToLoad(6000);	
				  driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
	
					if(key.equals("Port_Bandwidth")||key.equals("portbandwidth")||key.equals("Bandwidth")) {
						WaitForPageToLoad(10000);
				        Thread.sleep(10000);
						ExpectedConditions.elementToBeClickable(productConfigPage.uniPortBandwidth);
						productConfigPage.uniPortBandwidth.click();
						productConfigPage.uniPortBandwidth.sendKeys(value.trim());
						WaitForPageToLoad(15000);
				        Thread.sleep(7000);
				        driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr[2]/td[1]/label")).click();
				        Thread.sleep(6000);
				        slf4jLogger.info("selected Port Bandwidth method - ENNI");
					}
					
					 else if(key.equals("Port_Redundancy")) {
						 WaitForPageToLoad(10000);
					        Thread.sleep(10000);
							ExpectedConditions.elementToBeClickable(productConfigPage.portRedundancyListbox);
							productConfigPage.portRedundancyListbox.click();
							productConfigPage.portRedundancyListbox.sendKeys(value.trim());
							WaitForPageToLoad(15000);
					        Thread.sleep(10000);
					        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[3]/td[1]/label")).click();
					        Thread.sleep(6000);
					        slf4jLogger.info("selected Port Redundancy Method - ENNI");
						}
					
					 else if(key.equals("Inside_Wiring")||key.equals("InsideWiring")) {
						 WaitForPageToLoad(10000);
					        Thread.sleep(10000);
							ExpectedConditions.elementToBeClickable(productConfigPage.insideWiring);
							productConfigPage.insideWiring.click();
							productConfigPage.insideWiring.sendKeys(value.trim());
							WaitForPageToLoad(15000);
					        Thread.sleep(10000);
					        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[6]/td[1]/label")).click();
					        Thread.sleep(6000);
					        slf4jLogger.info("selected Inside Wiring Method - ENNI");
						}
					
					 else if(key.equals("IP_Pop")) {
						 WaitForPageToLoad(10000);
					        Thread.sleep(10000);
							ExpectedConditions.elementToBeClickable(productConfigPage.ipPop);
							productConfigPage.ipPop.click();
							productConfigPage.ipPop.sendKeys(value.trim());
							WaitForPageToLoad(15000);
					        Thread.sleep(10000); 
					        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[8]/td[1]/label")).click();
					        Thread.sleep(6000);
					        slf4jLogger.info("selected IP Pop Method - ENNI");
						}
				}
		slf4jLogger.info("Selecting Product Attributes Completed : ENNI");

	}
	catch (Exception e) {
		Assert.fail(System.currentTimeMillis() + "@"
				+ "Error occured while configuring ENNI product");
	}
	return new ProductConfigSteps();
	
}


public ProductConfigSteps selectAttributesEAccessOVC(String attributeList, String testID) throws InterruptedException {
	WebDriver driver = getDriver();
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	
	try {
		slf4jLogger.info("Address selection - E Access OVC");
		if(driver.findElement(By.xpath("//*[@id='AttributeForm']/div[1]/div[2]/table/tbody/tr[3]/td[2]/div/span/span/span[1]")).getText().isEmpty()||
				driver.findElement(By.xpath("//*[@id='AttributeForm']/div[1]/div[2]/table/tbody/tr[3]/td[2]/div/span/span/span[1]")).getText().contains("Select")){
			Thread.sleep(1000);
			productConfigPage.address1.click();
			productConfigPage.address1List.get(2).click();
			Thread.sleep(10000);
		}
			
		slf4jLogger.info("Product configuration for Product");
		String[] attributes =  attributeList.split(";");
		WaitForPageToLoad(5000);
		
		configKeyValuePair = createConfigKeyValuePair(attributeList);
		ExpectedConditions.elementToBeClickable(productConfigPage.clearSelections);
	    productConfigPage.clearSelections.click();
		Thread.sleep(5000);
		
		  for(int i=0;i<attributes.length;i++){
			   String[] keyValuePair =  attributes[i].split(":");
				  String key = keyValuePair[0];
				  String value = keyValuePair[1];
				  WaitForPageToLoad(6000);	
				  driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
	
					if(key.equals("OVC_Type")||key.equals("OVC")) {
						WaitForPageToLoad(10000);
				        Thread.sleep(10000);
						ExpectedConditions.elementToBeClickable(productConfigPage.ovcType);
						productConfigPage.ovcType.click();
						productConfigPage.ovcType.sendKeys(value.trim());
						WaitForPageToLoad(15000);
				        Thread.sleep(7000);
				        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[6]/td[1]/label")).click();
				        Thread.sleep(6000);
				        slf4jLogger.info("selected OVC Type method - E-Access OVC");
					}
					
					 else if(key.equals("Bandwidth")) {
						 WaitForPageToLoad(10000);
					        Thread.sleep(10000);
							ExpectedConditions.elementToBeClickable(productConfigPage.uniBandwidth);
							productConfigPage.uniBandwidth.click();
							productConfigPage.uniBandwidth.sendKeys(value.trim());
							WaitForPageToLoad(15000);
					        Thread.sleep(10000);
					        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[7]/td[1]/label")).click();
					        Thread.sleep(6000);
					        slf4jLogger.info("selected Bandwidth Method - E-Access OVC");
						}
					
					 else if(key.equals("ZLocInsideWiring")) {
						 WaitForPageToLoad(10000);
					        Thread.sleep(10000);
							ExpectedConditions.elementToBeClickable(productConfigPage.evcZLocBuildingExtension);
							productConfigPage.evcZLocBuildingExtension.click();
							productConfigPage.evcZLocBuildingExtension.sendKeys(value.trim());
							WaitForPageToLoad(15000);
					        Thread.sleep(10000);
					        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[27]/td[1]/label")).click();
					        Thread.sleep(6000);
					        slf4jLogger.info("selected Z Loc BE Method - E-Access OVC");
						}
				}
		slf4jLogger.info("Selecting Product Attributes Completed : E-Access OVC");

	}
	catch (Exception e) {
		Assert.fail(System.currentTimeMillis() + "@"
				+ "Error occured while configuring E-Access-OVC product");
	}
	return new ProductConfigSteps();
	
}


@Step
public void clickOnNext() throws Exception {
	WebDriver driver = getDriver();
	Wait<WebDriver> wait = new WebDriverWait(driver, 15000);
	try {
 		
		wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.nextbtn1));
		productConfigPage.nextbtn1.click();
		WaitForPageToLoad(4000);
		Thread.sleep(2000);
		WaitForPageToLoad(8000);
		slf4jLogger.info("Clicked on next..");
	} catch (Exception e) {
		try{
			wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("/html/body/div[4]/div[1]/div[5]/div[2]/div[3]/button"))));
			driver.findElement(By.xpath("/html/body/div[4]/div[1]/div[5]/div[2]/div[3]/button")).click();
			WaitForPageToLoad(4000);
			Thread.sleep(2000);
			slf4jLogger.info("Clicked on next..");
		}catch(Exception e1){
		Assert.fail("Error while clicking on next" + "@" + e1.getMessage());
		}
	}
	
}

@Step
public void clickOnSecondNextButton() throws Exception {
	WebDriver driver = getDriver();
	Wait<WebDriver> wait = new WebDriverWait(driver, 15000);
	try {
 		
		wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.nextbutton2));
		productConfigPage.nextbutton2.click();
		WaitForPageToLoad(4000);
		Thread.sleep(2000);
		WaitForPageToLoad(8000);
		slf4jLogger.info("Clicked on second next button..");
	} catch (Exception e) {
		try{
			wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("/html/body/div[4]/div[3]/div[5]/div[2]/div[3]/button"))));
			driver.findElement(By.xpath("/html/body/div[4]/div[3]/div[5]/div[2]/div[3]/button")).click();
			WaitForPageToLoad(4000);
			Thread.sleep(2000);
			slf4jLogger.info("Clicked on second next button..");
		}catch(Exception e1){
		Assert.fail("Error while clicking on second next" + "@" + e1.getMessage());
		}
	}
	
}


@Step
public void checkForEnabledOrDisabledLocationPairComponent(String testid) {
	try {
		slf4jLogger.info("Checking for Location pair is enabled/disabled");
		WebDriver driver = getDriver();
		Wait<WebDriver> wait = new WebDriverWait(driver, 10000);
		boolean res1 = false, status = false;
		if(testid.equals("25363") || testid.equals("25364")) {
			wait.until(ExpectedConditions.visibilityOf(productConfigPage.changeLabelLocationPair));
			res1 = productConfigPage.changeLabelLocationPair.isVisible();
			if(res1) {
				status = productConfigPage.changeLabelLocationPair.getAttribute("class").contains("disabled");
				if(testid.equals("25363")) {
					if(status) 
						slf4jLogger.info("verification of Location pair is disabled successful");
					else
						Assert.fail("verification of Location pair is disabled failed....");
				}
				else if(testid.equals("25364")) {
					if(!status) 
						slf4jLogger.info("verification of Location pair is enabled successful");
					else
						Assert.fail("verification of Location pair is enabled failed....");
				}	
			}
		}
        else if(testid.equals("28569") || testid.equals("28570") || testid.equals("25365")) {
        	wait.until(ExpectedConditions.textToBePresentInElementLocated(By.xpath("//*[@id=\"InnerBody\"]/section/div[2]/h4"), "Configure Package"));
        	WaitForPageToLoad(10000);
        	res1 = productConfigPage.changeLabelLocationPair.isVisible();
        	if(!res1) 
        		slf4jLogger.info("verification of Location pair is hidden successful");
			else
				Assert.fail("verification of Location pair is hidden failed....");
        	
        }
	}
	catch (Exception e) {
			slf4jLogger.info("verification of Location pair is enabled/disabled/hidden failed for Test id ....@"+ testid +" " +e.getMessage());
			Assert.fail(e.getMessage());	
	}
}


public void openLocationPairComponent() {
	try {
		slf4jLogger.info("Opening Location pair Component");
		WebDriver driver = getDriver();
		Wait<WebDriver> wait = new WebDriverWait(driver, 10000);
		Wait<WebDriver> fluentwait =new FluentWait<WebDriver>(driver)
		        .pollingEvery(Duration.ofSeconds(2))
				.withTimeout(Duration.ofMinutes(5))
				.ignoring(NoSuchElementException.class)
				.ignoring(StaleElementReferenceException.class)
				.ignoring(ElementNotVisibleException.class)
				.ignoring(ElementClickInterceptedException.class);
		for(int i=1;i<=3;i++)clickOnContinue();
		Thread.sleep(3000);
		wait.until(ExpectedConditions.visibilityOf(productConfigPage.changeLabelLocationPair));
		ExpectedConditions.elementToBeClickable(productConfigPage.changeLabelLocationPair);
		
	    WebElement LP_textArg = fluentwait.until(new Function<WebDriver, WebElement>(){
	       public WebElement apply(WebDriver driver) {
		        productConfigPage.changeLabelLocationPair.click();
		        return driver.findElement(By.xpath("//*[@id=\"collapse4\"]/div/div[2]/div/div/form/div[2]/div[1]/span"));
		   }
	    });
		if(LP_textArg.getText().contains("Specify the location pairing(s)")) {
			slf4jLogger.info("Location pair component clicked");
		 }
		else
			Assert.fail("Location pair component is not clickable....");
	}
	catch (Exception e) {
			slf4jLogger.info("Location pair component is not clickable...."+e.getMessage());
			Assert.fail(e.getMessage());	
	}
}

@Step
public void checkForLocationPairAttributes(String testid) {
	try {
		slf4jLogger.info("Checking for the presence of Location pair Component Attributes");
		openLocationPairComponent();
		WaitForPageToLoad(5000);
		WebDriver driver = getDriver();
		Wait<WebDriver> wait = new WebDriverWait(driver, 10000);
		boolean res1=false,res2=false,res3=false,res4=false;
		if(testid.equals("25367")) {
			res1 = productConfigPage.aSideAddress.isVisible();
			res2 = productConfigPage.zSideAddress.isVisible();
			res3 = productConfigPage.addLocationPairBtn.isVisible();
			res4 = productConfigPage.locationPairsGrid.isPresent();
			if(res1 && res2 && res3 && res4) {
            	slf4jLogger.info("verification of presence of Location pair Attributes successful");
            }
            else
            	Assert.fail("verification of presence of Location pair Attributes failed....");
		}
		else if(testid.equals("25368")) {
			wait.until(ExpectedConditions.visibilityOf(productConfigPage.editingLabelLocationPair));
			ExpectedConditions.elementToBeClickable(productConfigPage.editingLabelLocationPair);
			if(productConfigPage.editingLabelLocationPair.isPresent()) {
				productConfigPage.editingLabelLocationPair.click();
				WaitForPageToLoad(5000);
				res1 = productConfigPage.changeLabelLocationPair.isVisible();
				res2 = productConfigPage.locationPairsGrid.getText().trim().equals("Location Pairing (optional)");
				res3 = productConfigPage.addLocationPairBtn.isVisible();
				if(res1 && res2 && !res3) {
					slf4jLogger.info("verification after minimizing Location pair component successful");
				}
				else
					Assert.fail("verification after minimizing Location pair component failed");
			}
			
		}
        
        
	}
	catch (Exception e) {
		slf4jLogger.info("Verification for the presence of Location pair Component Attributes Failed...."+e.getMessage());
		Assert.fail(e.getMessage());
	}
	
}

@Step
public void selectAttributesANS(String attributeList, String testID) throws InterruptedException {
	WebDriver driver = getDriver();
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	
	try {
		if(driver.findElement(By.xpath("//*[@id='AttributeForm']/div[1]/div[2]/table/tbody/tr[3]/td[2]/div/span/span/span[1]")).getText().isEmpty()){
			Thread.sleep(1000);
			productConfigPage.address1.click();
			productConfigPage.address1List.get(2).click();
			Thread.sleep(10000);
		}
		
		configKeyValuePair = createConfigKeyValuePair(attributeList);
		ExpectedConditions.elementToBeClickable(productConfigPage.clearSelections);
	    productConfigPage.clearSelections.click();
		Thread.sleep(5000);
		for(int i=1;i<=productConfigPage.smCoreProdFields.size();i++) {
			WebElement prodField = null;
			try{
				 prodField = driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/input"));
				
			}catch (Exception e) {
				try{
					i=8;
					 prodField = driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/input"));					
				}catch (Exception e1) {
					slf4jLogger.info("Selected.Attributes..!");
					break;
				}
				
			}
			String prodID = prodField.getAttribute("id");
			WebElement  prod = driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/span/span[1]"));
			ExpectedConditions.elementToBeClickable(prod);
			
			if(prodID.equals("Region")) {
				prod.click();
				List<WebElement> Region_options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Region")+"']"));
				Thread.sleep(2000);
				Region_options.get(Region_options.size() - 1).click();
		        WaitForPageToLoad(5000);
		        Thread.sleep(5000);
				
			}
			
	       else if(prodID.equals("Service_Level")) {
				prod.click();
				List<WebElement> Service_Level_options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Service_Level")+"']"));
				Thread.sleep(2000);
				Service_Level_options.get(Service_Level_options.size() - 1).click();
		        WaitForPageToLoad(5000);
		        Thread.sleep(5000);
				
			}
	       else if(prodID.equals("Gateway_City")) {
				prod.click();
				List<WebElement> Gateway_City_options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Gateway_City")+"']"));
				Thread.sleep(2000);
				Gateway_City_options.get(Gateway_City_options.size() - 1).click();
		        WaitForPageToLoad(3000);
		        Thread.sleep(8000);
		        break;
				
			}
			}
		slf4jLogger.info(testID + ":" + System.currentTimeMillis()
				+ "299: Selecting Product Attributes Completed : ANS");

	}
	catch (Exception e) {
		Assert.fail(System.currentTimeMillis() + "@"
				+ "Error occured while configuring ANS product");
	}
		
}

@Step
public void selectAttributesANSSite(String attributeList, String testID) throws InterruptedException {
	WebDriver driver = getDriver();
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	
	try {
		if(driver.findElement(By.xpath("//*[@id='AttributeForm']/div[1]/div[2]/table/tbody/tr[3]/td[2]/div/span/span/span[1]")).getText().isEmpty()||
				driver.findElement(By.xpath("//*[@id='AttributeForm']/div[1]/div[2]/table/tbody/tr[3]/td[2]/div/span/span/span[1]")).getText().contains("Select")){
			Thread.sleep(1000);
			productConfigPage.address1.click();
			productConfigPage.address1List.get(2).click();
			Thread.sleep(10000);
		}
		
		configKeyValuePair = createConfigKeyValuePair(attributeList);
		ExpectedConditions.elementToBeClickable(productConfigPage.clearSelections);
	    productConfigPage.clearSelections.click();
		Thread.sleep(5000);
		for(int i=2;i<=productConfigPage.smCoreProdFields.size();i++) {
			WebElement prodField = null;
			try{
				 prodField = driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/input"));
				
			}catch (Exception e) {
				
					slf4jLogger.info("Selected.Attributes..!");
					break;
				}
				
			String prodID = prodField.getAttribute("id");
			WebElement  prod = driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/span/span[1]"));
			ExpectedConditions.elementToBeClickable(prod);
			
			if(prodID.equals("Deployment_Type")) {
				prod.click();
				List<WebElement> Region_options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Deployment_Type")+"']"));
				Thread.sleep(2000);
				Region_options.get(Region_options.size() - 1).click();
		        WaitForPageToLoad(5000);
		        Thread.sleep(5000);
				
			}
			
	       else if(prodID.equals("Managed")) {
				prod.click();
				List<WebElement> Service_Level_options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Managed_Site")+"']"));
				Thread.sleep(2000);
				Service_Level_options.get(Service_Level_options.size() - 2).click();
		        WaitForPageToLoad(5000);
		        Thread.sleep(5000);
				break;
			}
	      
			}
		slf4jLogger.info(testID + ":" + System.currentTimeMillis()
				+ "299: Selecting Product Attributes Completed : ANS_site ");

	}
	catch (Exception e) {
		Assert.fail(System.currentTimeMillis() + "@"
				+ "Error occured while configuring ANS_site product");
	}
		
}
			
@Step
public void enterTotalMRR(String testID) throws Exception{
	WebDriver driver = getDriver();
	JavascriptExecutor js = (JavascriptExecutor) driver;
	try {
		if(testID.equals("2044") || testID.equals("1938") ){
			WaitForPageToLoad(4000);
			Thread.sleep(2000);
			js.executeScript("window.scrollBy(0,150)", "");
			productConfigPage.totalMRR.clear();
			productConfigPage.totalMRR.sendKeys("100");
			driver.findElement(By.xpath("/html/body/div[4]/div[2]/div[3]/div[4]/div[2]/div/div/div[2]/table/tbody/tr[3]/td[3]/div/div/div[1]")).click();
			WaitForPageToLoad(4000);
			Thread.sleep(2000);
			js.executeScript("window.scrollBy(0,-250)", "");
		}else if(testID.equals("1988") ){
			js.executeScript("window.scrollBy(0,600)", "");
			WebElement totalMRR =driver.findElement(By.xpath("//*[@id='ProductGrid']/div[2]/table/tbody/tr[6]/td[4]/div/div[3]/div/div[2]/div[1]/input"));
			totalMRR.click();
			
			totalMRR.sendKeys("100");
			driver.findElement(By.xpath("/html/body/div[4]/div[2]/div[3]/div[4]/div[2]/div/div/div[2]/table/tbody/tr[6]/td[3]/div/div/div[3]")).click();
			WaitForPageToLoad(4000);
			Thread.sleep(2000);	
		}
		else if(testID.equals("3115")){
			WaitForPageToLoad(4000);
			Thread.sleep(2000);
			js.executeScript("window.scrollBy(0,150)", "");
			productConfigPage.hybridConnReplacementMRR.clear();
			productConfigPage.hybridConnReplacementMRR.sendKeys("500");
			driver.findElement(By.xpath("/html/body/div[4]/div[2]/div[3]/div[4]/div[2]/div/div/div[2]/table/tbody/tr[3]/td[3]/div/div/div[1]")).click();
			WaitForPageToLoad(4000);
			Thread.sleep(2000);
			js.executeScript("window.scrollBy(0,-250)", "");
		}
	} catch (Exception e) {
		
		Assert.fail("Error while verifying pricing details in Product configuration page..");
	}
}

@Step
public void clickOnSaveProduct(String testID) throws Exception {
	WebDriver driver = getDriver();
	try {
		ExpectedConditions.elementToBeClickable(productConfigPage.saveprodbtn);
		productConfigPage.saveprodbtn.click();
		slf4jLogger.info("Clicked on Save product Btn..");
	} catch (Exception e) {
		try{
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("window.scrollBy(0,-150)", "");
			driver.findElement(By.xpath("/html/body/div[4]/div[1]/div[5]/div[2]/div[4]/button")).click();
		}
		catch (Exception e1) {
			Assert.fail(testID + ": @" + System.currentTimeMillis() + "@"
					+ "Error occured while clicking on Save product button");
		}
		}
	
}

@Step
public void editProductInConfigPage(String testID) throws Exception {try{
	WebDriver driver = getDriver();
	 WaitForPageToLoad(5000);
     Thread.sleep(20000);
	if(testID.equals("2044")){
		ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("//*[@id='ProductGrid']/div[2]/table/tbody/tr[1]/td[1]/div/div[1]/span[2]/a")));
		driver.findElement(By.xpath("//*[@id='ProductGrid']/div[2]/table/tbody/tr[1]/td[1]/div/div[1]/span[2]/a")).click();
		 WaitForPageToLoad(5000);
	        Thread.sleep(8000);
		
		driver.switchTo().alert().accept();
		 WaitForPageToLoad(5000);
	        Thread.sleep(5000);
 		
		WebElement  prod = driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr[8]/td[2]/div/span/span/span[1]"));
		prod.click();
		List<WebElement> Gateway_City_options = driver.findElements(By.xpath("//li[text()='Singapore Singapore']"));
		Gateway_City_options.get(Gateway_City_options.size() - 1).click();
        WaitForPageToLoad(5000);
        Thread.sleep(5000);
	}
	
	else if (testID.equals("1934")) {
		Thread.sleep(5000);
		productConfigPage.uniproductedit.click();
		Thread.sleep(10000);
		ExpectedConditions.elementToBeClickable(productConfigPage.uniPortBandwidth);
		productConfigPage.uniPortBandwidth.click();
		WaitForPageToLoad(5000);
		Thread.sleep(1000);
		driver.findElement(By.xpath("//li[text()='10 Gbps']")).click();
		WaitForPageToLoad(5000);
		Thread.sleep(3000);
		productConfigPage.firstnextbutton.click();
		Thread.sleep(10000);
		String newprodattribute=productConfigPage.uniproductedit.getText();
		if(!newprodattribute.contains("10 Gbps"))
			Assert.fail("error while reading the changed attribute");
		WaitForPageToLoad(5000);
		productConfigPage.saveproductbutton.click();
		Thread.sleep(10000);
	}
	else if (testID.equals("2049")) {
		Thread.sleep(5000);
		productConfigPage.accessThreeTypeBandwidth.click();
		List<WebElement> options = driver.findElements(By.xpath("//li[text()='26-50 Mbps']"));
		options.get(options.size() - 1).click();
		WaitForPageToLoad(5000);
        Thread.sleep(5000);
		
		
	}
	else if (testID.equals("1993")) {
		driver.switchTo().alert().accept();
			Thread.sleep(5000);
			Thread.sleep(5000);
			productConfigPage.bandwidth.click();
			List<WebElement> options = driver.findElements(By.xpath("//li[text()='GIG-E']"));
			options.get(options.size() - 1).click();
			WaitForPageToLoad(5000);
	        Thread.sleep(5000);
	
	}
	else if (testID.equals("2055")) {
		productConfigPage.clearSelections.click();
		driver.switchTo().alert().accept();
			Thread.sleep(5000);
			Thread.sleep(5000);
			productConfigPage.bandwidth.click();
			List<WebElement> options = driver.findElements(By.xpath("//li[text()='2 Mbps']"));
			options.get(options.size() - 1).click();
			WaitForPageToLoad(5000);
	        Thread.sleep(5000);
	
	}
	else if(testID.equals("2033")){
		driver.findElement(By.xpath("/html/body/div[4]/div[2]/div[3]/div[4]/div[2]/div/div/div[2]/table/tbody/tr[1]/td[1]/div/div[1]/span[2]/a")).click();
		Thread.sleep(3000);
		
		driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[10]/td[2]/div/span")).sendKeys("200 Mbps");
		Thread.sleep(5000);
		
		productConfigPage.nextbtn1.click();
		Thread.sleep(3000);
		
		addChildChargesinSM(testID, "Additional Directory Listing", "Listing:Additional Listing - Local");
		Thread.sleep(3000);
		
	}
}catch (Exception e) {
	Assert.fail();
}
}

public ProductConfigSteps chooseLocationFromDropdown(String testID, String product) throws InterruptedException {
	try {
		WebDriver driver = getDriver();
		slf4jLogger.info("Selecting address from dropdown..."+product+"!");
		productConfigPage.addressDropdown.click();
		Thread.sleep(5000);
		productConfigPage.addresslist.get(1).click();
		Thread.sleep(5000);
		if((testID.equals("1975")&& product.equals("Stand Alone Cross Connect")) ||product.equals("Ethernet Private Line") ) {
 			
			Thread.sleep(5000);
			slf4jLogger.info("Selecting address from dropdown2..."+product+"!");
			productConfigPage.addressDropdown2.click();
			Thread.sleep(5000);
			List<WebElement> address2=driver.findElements(By.xpath("/html/body/div[34]/div/div[2]/ul/li"));
			Thread.sleep(2000);
			address2.get(2).click();
			Thread.sleep(5000);
		}
		if(testID.equals("2041")){
		
			Thread.sleep(5000);
			slf4jLogger.info("Selecting address from dropdown2..."+product+"!");
			productConfigPage.addressDropdown2.click();
			Thread.sleep(5000);
			
			List<WebElement> options = driver.findElements(By.xpath("//li[text()='9600 BROWNSBORO ROAD LOUISVILLE, KENTUCKY 40241, UNITED STATES']"));
			Thread.sleep(2000);
			options.get(options.size() - 1).click();
			Thread.sleep(5000);
			
		}
	}catch (Exception e) {
		Assert.fail(testID + ": @" + System.currentTimeMillis() + "@"
				+ "Error occured while choosing location...");
	}
	return new ProductConfigSteps();
}

public ProductConfigSteps prodConfigHighAvailability(String attributeList, String testID) throws InterruptedException {
	WebDriver driver = getDriver();
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	
	try {
		productConfigPage.nextbtn1.click();
		WaitForPageToLoad(6000);
        Thread.sleep(5000);
        slf4jLogger.info("Entering into prod Review page.....!");
        
        productConfigPage.highavailability.click();
		WaitForPageToLoad(6000);
        Thread.sleep(5000);
        slf4jLogger.info("Selecting into High Availability...!");
        
		configKeyValuePair = createConfigKeyValuePair(attributeList);
		  
		ExpectedConditions.elementToBeClickable(productConfigPage.clearSelections);
	    productConfigPage.clearSelections.click();
		Thread.sleep(5000);
		for(Map.Entry<String,String> entry : configKeyValuePair.entrySet()) {
			for(int i=1;i<=productConfigPage.smCoreProdFields.size();i++) {

				WebElement prodField = null;
				try{
					 prodField = driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/input"));
					
				}catch (Exception e) {
					slf4jLogger.info("Selected.Attributes..!");
					break;
				}
				String prodID = prodField.getAttribute("id");
				WebElement prod = driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/span/span[1]"));
				ExpectedConditions.elementToBeClickable(prod);
				
				if(entry.getKey().equals(prodID)) {
					if(prodID.equals("Access_One_Type_HA")) {
						prod.click();
						List<WebElement> options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Access_One_Type_HA")+"']"));
						options.get(options.size() - 1).click();
				        WaitForPageToLoad(6000);
				        Thread.sleep(5000);
				}
					
			       else if(prodID.equals("Access_Two_Type_HA")) {
						prod.click();
						List<WebElement> options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Access_Two_Type_HA")+"']"));
						options.get(options.size() - 1).click();
						WaitForPageToLoad(5000);
				        Thread.sleep(5000);
						
					}
			       else if(prodID.equals("Access_Three_Type_HA")) {
						prod.click();
						List<WebElement> options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Access_Three_Type_HA")+"']"));
						options.get(options.size() - 1).click();
						WaitForPageToLoad(5000);
				        Thread.sleep(5000);
						
					}
			       else if(prodID.equals("Access_Three_Type_Bandwidth_HA")) {
						prod.click();
						List<WebElement> options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Access_Three_Type_Bandwidth_HA")+"']"));
						options.get(options.size() - 1).click();
						WaitForPageToLoad(5000);
				        Thread.sleep(5000);
						
					}
			       else if(prodID.equals("Access_Four_Type_HA")) {
						prod.click();
						List<WebElement> options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Access_Four_Type_HA")+"']"));
						options.get(options.size() - 1).click();
						WaitForPageToLoad(5000);
				        Thread.sleep(5000);
						
					}
			       else if(prodID.equals("A4Type_HA")) {
						prod.click();
						List<WebElement> options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("A4Type_HA")+"']"));
						options.get(options.size() - 1).click();
						WaitForPageToLoad(5000);
				        Thread.sleep(5000);
						
					}

			       else if(prodID.equals("Circuit_Type4_HA")) {
						prod.click();
						List<WebElement> options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Circuit_Type4_HA")+"']"));
						options.get(options.size() - 1).click();
						WaitForPageToLoad(5000);
				        Thread.sleep(5000);
						
					}
			       else if(prodID.equals("Billing_Method4_HA")) {
						prod.click();
						List<WebElement> options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Billing_Method4_HA")+"']"));
						options.get(options.size() - 1).click();
						WaitForPageToLoad(5000);
				        Thread.sleep(5000);
						
					}
			       else if(prodID.equals("Access_Type4_HA")) {
						prod.click();
						List<WebElement> options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Access_Type4_HA")+"']"));
						options.get(options.size() - 1).click();
						WaitForPageToLoad(5000);
				        Thread.sleep(5000);
						
					}
			       else if(prodID.equals("Inside_Wiring4_HA")) {
						prod.click();
						List<WebElement> options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Inside_Wiring4_HA")+"']"));
						options.get(options.size() - 1).click();
						WaitForPageToLoad(5000);
				        Thread.sleep(5000);
						
					}
			       
				}
				
			}
		}
		slf4jLogger.info(testID + ":" + System.currentTimeMillis()
				+ "299: Selecting Product Attributes Completed : High Availability");

	}
	catch (Exception e) {
		Assert.fail(System.currentTimeMillis() + "@"
				+ "Error occured while configuring High Availability");
	}
	return new ProductConfigSteps();
	}

public void verifyChildProductsListSM(String testID, String product) throws Exception {
	WebDriver driver = getDriver();
	try {
		ExpectedConditions.elementToBeClickable(productConfigPage.addChildBtn);
		productConfigPage.childProdDropdown.click();
		slf4jLogger.info("Clicked on add child products Dropdown....");
		int n = productConfigPage.childProductsInternet.length;
		String childProds[] = new String[n];
		if(product.equals("Internet")) {
			for(int i=2;i<n+2;i++) {
				String childProd = driver.findElement(By.xpath("/html/body/div[110]/div/div[3]/ul/li["+i+"]")).getText();
				childProds[i-2] = childProd;
		}
			if(!(Arrays.equals(childProds, productConfigPage.childProductsInternet))) {
				Assert.fail(testID + ": @" + System.currentTimeMillis() + "@"
						+ "Error occured while verifying Child products Dropdown list");
			}
			slf4jLogger.info(System.currentTimeMillis() + "@" + "Verified add child products Dropdown....");
		}
		
	} catch (Exception e) {
		Assert.fail(testID + ": @" + System.currentTimeMillis() + "@"
					+ "Error occured while verifying Child products Dropdown list");
		
	}
	
}

@Step
public void addChildChargesinSM(String testID, String childProductsList, String attributesList) throws Exception {
	WebDriver driver = getDriver();
	try {
		ExpectedConditions.elementToBeClickable(productConfigPage.addChildBtn);
		productConfigPage.childProdDropdown.click();
		slf4jLogger.info("Clicked on add child products Dropdown....");
		Thread.sleep(6000);
		String[] childProducts =  childProductsList.split(";");
		for(int i=0;i<childProducts.length;i++) {
			String ChildCharge = childProducts[i];
			try {
				driver.findElement(By.xpath("//ul[@aria-hidden='false']/li[(text()='" + ChildCharge + "')]")).click();
				WaitForPageToLoad(5000);
				Thread.sleep(6000);
			} catch (Exception e) {
				WaitForPageToLoad(5000);
		        Thread.sleep(5000);
				List<WebElement> ChilCharges = driver.findElements(By.xpath("//li[(text()='" + ChildCharge + "')]"));
				WaitForPageToLoad(5000);
		        Thread.sleep(5000);
				ChilCharges.get(ChilCharges.size() - 1).click();
				WaitForPageToLoad(5000);
		        Thread.sleep(5000);
			}
			try{
				productConfigPage.addChildBtn.click();
				WaitForPageToLoad(5000);
		        Thread.sleep(5000);
				}catch (Exception e) {
					driver.findElement(By.xpath("/html/body/div[4]/div[2]/div[3]/div[4]/div[2]/div/div/div[2]/table/tbody/tr[1]/td[2]/div/button[2]")).click();
					WaitForPageToLoad(5000);
			        Thread.sleep(5000);
				}
	        
	        if(ChildCharge.equals("Telecom Service Priority (TSP)")) {
	        	WaitForPageToLoad(5000);
		        Thread.sleep(5000);
	        }
	        Map<String, String> configKeyValuePair = new HashMap<String, String>();
        	configKeyValuePair = createConfigKeyValuePair(attributesList);
        	if(testID.equals("1910")||testID.equals("2011")||testID.equals("2035")||testID.equals("1969")||testID.equals("1970") || testID.equals("1948")||testID.equals("1972")||testID.equals("1973")){
	        	
	        	Thread.sleep(5000);
	        	if(ChildCharge.equals("AC Power")) {
	        		WebElement prod = driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr[1]/td[2]/div/span/span/span[1]"));
					ExpectedConditions.elementToBeClickable(prod);
					prod.click();
					Thread.sleep(2000);
	        		List<WebElement> options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Primary_Power")+"']"));
					options.get(options.size() - 1).click();
					WaitForPageToLoad(5000);
			        Thread.sleep(5000);
		        }}else if (testID.equals("1914")){
		        	Thread.sleep(5000);
		        	if(ChildCharge.equals("Level 3 - Additional 2FA Tokens")) {
		        		WebElement prod = driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[2]/td[2]/div/span/span"));
		        		
						ExpectedConditions.elementToBeClickable(prod);
						prod.click();
						Thread.sleep(2000);
						try{	        		
						List<WebElement> options = driver.findElements(By.xpath("/html/body/div[95]/div/div[2]/ul/li"));
						options.get(2).click();
						
						prod.click();
						driver.findElement(By.xpath("/html/body/div[95]/div/div[2]/ul/li[3]")).click();
						Thread.sleep(5000);
						}
						catch (Exception e) {
							slf4jLogger.info(e.getMessage());
						}
						
						WaitForPageToLoad(5000);
				        Thread.sleep(5000);
			        }
	        }else if(testID.equals("2010")){
	        	if(ChildCharge.equals("Suite Rack")) {
	        		WebElement prod = driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr[2]/td[2]/div/span/span/span[1]"));
					ExpectedConditions.elementToBeClickable(prod);
					prod.click();
					Thread.sleep(2000);
	        		List<WebElement> options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Rack_Type")+"']"));
					options.get(options.size() - 1).click();
					WaitForPageToLoad(5000);
			        Thread.sleep(5000);
		        }
	        } 
	        else if(testID.equals("2033")){
	        	if(ChildCharge.equals("Additional Directory Listing")) {
	        		WebElement prod = driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr[1]/td[2]/div/span/span/span[1]"));
					ExpectedConditions.elementToBeClickable(prod);
					prod.click();
					Thread.sleep(2000);
	        		List<WebElement> options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Listing")+"']"));
					options.get(options.size() - 1).click();
					WaitForPageToLoad(5000);
			        Thread.sleep(5000);
			        productConfigPage.grandChildQuickSaveBtn.click();
	        		WaitForPageToLoad(5000);
	        		Thread.sleep(5000);
	        		break;
		        }
	        } 
        	if(testID.equals("2011")){
        		productConfigPage.grandChildQuickSaveBtn.click();
        		WaitForPageToLoad(5000);
        		Thread.sleep(5000);
        		break;
	        }
	        
	        productConfigPage.nextbtn1.click();
	        WaitForPageToLoad(5000);
	        Thread.sleep(5000);
		}
		
		
	} catch (Exception e) {
		Assert.fail(testID + ": @" + System.currentTimeMillis() + "@"
					+ "Error occured while verifying Child products Dropdown list");
		
	}
	
}

@Step
public void addGrandChildChargesinSM(String testID, String grandChildProductsList, String attributesList) throws Exception {
	WebDriver driver = getDriver();
	try {
		ExpectedConditions.elementToBeClickable(productConfigPage.addgrandChildBtn);
		productConfigPage.grandChildProdDropdown.click();
		slf4jLogger.info("Clicked on add grand child products Dropdown....");
		String[] grandChildProducts =  grandChildProductsList.split(";");
		for(int i=0;i<grandChildProducts.length;i++) {
			String grandChildCharge = grandChildProducts[i];
			try {
				driver.findElement(By.xpath("//ul[@aria-hidden='false']/li[(text()='" + grandChildCharge + "')]")).click();
				WaitForPageToLoad(5000);
		        Thread.sleep(6000);
			} catch (Exception e) {
				WaitForPageToLoad(5000);
		        Thread.sleep(5000);
				List<WebElement> ChilCharges = driver.findElements(By.xpath("//li[(text()='" + grandChildCharge + "')]"));
				WaitForPageToLoad(5000);
		        Thread.sleep(5000);
				ChilCharges.get(ChilCharges.size() - 1).click();
				WaitForPageToLoad(5000);
		        Thread.sleep(5000);
			}
			try{
			productConfigPage.addgrandChildBtn.click();
			WaitForPageToLoad(5000);
	        Thread.sleep(5000);
			}catch (Exception e) {
				driver.findElement(By.xpath("/html/body/div[4]/div[2]/div[3]/div[4]/div[2]/div/div/div[2]/table/tbody/tr[2]/td[2]/div/button[2]")).click();
				WaitForPageToLoad(5000);
		        Thread.sleep(5000);
			}
			Map<String, String> configKeyValuePair = new HashMap<String, String>();
        	configKeyValuePair = createConfigKeyValuePair(attributesList);
			if(grandChildCharge.equals("AC Power")) {
        		WebElement prod = driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr[1]/td[2]/div/span/span/span[1]"));
				ExpectedConditions.elementToBeClickable(prod);
				prod.click();
				Thread.sleep(2000);
        		List<WebElement> options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Primary_Power")+"']"));
				options.get(options.size() - 1).click();
				WaitForPageToLoad(5000);
		        Thread.sleep(5000);
	        }
		
	        if(testID.equals("1910")||testID.equals("2035")||testID.equals("1969") || testID.equals("1948")||testID.equals("1970")||testID.equals("1972")||testID.equals("1973")){
	        	productConfigPage.grandChildQuickSaveBtn.click();
	        	 WaitForPageToLoad(5000);
	 	        Thread.sleep(5000);
	        }
	        else{
	        productConfigPage.nextbtn1.click();
	        WaitForPageToLoad(5000);
	        Thread.sleep(5000);
	        }
		}
	}catch (Exception e) {
		Assert.fail(testID + ": @" + System.currentTimeMillis() + "@"
					+ "Error occured while verifying grand Child products Dropdown list");
		
	}
	
}
		
		@Step
		public void verifyClonePackageLocations(String testID) throws Exception{
		try {
			WebDriver driver = getDriver();
		productConfigPage.nextbtn1.click();
		WaitForPageToLoad(5000);
        Thread.sleep(5000);
        if(productConfigPage.removeBtn.isCurrentlyEnabled()) {
        	Assert.fail("Error : Remove Location Bt is enabled..!!");
        }
        slf4jLogger.info(testID + ": @" + System.currentTimeMillis() + "@"
				+ "Remove Location Btn is disabled..");
        
        productConfigPage.checkBoxes.get(productConfigPage.checkBoxes.size()-1).click();
        WaitForPageToLoad(5000);
        Thread.sleep(5000);
        
        if(!productConfigPage.removeBtn.isCurrentlyEnabled()) {
        	Assert.fail("Error : Remove Location Bt is disabled..!!");
        }
        slf4jLogger.info(testID + ": @" + System.currentTimeMillis() + "@"
				+ "Remove Location Btn is enabled....");
		} catch (Exception e) {
		
		Assert.fail("Error while verifying clone location function in Product Review page..");
		}
}

		@Step
		public void verifyStatusInPackageDetailsPage(String testID, String validationText) throws Exception{
			WebDriver driver = getDriver();
		Map<String, String> configKeyValuePair = new HashMap<String, String>();
		configKeyValuePair = createConfigKeyValuePair(validationText);
		int count=0;
		try {
			slf4jLogger.info(testID + ": @" + System.currentTimeMillis() + "@"
					+ "Clicking on Next Button.");
		try{
			productConfigPage.nextbtn1.click();
		}catch (Exception e) {
			driver.findElement(By.xpath("//*[@id=\"ProductPackageWizardView\"]/div[1]/div[4]/div[2]/button")).click();
		}
		WaitForPageToLoad(5000);
        Thread.sleep(5000);
        WebElement pkgStatus = driver.findElement(By.xpath("//*[@id=\"ProductGrid\"]/div[2]/table/tbody/tr[1]/td[1]/div/div[1]/span[1]/span/span"));
        pkgStatus.click();
       Thread.sleep(2000);
		List<WebElement> Pkgstatus_tooltips = driver.findElements(By.className("tooltip-table-data"));
		for(int i=0;i<Pkgstatus_tooltips.size();i++) {
			slf4jLogger.info(Pkgstatus_tooltips.get(0).getText());
			if((Pkgstatus_tooltips.get(i).getText().contains(configKeyValuePair.get("ErrorMessage")))) {
				break;
			}
			else {
				count=i;
				if(count==Pkgstatus_tooltips.size()-1) {
					Assert.fail("Error while verifying the tool tip of Invalid status...!");
					}
			}
		}
		 slf4jLogger.info(testID + ": @" + System.currentTimeMillis() + "@"
				+ "Verified tooltip message of invalid status in PKG Details page..");
        
		} catch (Exception e) {
		
		Assert.fail("Error while verifying clone location function in Product Review page..");
		}
}
		
		@Step
		public void verifyApprovalStatusInPackageDetailsPage(String testID, String validationText) throws Exception{
			WebDriver driver = getDriver();
		try {
		productConfigPage.nextbtn1.click();
		WaitForPageToLoad(10000);
        Thread.sleep(10000);
        try{
    		ExpectedConditions.elementToBeClickable(productConfigPage.nextbtn2);
    		productConfigPage.nextbtn2.click();
    	}catch (Exception e) {
    		driver.findElement(By.xpath("//*[@id='ProductPackageWizardView']/div[1]/div[5]/div[2]/div[3]/button")).click();
    	}
        WebElement approvalStatus = driver.findElement(By.xpath("//*[@id=\"package-summary-grid\"]/div[2]/table/tbody/tr/td[5]/span[1]"));
        if(!(approvalStatus.getText().contains("Pricing ICB"))) {
        	Assert.fail("Error while verifying approval status in Product Review page..");
        }
        slf4jLogger.info( ": @" + System.currentTimeMillis() + "@" + "Verified approval status in Product review page...");
		
		} catch (Exception e) {
		
		Assert.fail("Error while verifying clone location function in Product Review page..");
		}
}
		
		@Step
		public void verifyZaccessCantBeCloned() throws Exception{
			WebDriver driver = getDriver();
		try {
			slf4jLogger.info( ": @" + System.currentTimeMillis() + "@" + "Checking clone option is enabled...");
			List<WebElement> cloneBtns = driver.findElements(By.xpath("//button[text()='Clone']"));
			if(cloneBtns.size()==0){
				slf4jLogger.info( ": @" + System.currentTimeMillis() + "@"
						+ "Verified:  clone option is not enabled...");
			}
			else {
				List<WebElement> rows = driver.findElements(By.xpath("//*[@id=\"ProductGrid\"]/div[2]/table/tbody/tr[3]/td[1]/div"));
				for(int i=1;i<=rows.size();i++) {
					if(driver.findElement(By.xpath("//*[@id='ProductGrid']/div[2]/table/tbody/tr["+i+"]/td[1]/div")).getText().contains("Z-Side Access")) {
						if(driver.findElement(By.xpath("//*[@id=\"ProductGrid\"]/div[2]/table/tbody/tr["+i+"]/td[2]/div/button[1]")).isDisplayed()){
							Assert.fail("Error while verifying clone buttons in Product Review page..");
						}
					}
				}
			}
		try{
			driver.findElement(By.xpath("//*[@id=\"ProductPackageWizardView\"]/div[1]/div[5]/div[2]/div[3]/button")).click();
			}catch (Exception e) {
				productConfigPage.nextbtn1.click();
				
			}
		WaitForPageToLoad(5000);
        Thread.sleep(5000);
        } catch (Exception e) {
		
		Assert.fail("Error while verifying clone buttons in Product Review page..");
		}
}

		@Step
public void selectAttributesHSIPBA(String testID, String attributeList) throws InterruptedException {

	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	WebDriver driver = getDriver();
	try {
		
		configKeyValuePair = createConfigKeyValuePair(attributeList);
		ExpectedConditions.elementToBeClickable(productConfigPage.clearSelections);
	    productConfigPage.clearSelections.click();
		Thread.sleep(6000);
		for(int i=1;i<=productConfigPage.smCoreProdFields.size();i++) {
			WebElement prodField = null;
			try{
				if(i==2){
					i=6;
					prodField = driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/span/input[2]"));					
					}else if(i==7){
						i=8;
						 prodField = driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/span/input[2]"));					
					}else
				{
				 prodField = driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/input"));
				}
			}catch (Exception e) {
				
					slf4jLogger.info("Selected.Attributes..!");
					break;
								
			}
			String prodID = prodField.getAttribute("id");
			WebElement  prod = null;
			if(i!=1){
				  try{
					  prod = driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/span/input[1]"));
				  }catch (Exception e) {
					break;
				}
			}else{
			  prod = driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/input"));}
			 ExpectedConditions.elementToBeClickable(prod);
			
			if(prodID.equals("Billing_Arrangement_Name")) {
				prod.click();
				productConfigPage.billingArrangementNameID.sendKeys(configKeyValuePair.get("Billing_Arrangement_Name"));
				WaitForPageToLoad(5000);
		        Thread.sleep(6000);
		        slf4jLogger.info("Selected.Billing_Arrangement_Name..!");
		        driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr[1]/td[1]/label")).click();
		        Thread.sleep(6000);
				
				
			}
			else if(!testID.equals("1993")) {
	        if(prodID.equals("CDR")) {
	    	   if(configKeyValuePair.get("CDR")!=null) {
	    		   slf4jLogger.info("Selecting CDR..!");
	    	   try{
	    		   for(int j =0;j<Integer.parseInt(configKeyValuePair.get("CDR"));j++){
		   	    	    driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr[6]/td[2]/div/span/span/span[2]/span[1]/span")).click();
		   	    	    Thread.sleep(1000);
		   	    	    }   
	    	   }catch (Exception e) {
	    		   WebElement  CDRinput = driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr[6]/td[2]/div/span/span/input[1]"));
		    		  JavascriptExecutor jse = (JavascriptExecutor)driver;
		    		  jse.executeScript("arguments[0].value='" + configKeyValuePair.get("CDR") + "';", CDRinput);
		    		
			}
	    	   WaitForPageToLoad(6020);
	    	   driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr[1]/td[1]/label")).click();
		        
	    	   Thread.sleep(5000);
		        slf4jLogger.info("Selected.CDR..!");
				
	    	   }
			}
	       else if(prodID.equals("Ramp_Month_Input")) {
	    	   slf4jLogger.info("Selecting Ramp_Month_Input..!");
	    	   if(configKeyValuePair.get("Ramp_Month_Input")!=null) {
	    	   for(int j =0;j<3;j++){
	    	    driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr[8]/td[2]/div/span/span/span[2]/span[1]/span")).click();
	    	    Thread.sleep(2000);
	    	   }
	    	   driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr[8]/td[1]")).click();
		        WaitForPageToLoad(3000);
		        driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr[1]/td[1]/label")).click();
		        
		        Thread.sleep(8000);
		        slf4jLogger.info("Selected.Ramp_Month_Input..!");
			  break;
	    	   }
			}
			}}
		driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr[1]/td[1]/label")).click();
		Thread.sleep(5000);
		slf4jLogger.info(testID + ":" + System.currentTimeMillis()
				+ "299: Selecting Product Attributes Completed : HSIP BA");

	}
	catch (Exception e) {
		Assert.fail(System.currentTimeMillis() + "@"
				+ "Error occured while configuring HSIP BA product");
	}
		
}

@Step
public void selectAttributesHSIPXConnect(String testID, String attributesList) throws InterruptedException {
	WebDriver driver = getDriver();
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	
	try {
		
		configKeyValuePair = createConfigKeyValuePair(attributesList);
		ExpectedConditions.elementToBeClickable(productConfigPage.clearSelections);
	    productConfigPage.clearSelections.click();
		Thread.sleep(5000);
		slf4jLogger.info("Size:" +productConfigPage.smCoreProdFields.size());
		for(int i=1;i<=productConfigPage.smCoreProdFields.size();i++) {
			slf4jLogger.info("value of i "+i);
			WebElement prodField = null;
			try{
				if(i!=9 && i!=10)										
				 prodField = driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/input"));
				else
					prodField = driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/span/input[2]"));
				
			}catch (Exception e) {
				slf4jLogger.info("Selected.Attributes..!");
				break;
			}
			
			String prodID = prodField.getAttribute("id");
			
			String datarole=prodField.getAttribute("data-role");
			if (datarole.equals("dropdownlist"))
				prod = driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/span/span[1]"));
			else if (datarole.equals("autocomplete"))
				prod = driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span"));
			ExpectedConditions.elementToBeClickable(prod);
			
			
			if(prodID.equals("Level_3_Bandwidth")) {
				prod.click();
				List<WebElement> Bandwidth = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Bandwidth")+"']"));
				Thread.sleep(1000);
				Bandwidth.get(Bandwidth.size() - 1).click();
		        WaitForPageToLoad(5000);
		        Thread.sleep(5000);
				
			}
			if(prodID.equals("FVR_ID")) {
				productConfigPage.fvrid.click();
				productConfigPage.fvrid.sendKeys(configKeyValuePair.get("FVR_ID"));
				WaitForPageToLoad(5000);
		        Thread.sleep(5000);
		        productConfigPage.fvridLabel.click();
		        Thread.sleep(5000);
				
			}
			
			
			}
		slf4jLogger.info(testID + ":" + System.currentTimeMillis()
				+ "299: Selecting Product Attributes Completed : HSIP Cross connect");

	}
	catch (Exception e) {
		Assert.fail(System.currentTimeMillis() + "@"
				+ "Error occured while configuring HSIP Cross connect product");
	}
		
}


@Step
public void selectAttributesHSIPEPL(String testID, String attributesList) throws InterruptedException {
	WebDriver driver = getDriver();
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	
	try {
		
		configKeyValuePair = createConfigKeyValuePair(attributesList);
		ExpectedConditions.elementToBeClickable(productConfigPage.clearSelections);
	    productConfigPage.clearSelections.click();
		Thread.sleep(5000);
		for(int i=1;i<=productConfigPage.smCoreProdFields.size();i++) {
			WebElement prodField = null;
			try{
				 prodField = driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/input"));
			}catch (Exception e) {
					slf4jLogger.info("Selected.Attributes..!");
					break;
			}
			String prodID = prodField.getAttribute("id");
			WebElement  prod = null;
			
			prod = driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span"));
			ExpectedConditions.elementToBeClickable(prod);
			
			if(prodID.equals("Level_3_Interface")) {
				prod.click();
				driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr[1]/td[2]/div/span")).sendKeys(configKeyValuePair.get("Bandwidth"));
				
				Thread.sleep(1000);
				
				WaitForPageToLoad(5000);
		        Thread.sleep(1000);
		        i=10;
				
			}
			
	       else if(prodID.equals("A_Loc_Inside_Wiring")) {
				
				slf4jLogger.info("Select ALocInsideWiring ..");
				Thread.sleep(2000);
				driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[11]/td[2]/div/span")).sendKeys("Standard Delivery - To the MPoE (Customer Provided)");
				
		        slf4jLogger.info("Selected ALocInsideWiring..");
		        WaitForPageToLoad(5000);
		        Thread.sleep(5000);
		        
				
			}
	      		
			}
		slf4jLogger.info(testID + ":" + System.currentTimeMillis()
				+ "299: Selecting Product Attributes Completed : HSIP EPL");

	}
	catch (Exception e) {
		Assert.fail(System.currentTimeMillis() + "@"
				+ "Error occured while configuring HSIP EPL product");
	}
		
}

@Step
public void selectAttributesHSIPPrivateLine(String testID, String attributesList) throws InterruptedException {
	WebDriver driver = getDriver();
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	
	try {
		configKeyValuePair = createConfigKeyValuePair(attributesList);
		ExpectedConditions.elementToBeClickable(productConfigPage.clearSelections);
	    productConfigPage.clearSelections.click();
		Thread.sleep(6000);
		if(configKeyValuePair.get("ALocInsideWiring")!=null) {
			driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[10]/td[2]/div/span/span")).click();
			List<WebElement> options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("ALocInsideWiring")+"']"));
			options.get(options.size() - 1).click();
	        WaitForPageToLoad(6000);
	        Thread.sleep(10000);
		}
		if(configKeyValuePair.get("Bandwidth")!=null) {
			driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr[1]/td[2]/div/span/span")).click();
			List<WebElement> options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Bandwidth")+"']"));
			options.get(options.size() - 1).click();
	        WaitForPageToLoad(6000);
	        Thread.sleep(10000);
		}
		
		
		slf4jLogger.info(testID + ":" + System.currentTimeMillis()
				+ "299: Selecting Product Attributes Completed : HSIP_PrivateLine");

	}
	catch (Exception e) {
		Assert.fail(System.currentTimeMillis() + "@"
				+ "Error occured while configuring HSIP_PrivateLine product");
	}
	
	
}

@Step
public void selectAttributesHSIPWavelength(String testID, String attributesList) throws Exception {
	WebDriver driver = getDriver();
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	
	try {
		configKeyValuePair = createConfigKeyValuePair(attributesList);
		ExpectedConditions.elementToBeClickable(productConfigPage.clearSelections);
	    productConfigPage.clearSelections.click();
		Thread.sleep(6000);
		if(configKeyValuePair.get("ALocInsideWiring")!=null) {
			driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[10]/td[2]/div/span/span")).click();
			List<WebElement> options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("ALocInsideWiring")+"']"));
			options.get(options.size() - 1).click();
	        WaitForPageToLoad(6000);
	        Thread.sleep(10000);
		}
		slf4jLogger.info(testID + ":" + System.currentTimeMillis()
				+ "299: Selecting Product Attributes Completed : HSIP_Wavelength");

	}
	catch (Exception e) {
		Assert.fail(System.currentTimeMillis() + "@"
				+ "Error occured while configuring HSIP_Wavelength product");
	}
	
	
}


@Step
public void selectAttributesEthernetPrivateLine(String testID, String attributesList) throws Exception {
	WebDriver driver = getDriver();
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	configKeyValuePair = createConfigKeyValuePair(attributesList);
	slf4jLogger.info("Size:" +configKeyValuePair.size());
	slf4jLogger.info("Inside EPL attributes..!");
	int count =0;
	try {
		ExpectedConditions.elementToBeClickable(productConfigPage.clearSelections);
	    productConfigPage.clearSelections.click();
		Thread.sleep(5000);
		for(int i=1;i<=productConfigPage.smCoreProdFields.size();i++) {

				WebElement prodField = null;
				try{
					 prodField = driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/input"));
					
				}catch (Exception e) {
					slf4jLogger.info("Selecting Attributes..!");
					break;
				}
				String prodID = prodField.getAttribute("id");
				WebElement prod = driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/span/span[1]"));
				ExpectedConditions.elementToBeClickable(prod);
				if(prodID.equals("A_Loc_Inside_Wiring")) {
						prod.click();
						List<WebElement> options = driver.findElements(By.xpath("//li[text()='" +configKeyValuePair.get("ALocInsideWiring")+"']"));
						for(int j=0;j<options.size();j++) {
							if(options.get(j).getText().equals(configKeyValuePair.get("ALocInsideWiring"))) {
								options.get(j).click();
								count++;
								break;
							}
						}
						WaitForPageToLoad(6000);
				        Thread.sleep(3000);
				        
						}
					
			       else if(prodID.equals("Z_Loc_Inside_Wiring")) {
						prod.click();
						List<WebElement> options = driver.findElements(By.xpath("//li[text()='" +configKeyValuePair.get("ZLocInsideWiring")+"']"));
						for(int j=0;j<options.size();j++) {
							if(options.get(j).getText().equals(configKeyValuePair.get("ZLocInsideWiring"))) {
								options.get(j).click();
								count++;
								break;
							}
						}
						WaitForPageToLoad(6000);
				        Thread.sleep(3000);
						}
				
				if(count==configKeyValuePair.size())break;
	}
		slf4jLogger.info(testID + ":" + System.currentTimeMillis()
				+ "299: Selecting Product Attributes Completed : EPL product");

	}
	catch (Exception e) {
		Assert.fail(System.currentTimeMillis() + "@"
				+ "Error occured while configuring EPL product");
	}
	
	
}


@Step
public void verifyAttributesUNIandsave(String testID)  throws Exception{
	WebDriver driver = getDriver();
	try {
		Thread.sleep(10000);
		if(testID.equals("1936")) {
			
			productConfigPage.nextbtn1.click();
			Thread.sleep(10000);
			productConfigPage.nextbutton2.click();
			Thread.sleep(10000);
			String package_no=productConfigPage.numberofunipackagesinreviewpage.getText();
			slf4jLogger.info("Number of packages in review page "+package_no);
			if(!package_no.equals("2"))
				Assert.fail("error in number of packages created");
			
			try {
				
			if(!productConfigPage.primarypackagecheckbox.isDisplayed())
				Assert.fail("primary package checkbox is not displayed");
			}
			catch(Exception e)
			{
				slf4jLogger.info("checkbox is disabled");
			}
			slf4jLogger.info("checkbox present "+productConfigPage.primarypackagecheckbox.isVisible());
			
			productConfigPage.saveproductbutton.click();
			Thread.sleep(5000);
			
		}
	}
	catch(Exception e)
	{
		slf4jLogger.info("UNI verifiction failed..");
		Assert.fail(e.getMessage());
	}
}

@Step
public void verifyLocalLoop(String testID)  throws Exception{
	try {
		WebDriver driver = getDriver();
		Thread.sleep(10000);
		if(testID.equals("1936")) {
			
			productConfigPage.nextbtn1.click();
			Thread.sleep(10000);
			productConfigPage.nextbutton2.click();
			Thread.sleep(10000);
			String package_no=productConfigPage.numberofunipackagesinreviewpage.getText();
			slf4jLogger.info("Number of packages in review page "+package_no);
			if(!package_no.equals("2"))
				Assert.fail("error in number of packages created");
			
			try {
				
			if(!productConfigPage.primarypackagecheckbox.isDisplayed())
				Assert.fail("primary package checkbox is not displayed");
			}
			catch(Exception e)
			{
				slf4jLogger.info("checkbox is disabled");
			}
			slf4jLogger.info("checkbox present "+productConfigPage.primarypackagecheckbox.isVisible());
			
			productConfigPage.saveproductbutton.click();
			Thread.sleep(5000);
			
		}
	}
	catch(Exception e)
	{
		slf4jLogger.info("UNI verifiction failed..");
		Assert.fail(e.getMessage());
	}
}

@Step
public void verifyAttributes(String testID, String attributesList)  throws Exception{
	try {
		Map<String, String> configKeyValuePair = new HashMap<String, String>();
		configKeyValuePair = createConfigKeyValuePair(attributesList);
		WebDriver driver = getDriver();
		Thread.sleep(10000);
		if(testID.equals("1952")) {
			if (!productConfigPage.networkStatus.getText().equals("On Net")) {
				Assert.fail(
						testID + ": @" +System.currentTimeMillis() + "@" + "Error in Network Status");
			}
			slf4jLogger.info(testID + ": @" + System.currentTimeMillis() + "@"
					+ "Network status is validated succesfully........");	
		}
		else if(testID.equals("1953")) {
			if (!productConfigPage.evcType.getText().equals(configKeyValuePair.get("EVC_Type"))) {
				Assert.fail(
						testID + ": @" +System.currentTimeMillis() + "@" + "Error in Network Status");
			}
			if (!productConfigPage.evcbandwidthXpath.getText().equals(configKeyValuePair.get("Bandwidth"))) {
				Assert.fail(
						testID + ": @" +System.currentTimeMillis() + "@" + "Error in Network Status");
			}
			if (!productConfigPage.evcclassXpath.getText().equals(configKeyValuePair.get("EVC_Class"))) {
				Assert.fail(
						testID + ": @" +System.currentTimeMillis() + "@" + "Error in Network Status");
			}
			slf4jLogger.info(testID + ": @" + System.currentTimeMillis() + "@"
					+ "Attributes are validated succesfully........");
		}
	}
	catch(Exception e)
	{
		slf4jLogger.info("UNI verifiction failed..");
		Assert.fail(e.getMessage());
	}
}
/**
 * method to verify cloned product attributes
 * 
 * @param driver
 * @return
 * @throws Exception
 */
@Step
public void verifyClonedProductAttributes(String testID, String attributesList) throws Exception {
	WebDriver driver = getDriver();
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	configKeyValuePair = createConfigKeyValuePair(attributesList);
	try {
		slf4jLogger.info(testID + ":" +System.currentTimeMillis()
				+ "Entering verifyClonedProductAttributes Method");
		Thread.sleep(10000);
		String EVCType = driver
				.findElement(By
						.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr[6]/td[2]/div/span/span/span[1]"))
				.getText();
		slf4jLogger.info(testID + ":" +System.currentTimeMillis() + "EVCType: " + EVCType);
		String Bandwidth = driver
				.findElement(By
						.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr[7]/td[2]/div/span/span/span[1]"))
				.getText();
		slf4jLogger.info(testID + ":" +System.currentTimeMillis() + "Bandwidth: " + Bandwidth);
		String productClass = driver
				.findElement(By
						.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr[8]/td[2]/div/span/span/span[1]"))
				.getText();
		slf4jLogger.info(testID + ":" +System.currentTimeMillis() + "productClass" + productClass);
		String protection = driver
				.findElement(By
						.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr[9]/td[2]/div/span/span/span[1]"))
				.getText();
		slf4jLogger.info(testID + ":" +System.currentTimeMillis() + "protection: " + protection);

		
			if (!((EVCType.equalsIgnoreCase(configKeyValuePair.get("EVCTypeSM")))
					&& (Bandwidth.equalsIgnoreCase(configKeyValuePair.get("BandwidthSM")))
					&& (productClass.equalsIgnoreCase(configKeyValuePair.get("ClassSM")))
					&& (protection.equalsIgnoreCase(configKeyValuePair.get("ProtectionSM")))

			)) {
				Assert.fail(testID + ": @" +System.currentTimeMillis() + "@"
						+ "Error in verifying cloned product attributes");
			}
		
		slf4jLogger.info(testID + ":" +System.currentTimeMillis() + "Verified cloned product attributes");
	} catch (Exception e) {
		slf4jLogger.info(testID + ":" +System.currentTimeMillis() + "600: Exception in verified Clone Att");
		Assert.fail(testID + ": @" +System.currentTimeMillis() + "@"
				+ "Error while verifying cloned product attributes");
	}
}


@Step
public ProductConfigSteps selectAttributesPrivateLine(String testID, String attributeList) throws InterruptedException {
	WebDriver driver = getDriver();
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	JavascriptExecutor js = (JavascriptExecutor) driver;
	
	try {
		configKeyValuePair = createConfigKeyValuePair(attributeList);
		WaitForPageToLoad(10000);
		ExpectedConditions.elementToBeClickable(productConfigPage.address1);
		ExpectedConditions.elementToBeClickable(productConfigPage.address2);
		if(productConfigPage.address1.isPresent()&& productConfigPage.address2.isPresent()){
			Thread.sleep(1000);
			productConfigPage.address1.click();
			slf4jLogger.info(productConfigPage.address1List.get(2).getText());
			productConfigPage.address1List.get(2).click();
			Thread.sleep(2000);
			productConfigPage.address2.click();
		
			List<WebElement> address2=driver.findElements(By.xpath("/html/body/div[34]/div/div[2]/ul/li"));
			Thread.sleep(2000);
			slf4jLogger.info(address2.get(1).getText());
			address2.get(1).click();
			slf4jLogger.info("Successfully selected z address manually..!");
			Thread.sleep(10000);
		}
		if(testID.equals("1984")&&productConfigPage.promotion.isEnabled()){
			Thread.sleep(1000);
			productConfigPage.promotion.click();
			Thread.sleep(1000);
			productConfigPage.promotionList.get(2).click();
			Thread.sleep(1000);
		}
		
		
		ExpectedConditions.elementToBeClickable(productConfigPage.clearSelections);
	    productConfigPage.clearSelections.click();
		Thread.sleep(5000);
		
		if(configKeyValuePair.get("Bandwidth")!=null) {
			productConfigPage.hsipserviceBandwidth.click();
			WaitForPageToLoad(5000);
			Thread.sleep(1000);
			List<WebElement> Bandwidth =driver.findElements(By.xpath("//li[text()='" + configKeyValuePair.get("Bandwidth") + "']"));
			Bandwidth.get(Bandwidth.size() - 1).click();
			WaitForPageToLoad(5000);
			Thread.sleep(5000);
			
			slf4jLogger.info("Selected bandwidth ..");
			
		}	
		if(configKeyValuePair.get("A_SideAccessService")!=null) {
			ExpectedConditions.elementToBeClickable(productConfigPage.privateLineASideAccessService);
			productConfigPage.privateLineASideAccessService.click();
			WaitForPageToLoad(5000);
			Thread.sleep(1000);
			productConfigPage.privateLineASideAccessService.sendKeys(configKeyValuePair.get("A_SideAccessService"));
			slf4jLogger.info("Selected A_SideAccessService ..");
			Thread.sleep(5000);
		}
		if(configKeyValuePair.get("Z_SideAccessService")!=null) {
			ExpectedConditions.elementToBeClickable(productConfigPage.privateLineZSideAccessService);
			productConfigPage.privateLineZSideAccessService.click();
			WaitForPageToLoad(5000);
			Thread.sleep(1000);
			productConfigPage.privateLineZSideAccessService.sendKeys(configKeyValuePair.get("Z_SideAccessService"));
			slf4jLogger.info("Selected Z_SideAccessService ..");
			Thread.sleep(5000);
		}
		if(configKeyValuePair.get("A_Loc_Inside_Wiring")!=null) {
			ExpectedConditions.elementToBeClickable(productConfigPage.aLocInsideWiringlistbox);
			productConfigPage.aLocInsideWiringlistbox.click();
			WaitForPageToLoad(5000);
			Thread.sleep(1000);
			productConfigPage.aLocInsideWiringlistbox.sendKeys(configKeyValuePair.get("A_Loc_Inside_Wiring"));
			slf4jLogger.info("Selected ALocInsideWiring ..");
			Thread.sleep(5000);
		}
	
	    if(configKeyValuePair.get("Z_Loc_Inside_Wiring")!=null) {
	    	ExpectedConditions.elementToBeClickable(productConfigPage.zLocInsideWiringlistbox);
	    	productConfigPage.zLocInsideWiringlistbox.click();
			WaitForPageToLoad(5000);
			Thread.sleep(1000);
	    	productConfigPage.zLocInsideWiringlistbox.sendKeys(configKeyValuePair.get("Z_Loc_Inside_Wiring"));
			slf4jLogger.info("Selected ZLocInsideWiring ..");
			Thread.sleep(5000);
		}
	    
	    if(configKeyValuePair.get("edit_ASide_level3Acess")!=null) {
	    	slf4jLogger.info("Click on Next Button");
			Thread.sleep(1000);
			js.executeScript("window.scrollBy(0,300)", "");
	    	ExpectedConditions.elementToBeClickable(productConfigPage.nextbtn1);
	    	productConfigPage.nextbtn1.click();
	    	WaitForPageToLoad(10000);
			Thread.sleep(5000);
			js.executeScript("window.scrollBy(0,250)", "");
			ExpectedConditions.elementToBeClickable(productConfigPage.privateLineASideAccess);
			productConfigPage.privateLineASideAccess.click();
			slf4jLogger.info("Switched to Private Line A Side Access");
			WaitForPageToLoad(10000);
			Thread.sleep(1000);
			
			if(configKeyValuePair.get("ASide_SolutionID")!=null) {
				ExpectedConditions.elementToBeClickable(productConfigPage.privateLineSolutionID);
				Select select = new Select(productConfigPage.privateLineSolutionID); 
				select.selectByIndex(0);
				
				WaitForPageToLoad(10000);
				Thread.sleep(1000);
	
		    	productConfigPage.privateLineSolutionID.click();
				WaitForPageToLoad(5000);
				Thread.sleep(1000);
				
				productConfigPage.privateLineSolutionID.sendKeys(configKeyValuePair.get("ASide_SolutionID"));
				WaitForPageToLoad(10000);
				Thread.sleep(1000);
				slf4jLogger.info("selected ASide_SolutionID");
			}
			
			if(configKeyValuePair.get("ROC_Instructions")!=null) {
				ExpectedConditions.elementToBeClickable(productConfigPage.smROCInstruction);
				productConfigPage.smROCInstruction.sendKeys(configKeyValuePair.get("ROC_Instructions"));
				WaitForPageToLoad(10000);
				Thread.sleep(1000);
				slf4jLogger.info("selected ROC Instruction");
			}
			
			if(configKeyValuePair.get("ASide_AccessDiversity")!=null) {
            	ExpectedConditions.elementToBeClickable(productConfigPage.accessDiversity);
            	productConfigPage.accessDiversity.click();
            	WaitForPageToLoad(5000);
				Thread.sleep(1000);
				
    			productConfigPage.accessDiversity.sendKeys(configKeyValuePair.get("ASide_AccessDiversity"));
    			WaitForPageToLoad(5000);
    			Thread.sleep(1000);
    			slf4jLogger.info("selected A Side AccessDiversity");
			}
			
            if(configKeyValuePair.get("PrivateLine_ASide_SpecialID")!=null) {
            	ExpectedConditions.elementToBeClickable(productConfigPage.privateLineASideSpecialID);
    			productConfigPage.privateLineASideSpecialID.sendKeys(configKeyValuePair.get("PrivateLine_ASide_SpecialID"));
    			WaitForPageToLoad(5000);
    			Thread.sleep(1000);
    			slf4jLogger.info("selected PrivateLine_ASide_SpecialID");
			}
			
            if(configKeyValuePair.get("Specific_Offnet_Vendor_Required")!=null) {
            	ExpectedConditions.elementToBeClickable(productConfigPage.specificOffnetVendor);
    			productConfigPage.specificOffnetVendor.click();
    			WaitForPageToLoad(5000);
    			Thread.sleep(1000);
    			slf4jLogger.info("selected Specific_Offnet_Vendor_Required");
			}
            
            if(configKeyValuePair.get("Specific_Offnet_Vendor_Note")!=null) {
            	ExpectedConditions.elementToBeClickable(productConfigPage.specificOffnetVendorNote);
    			productConfigPage.specificOffnetVendorNote.sendKeys(configKeyValuePair.get("Specific_Offnet_Vendor_Note"));
    			WaitForPageToLoad(5000);
    			Thread.sleep(1000);
    			slf4jLogger.info("selected Specific_Offnet_Vendor_Note");
			}
            
            if(configKeyValuePair.get("Route_Diversity")!=null) {
            	ExpectedConditions.elementToBeClickable(productConfigPage.routeDiversity);
    			productConfigPage.routeDiversity.click();
    			WaitForPageToLoad(5000);
    			Thread.sleep(1000);
    			slf4jLogger.info("selected Route_Diversity");
			}
            
            if(configKeyValuePair.get("Route_Diversity_Note")!=null) {
            	ExpectedConditions.elementToBeClickable(productConfigPage.routeDiversityNote);
    			productConfigPage.routeDiversityNote.sendKeys(configKeyValuePair.get("Route_Diversity_Note"));;
    			WaitForPageToLoad(5000);
    			Thread.sleep(1000);
    			slf4jLogger.info("selected Route_Diversity_Note");
			}
            
            if(configKeyValuePair.get("Diverse_Building_Entrance")!=null) {
            	ExpectedConditions.elementToBeClickable(productConfigPage.diverseBuildingEntrance);
    			productConfigPage.diverseBuildingEntrance.click();
    			WaitForPageToLoad(5000);
    			Thread.sleep(1000);
    			slf4jLogger.info("selected Diverse_Building_Entrance");
			}
            
            if(configKeyValuePair.get("Diverse_Building_Entrance_Note")!=null) {
            	ExpectedConditions.elementToBeClickable(productConfigPage.diverseBuildingEntranceNote);
    			productConfigPage.diverseBuildingEntranceNote.sendKeys(configKeyValuePair.get("Diverse_Building_Entrance_Note"));;
    			WaitForPageToLoad(5000);
    			Thread.sleep(1000);
    			slf4jLogger.info("selected Diverse_Building_Entrance_Note");
			}
            
            if(configKeyValuePair.get("Vendor_Equipment_Diversity")!=null) {
            	ExpectedConditions.elementToBeClickable(productConfigPage.vendorEquipmentDiversity);
    			productConfigPage.vendorEquipmentDiversity.click();
    			WaitForPageToLoad(5000);
    			Thread.sleep(1000);
    			slf4jLogger.info("selected Vendor_Equipment_Diversity");
			}
            
            if(configKeyValuePair.get("Vendor_Equipment_Diversity_Note")!=null) {
            	ExpectedConditions.elementToBeClickable(productConfigPage.vendorEquipmentDiversityNote);
    			productConfigPage.vendorEquipmentDiversityNote.sendKeys(configKeyValuePair.get("Vendor_Equipment_Diversity_Note"));;
    			WaitForPageToLoad(5000);
    			Thread.sleep(1000);
    			slf4jLogger.info("selected Vendor_Equipment_Diversity_Note");
			}
            
            if(configKeyValuePair.get("Multi_term_Request")!=null) {
            	ExpectedConditions.elementToBeClickable(productConfigPage.multitermRequest);
    			productConfigPage.multitermRequest.click();
    			WaitForPageToLoad(5000);
    			Thread.sleep(1000);
    			slf4jLogger.info("selected Multi_term_Request");
			}
            
            if(configKeyValuePair.get("Requested_Term")!=null) {
            	ExpectedConditions.elementToBeClickable(productConfigPage.requestedTerm);
    			productConfigPage.requestedTerm.sendKeys(configKeyValuePair.get("Requested_Term"));;
    			WaitForPageToLoad(5000);
    			Thread.sleep(1000);
    			slf4jLogger.info("selected Requested_Term");
			}
            	
	    }
        if(configKeyValuePair.get("edit_ZSide_level3Acess")!=null) {
        	slf4jLogger.info("Click on Next Button");
			Thread.sleep(1000);
			js.executeScript("window.scrollBy(0,250)", "");
        	ExpectedConditions.elementToBeClickable(productConfigPage.nextbtn1);
	    	productConfigPage.nextbtn1.click();
	    	WaitForPageToLoad(10000);
			Thread.sleep(5000);
			js.executeScript("window.scrollBy(0,100)", "");
			ExpectedConditions.elementToBeClickable(productConfigPage.privateLineZSideAccess);
			productConfigPage.privateLineZSideAccess.click();
			slf4jLogger.info("Switched to Private Line Z Side Access");
			WaitForPageToLoad(10000);
			
			if(configKeyValuePair.get("ZSide_SolutionID")!=null) {
				ExpectedConditions.elementToBeClickable(productConfigPage.privateLineSolutionID);
				Select select = new Select(productConfigPage.privateLineSolutionID); 
				select.selectByIndex(0);
				
				WaitForPageToLoad(10000);
				Thread.sleep(1000);
				productConfigPage.privateLineSolutionID.click();
				WaitForPageToLoad(5000);
				Thread.sleep(1000);
				
				productConfigPage.privateLineSolutionID.sendKeys(configKeyValuePair.get("ZSide_SolutionID"));
				WaitForPageToLoad(10000);
				Thread.sleep(1000);
				slf4jLogger.info("selected ZSide_SolutionID");
			}
			
			if(configKeyValuePair.get("ROCinstruction")!=null) {
				ExpectedConditions.elementToBeClickable(productConfigPage.smROCInstruction);
				productConfigPage.smROCInstruction.sendKeys(configKeyValuePair.get("ROCinstruction"));
				WaitForPageToLoad(10000);
				Thread.sleep(1000);
				slf4jLogger.info("selected ROC Instruction");
			}
			
			 if(configKeyValuePair.get("ZSide_AccessDiversity")!=null) {
	            	ExpectedConditions.elementToBeClickable(productConfigPage.accessDiversity);
	            	productConfigPage.accessDiversity.click();
					WaitForPageToLoad(5000);
					Thread.sleep(1000);
					
	    			productConfigPage.accessDiversity.sendKeys(configKeyValuePair.get("ZSide_AccessDiversity"));
	    			WaitForPageToLoad(5000);
	    			Thread.sleep(1000);
	    			slf4jLogger.info("selected Z Side AccessDiversity");
			 }
	    }
		
		
		slf4jLogger.info(testID + ":" + System.currentTimeMillis()
				+ "299: Selecting Product Attributes Completed : Private Line");

	}
	catch (Exception e) {
		Assert.fail(System.currentTimeMillis() + "@"
				+ "Error occured while configuring Private Line product");
	}
	return new ProductConfigSteps();
	
}

@Step
public ProductConfigSteps selectAttributesColoProducts(String attributeList, String testID) throws InterruptedException {
	WebDriver driver = getDriver();
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	
	try {
		configKeyValuePair = createConfigKeyValuePair(attributeList);
		ExpectedConditions.elementToBeClickable(productConfigPage.clearSelections);
	    productConfigPage.clearSelections.click();
		Thread.sleep(5000);
		if(configKeyValuePair.get("TotalSqFt") !=null){
			productConfigPage.totalSqMtrs.sendKeys(configKeyValuePair.get("TotalSqFt"));
			productConfigPage.totalSqMtrsLabel.click();
		//	driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr[2]/td[1]")).click();
			WaitForPageToLoad(6000);
			Thread.sleep(5000);
			}
		for(int i=1;i<=productConfigPage.smCoreProdFields.size();i++) {

				WebElement prodField = null;
				try{
					 prodField = driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/input"));
					
				}catch (Exception e) {
					slf4jLogger.info("Selected.Attributes..!");
					break;
				}
				String prodID = prodField.getAttribute("id");
				slf4jLogger.info(prodID);
				WebElement prod = driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/span/span[1]"));
				ExpectedConditions.elementToBeClickable(prod);
				if(configKeyValuePair.get("Location") !=null){
				if(prodID.equals("Location")) {
						prod.click();
						List<WebElement> options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Location")+"']"));
						options.get(options.size() - 1).click();
				        WaitForPageToLoad(6000);
				        Thread.sleep(10000);
				}
				}
				
					
		}
		slf4jLogger.info(testID + ":" + System.currentTimeMillis()
				+  "299: Selecting Product Attributes Completed : Colo product");

	}
	catch (Exception e) {
		Assert.fail(System.currentTimeMillis() + "@"
				+ "Error occured while configuring Colo product");
	}
	return new ProductConfigSteps();
	
}

@Step
public ProductConfigSteps selectAttributesDDOSMitigationService(String attributeList, String testID) throws InterruptedException {
	WebDriver driver = getDriver();
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	
	try {
		configKeyValuePair = createConfigKeyValuePair(attributeList);
		if(driver.findElement(By.xpath("//*[@id='AttributeForm']/div[1]/div[2]/table/tbody/tr[3]/td[2]/div/span/span/span[1]")).getText().isEmpty()||
				driver.findElement(By.xpath("//*[@id='AttributeForm']/div[1]/div[2]/table/tbody/tr[3]/td[2]/div/span/span/span[1]")).getText().contains("Select")){
			Thread.sleep(1000);
			productConfigPage.address1.click();
			productConfigPage.address1List.get(2).click();
			Thread.sleep(10000);
		}
		ExpectedConditions.elementToBeClickable(productConfigPage.clearSelections);
	    productConfigPage.clearSelections.click();
		Thread.sleep(5000);
		
			for(int i=1;i<=productConfigPage.smCoreProdFields.size();i++) {

				WebElement prodField = null;
				try{
					 prodField = driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/input"));
					 										
				}catch (Exception e) {
					try{
						i=i+1;
						 prodField = driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/input"));
					}catch (Exception e1) {
						slf4jLogger.info("Selected.Attributes..!");
						break;
					}
					
				}
				String prodID = prodField.getAttribute("id");
				WebElement prod = driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/span/span[1]"));
				ExpectedConditions.elementToBeClickable(prod);
				
				
					if(prodID.equals("Clean_Bandwidth")) {
						prod.click();
						List<WebElement> options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Bandwidth")+"']"));
						Thread.sleep(1000);
						options.get(options.size() - 1).click();
				        WaitForPageToLoad(6000);
				        Thread.sleep(8000);
				}
					
			       else if(prodID.equals("Kit_Region")) {
						prod.click();
						List<WebElement> options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Kit")+"']"));
						Thread.sleep(1000);
						options.get(options.size() - 1).click();
						WaitForPageToLoad(5000);
				        Thread.sleep(8000);
				        break;
						
					}else if(prodID.equals("Service_Type")) {
						prod.click();
						List<WebElement> options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Service_Type")+"']"));
						Thread.sleep(1000);
						options.get(options.size() - 1).click();
						WaitForPageToLoad(5000);
				        Thread.sleep(5000);
						
					}
	}
		slf4jLogger.info(testID + ":" + System.currentTimeMillis()
				+ "299: Selecting Product Attributes Completed : DDOS Mitigation Service");

	}
	catch (Exception e) {
		Assert.fail(System.currentTimeMillis() + "@"
				+ "Error occured while configuring DDOS Mitigation Service product");
	}
	return new ProductConfigSteps();
	
}

@Step
public void addClonesForChildChargesinSM(String clone, String testID) throws Exception {
	WebDriver driver = getDriver();
	try {
		Thread.sleep(1000);
		productConfigPage.cloneChildProdBtns.get(0).click();;
		slf4jLogger.info("Clicked on clone button for child products ....");
		Thread.sleep(2000);
		productConfigPage.cloneInput.get(0).click();
		
		Thread.sleep(1000);
		List<WebElement> input = driver.findElements(By.id("CloneCountInput"));
		input.get(0).clear();
		input.get(0).sendKeys(clone);
 		
		Thread.sleep(2000);
		driver.findElements(By.xpath("//button[text()='OK']")).get(0).click();
 		
		if(testID.equals("1914")){
			slf4jLogger.info("Only max of total 9 is allowed : Error popup is displayed");
			Thread.sleep(2000);
			driver.switchTo().alert().accept();
			Thread.sleep(5000);
			driver.findElement(By.xpath("/html/body/div[85]/div[2]/div/button[1]")).click();
			Thread.sleep(2000);
			productConfigPage.childProdDropdown.click();
			slf4jLogger.info("Clicked on add child products Dropdown....");
			Thread.sleep(3000);
			List<WebElement> dropDownOptions= driver.findElements(By.xpath("/html/body/div[155]/div/div[3]/ul/li"));
			if(dropDownOptions.size()!=2){
				Assert.fail(testID + ": @" + System.currentTimeMillis() + "@"
						+ "Child Product not removed after max clones added");
			}
			
				driver.findElement(By.xpath("/html/body/div[4]/div[1]/div[5]/div[2]/div[3]/button")).click();
		        WaitForPageToLoad(5000);
		        Thread.sleep(5000);
		        driver.findElement(By.xpath("/html/body/div[4]/div[1]/div[5]/div[2]/div[4]/button")).click();
		        Thread.sleep(5000);
		        slf4jLogger.info("Clicked on save product button....");
		}
		
			Thread.sleep(5000);
			driver.findElement(By.xpath("/html/body/div[4]/div[1]/div[5]/div[2]/div[3]/button")).click();
	        WaitForPageToLoad(5000);
	        Thread.sleep(5000);
		
	        if(testID.equals("2010")){
				Thread.sleep(5000);
				driver.findElement(By.xpath("/html/body/div[4]/div[1]/div[5]/div[2]/div[4]/button")).click();
		        WaitForPageToLoad(5000);
		        Thread.sleep(5000);
			}
		
	} catch (Exception e) {
		Assert.fail(testID + ": @" + System.currentTimeMillis() + "@"
					+ "Error occured while verifying Child products Dropdown list");
		
	}
	
	
}
/**
 * method to read values before applying discount
 * 
 * @param driver
 * @return
 * @throws Exception
 */
public void readValuesBeforeApplyingDiscount(String testID)
		throws Exception {
	try {
		Thread.sleep(2000);
		WebDriver driver = getDriver();
		String UnitAdjustedMrc = "";
		
		slf4jLogger.info(testID + ":" + System.currentTimeMillis()
				+ "Clicked readValuesBeforeApplyingDiscount button");

		Thread.sleep(1000);
		UnitAdjustedMrc = driver
				.findElement(By
						.xpath("//*[@id=\"attributes-pricing-table\"]/table/tbody/tr[1]/td[2]/input"))
				.getAttribute("value");
		slf4jLogger.info(testID + ":" + System.currentTimeMillis() + "UnitAdjustedMrc Value is :"
				+ UnitAdjustedMrc);

		UnitAdjustedMrc = UnitAdjustedMrc.substring(1).replaceAll(",", "");
		slf4jLogger.info(testID + ":" + System.currentTimeMillis() + "UnitAdjustedMrc Value is :"
				+ UnitAdjustedMrc);
		MRCAdjusted = Double.parseDouble(UnitAdjustedMrc);
		slf4jLogger.info(
				testID + ":" + System.currentTimeMillis() + "UnitAdjustedMrc Value is :" + MRCAdjusted);

	} catch (Exception e) {
		Assert.fail(testID + ": @" + System.currentTimeMillis() + "@"
				+ "Error while reading values before applying discount");
	}
	}
/**
 * method to edit discount
 * 
 * @param driver
 * @throws Exception
 */
public void editDiscount(String testID, String discount) throws Exception {
	WebDriver driver = getDriver();
	try {
		Thread.sleep(3000);
		productConfigPage.mrcDiscount.click();
		productConfigPage.mrcDiscount.clear();
		Thread.sleep(1000);
		JavascriptExecutor jse = (JavascriptExecutor)driver;
		  jse.executeScript("arguments[0].value='" + discount + "';", productConfigPage.mrcDiscount);
		
		
		driver.findElement(By.xpath("//*[@id=\"attributes-pricing-table\"]/table/tbody/tr[3]/td[1]")).click();
		Thread.sleep(2000);
		
	} catch (Exception e) {

		Assert.fail(
				testID + ": @" + System.currentTimeMillis() + "@" + "Error while editing discount");
	}
}

/**
 * method to verify discount
 * 
 * @param driver
 * @return
 * @throws Exception
 */
public void verifyDiscounts(String testID) throws Exception {
	try {
		
		WebDriver driver = getDriver();
		driver.findElement(By.xpath("//*[@id=\"PricingPanel\"]/div[1]/div[1]/div/strong/span")).click();
		Thread.sleep(5000);
		Double discountedMRC = MRCAdjusted * .90;
		discountedMRC = Math.round(discountedMRC * 100.0) / 100.0;
		String MRC  = driver.findElement(By.xpath("//*[@id=\"attributes-pricing-table\"]/table/tbody/tr[5]/td[2]/input"))
				.getAttribute("value").substring(1).replaceAll(",", "");
		Double newMRCAdjusted = Double.parseDouble(MRC);
		if (!(discountedMRC.equals(newMRCAdjusted))) {
			Assert.fail(
					testID + ": @" + System.currentTimeMillis() + "@" + "Discounts are not applied");
		}
		slf4jLogger.info(testID + ":" + System.currentTimeMillis() + "Verified discounts");
		
		Thread.sleep(2000);
	} catch (Exception e) {
		Assert.fail(
				testID + ": @" + System.currentTimeMillis() + "@" + "Error in verifying discounts");
	}
	
}

@Step
public void clickOnDisplayPricingandApplyDiscount(String testID, String discount)  throws Exception{
	WebDriver driver = getDriver();
	try {
		if(testID.equals("1988") || testID.equals("2008")){
		Thread.sleep(1000);
		ExpectedConditions.elementToBeClickable(productConfigPage.displayPricingButton);
		productConfigPage.displayPricingButton.click();
		Thread.sleep(5000);
		slf4jLogger.info("Clicked on Display pricing button..");
		editDiscount(testID,discount);
	}
	else{
		readValuesBeforeApplyingDiscount(testID);
		editDiscount(testID,discount);
		verifyDiscounts(testID);
		if(testID.equals("2005")) editDiscount(testID,"100%");
	}
	}
	catch(Exception e)
	{
		slf4jLogger.info("Error occured while applying discount in product config page");
		Assert.fail(e.getMessage());
	}
}

@Step
public void createAdditionalCopiesSMCore(String testID, String copycount) throws InterruptedException {
	WebDriver driver = getDriver();
	try {
		slf4jLogger.info(testID + ": @" + System.currentTimeMillis() + "@" + "Clicking on Next Button.");
	if(!testID.equals("2042")){
		try{
		productConfigPage.nextbtn1.click();
	}catch (Exception e) {
		driver.findElement(By.xpath("//*[@id=\"ProductPackageWizardView\"]/div[1]/div[4]/div[2]/button")).click();
	}
		Thread.sleep(20000);
	try{
		ExpectedConditions.elementToBeClickable(productConfigPage.nextbtn2);
		productConfigPage.nextbtn2.click();
	}catch (Exception e) {
		driver.findElement(By.xpath("//*[@id='ProductPackageWizardView']/div[1]/div[5]/div[2]/div[3]/button")).click();
	}
	}
	 Thread.sleep(8000);
	slf4jLogger.info(testID + ": @" + System.currentTimeMillis() + "@"
			+ "Entering copy count..");
	WebElement copyInputField = driver.findElement(By.xpath("//*[@id=\"package-summary-grid\"]/div[2]/table/tbody/tr/td[2]/span/span/input[1]"));
	
	JavascriptExecutor jse = (JavascriptExecutor)driver;
	jse.executeScript("arguments[0].value='" +copycount+ "';", copyInputField);
	 slf4jLogger.info(testID + ": @" + System.currentTimeMillis() + "@"
			+ "Copy count added..!!");
	 driver.findElement(By.xpath("//*[@id='package-summary-grid']/div[2]")).click();
    
	} catch (Exception e) {
	
	Assert.fail("Error while verifying clone location function in Product Review page..");
	}
}


@Step
public ProductConfigPage verifyRelatedPortAttributeSelected(String testID) throws InterruptedException {
	WebDriver driver = getDriver();
	
	try {
		slf4jLogger.info(testID+ System.currentTimeMillis() + "Clicking on Related Port tab..");
		
		WebElement relPort = driver.findElement(By.xpath("//*[@id=\"RelatedProductSearch-relPort\"]/span/span/span[1]"));
		relPort.click();
		Thread.sleep(5000);
		WebElement CreateNewPkg_radioBtn = driver.findElement(By.xpath("//*[@id=\"RelatedProductScenarioGrid-relPort\"]/div[2]/table/tbody/tr/td[1]/input"));
		ExpectedConditions.elementToBeClickable(CreateNewPkg_radioBtn);
		CreateNewPkg_radioBtn.click();
		slf4jLogger.info(testID+ System.currentTimeMillis() + "Selected create new package option..");
		slf4jLogger.info(testID+ System.currentTimeMillis() + "Closing tab..");
		WebElement closeBtn_RelPortPopup = driver.findElement(By.xpath("/html/body/div[33]/div[1]/div/a"));
		ExpectedConditions.elementToBeClickable(closeBtn_RelPortPopup);
		closeBtn_RelPortPopup.click();
		Thread.sleep(5000);
	} catch (Exception e) {
		slf4jLogger.info(e.getMessage());
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		Assert.fail(e.getMessage());
		
	}
	return new ProductConfigPage();
}


@Step
public ProductConfigPage selectProductfromInventory(String testID) throws InterruptedException {
	
	
	WebDriver driver = getDriver();
	try {
		slf4jLogger.info(testID+ System.currentTimeMillis() + "Clicking on Related Port tab..");
		if(testID.equals("2001")){
		WebElement relPort = driver.findElement(By.xpath("//*[@id=\"RelatedProductSearch-relPort\"]/span/span/span[1]"));
		relPort.click();
		Thread.sleep(5000);
		
		WebElement InventoryTab = driver.findElement(By.xpath("//*[@id=\"RelatedProductSearchWindow-relPort\"]/div/div/ul/li[2]/span[2]"));
		ExpectedConditions.elementToBeClickable(InventoryTab);
		InventoryTab.click();
		
		WebElement Inventory_radioBtn = driver.findElement(By.xpath("//*[@id=\"RelatedProductScenarioGrid-relPort\"]/div[2]/table/tbody/tr/td[1]/input"));
		ExpectedConditions.elementToBeClickable(Inventory_radioBtn);
		Inventory_radioBtn.click();
		slf4jLogger.info(testID+ System.currentTimeMillis() + "Selected package from inventory..");
		}
		else if(testID.equals("6391")){
			productConfigPage.relAlocUNI.click();
			Thread.sleep(5000);
			
			
			ExpectedConditions.elementToBeClickable(productConfigPage.relAlocUNIInventoryTab);
			productConfigPage.relAlocUNIInventoryTab.click();
			
			
			ExpectedConditions.elementToBeClickable(productConfigPage.relAlocUNIInventoryradioBtn);
			productConfigPage.relAlocUNIInventoryradioBtn.click();
			Thread.sleep(10000);
			slf4jLogger.info(testID+ System.currentTimeMillis() + "Selected package from inventory..");
			
			productConfigPage.relZlocUNI.click();
			Thread.sleep(5000);
			
			ExpectedConditions.elementToBeClickable(productConfigPage.relZlocUNIInventoryTab);
			productConfigPage.relZlocUNIInventoryTab.click();
			
			ExpectedConditions.elementToBeClickable(productConfigPage.relZlocUNIInventoryradioBtn);
			productConfigPage.relZlocUNIInventoryradioBtn.click();
			slf4jLogger.info(testID+ System.currentTimeMillis() + "Selected package from inventory..");
			
		}
		
		Thread.sleep(5000);
	} catch (Exception e) {
		slf4jLogger.info(e.getMessage());
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		Assert.fail(e.getMessage());
		
	}
	return new ProductConfigPage();
}

@Step
public ProductConfigPage verifyRatingTypeAttributes(String testID) throws InterruptedException {
	WebDriver driver = getDriver();
	try {
		if(testID.equals("2003")) {
			
			WebElement RatingType_CSG = driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr[5]/td[2]/div/span/span/span[1]"));
			RatingType_CSG.click();
			
		}
		else if(testID.equals("2002")) {
			WebElement RatingType_User = driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr[4]/td[2]/div/span/span"));
			RatingType_User.click();
			
		}
		
		slf4jLogger.info(testID+ System.currentTimeMillis() + "Verified : Rating Type(User) options");
		
	} catch (Exception e) {
		slf4jLogger.info(e.getMessage());
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		Assert.fail(e.getMessage());
		
	}
	return new ProductConfigPage();
}



public void verifyUsagebasedPricingforHSIP(String testID)  throws InterruptedException {
	WebDriver driver = getDriver();
	try {
		if(testID.equals("2002")) {

			JavascriptExecutor jse = (JavascriptExecutor)driver;
			jse.executeScript("window.scrollBy(0,260)");
			
			WebElement usageRates  = driver.findElement(By.xpath("//*[@id=\"PricingPanel\"]/div[1]/div[2]/div[1]/table/thead/tr[1]/td[2]/div"));
			if(!(usageRates.isDisplayed())) {
				Assert.fail(testID+ System.currentTimeMillis() + "Error : Usage rates is not displayed");
			}
			slf4jLogger.info(testID+ System.currentTimeMillis() + "Usage Rates is displayed...!");
			WebElement standardUsageRate = driver.findElement(By.xpath("//*[@id=\"PricingPanel\"]/div[1]/div[2]/div[1]/table/thead/tr[2]/td[4]"));
			WebElement AdjustedUsageRate = driver.findElement(By.xpath("//*[@id=\"PricingPanel\"]/div[1]/div[2]/div[1]/table/thead/tr[2]/td[5]"));
			WebElement CDR_Rate = driver.findElement(By.xpath("//*[@id=\"PricingPanel\"]/div[1]/div[2]/div[1]/table/tbody/tr[1]/td[1]/span"));
			WebElement BurstRate = driver.findElement(By.xpath("//*[@id=\"PricingPanel\"]/div[1]/div[2]/div[1]/table/tbody/tr[2]/td[1]/span"));
			if(!((standardUsageRate.isDisplayed() &&   (AdjustedUsageRate.isDisplayed())  &&   (CDR_Rate.isDisplayed())  &&   (BurstRate.isDisplayed())))){
				Assert.fail(testID+ System.currentTimeMillis() + "Error verifying Usage Rates.!");
			}
			
			for(int i=1;i<=2;i++) {
				WebElement standardRateColumns = driver.findElement(By.xpath("//*[@id=\"PricingPanel\"]/div[1]/div[2]/div[1]/table/tbody/tr["+i+"]/td[4]/input[2]"));
				WebElement csgRateColumns = driver.findElement(By.xpath("//*[@id=\"PricingPanel\"]/div[1]/div[2]/div[1]/table/tbody/tr["+i+"]/td[5]/input"));
				if((standardRateColumns.isEnabled() ||  (csgRateColumns.isEnabled()))){
					Assert.fail(testID+ System.currentTimeMillis() + "Usage rates fields are not disabled..!");
				}
			}
			
			
			slf4jLogger.info(testID+ System.currentTimeMillis() + "Verified : Usage Rates Columns are disabled....!");
			
		
		}
		else {
		JavascriptExecutor jse = (JavascriptExecutor)driver;
		jse.executeScript("window.scrollBy(0,260)");
		
		WebElement usageRates  = driver.findElement(By.xpath("//*[@id=\"PricingPanel\"]/div[1]/div[2]/div[1]/table/thead/tr[1]/td[2]/div"));
		if(!(usageRates.isDisplayed())) {
			Assert.fail(testID+ System.currentTimeMillis() + "Error : Usage rates is not displayed");
		}
		slf4jLogger.info(testID+ System.currentTimeMillis() + "Usage Rates is displayed...!");
		WebElement standardUsageRate = driver.findElement(By.xpath("//*[@id=\"PricingPanel\"]/div[1]/div[2]/div[1]/table/thead/tr[2]/td[4]"));
		WebElement AdjustedUsageRate = driver.findElement(By.xpath("//*[@id=\"PricingPanel\"]/div[1]/div[2]/div[1]/table/thead/tr[2]/td[5]"));
		WebElement Approved_Rate = driver.findElement(By.xpath("//*[@id=\"PricingPanel\"]/div[1]/div[2]/div[1]/table/tbody/tr/td[6]/input"));
		WebElement BurstRate = driver.findElement(By.xpath("//*[@id=\"PricingPanel\"]/div[1]/div[2]/div[1]/table/tbody/tr[2]/td[1]/span"));
		if(!((standardUsageRate.isDisplayed() &&   (AdjustedUsageRate.isDisplayed())  &&   (Approved_Rate.isDisplayed())  &&   (BurstRate.isDisplayed())))){
			Assert.fail(testID+ System.currentTimeMillis() + "Error verifying Usage Rates.!");
		}
		
		for(int i=1;i<=2;i++) {
			WebElement standardRateColumns = driver.findElement(By.xpath("//*[@id=\"PricingPanel\"]/div[1]/div[2]/div[1]/table/tbody/tr["+i+"]/td[4]/input[2]"));
			WebElement csgRateColumns = driver.findElement(By.xpath("//*[@id=\"PricingPanel\"]/div[1]/div[2]/div[1]/table/tbody/tr["+i+"]/td[5]/input"));
			WebElement ApprovedRateColumns = driver.findElement(By.xpath("//*[@id=\"PricingPanel\"]/div[1]/div[2]/div[1]/table/tbody/tr["+i+"]/td[6]/input"));
			
			
			if((standardRateColumns.isEnabled() &&  (!(csgRateColumns.isEnabled())) && (!(ApprovedRateColumns.isEnabled())))){
				Assert.fail(testID+ System.currentTimeMillis() + "Usage rates fields are not disabled..!");
			}
		}
		}
		
		
		slf4jLogger.info(testID+ System.currentTimeMillis() + "Verified : Usage Rates Columns are disabled....!");
		
	} catch (Exception e) {
		slf4jLogger.info(e.getMessage());
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		Assert.fail(e.getMessage());
		
	}
	
}



public void verifyAmortization(String testID) throws InterruptedException {
	WebDriver driver = getDriver();
	Wait<WebDriver> wait = new WebDriverWait(driver, 10000);
	
	try {
		if(testID.equals("2020")) {
			ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("//*[@id=\"viewLabel-IPPort\"]/strong")));
			slf4jLogger.info(testID+ System.currentTimeMillis() + "Clicking on View- Ip Port label icon..");
			driver.findElement(By.xpath("//*[@id=\"viewLabel-IPPort\"]/strong")).click();
			
			WebElement IPPort_Nrc = driver.findElement(By.id("IPPort_Nrc"));
			if(!(IPPort_Nrc.getText().equals("$0.00"))) {
				Assert.fail("Error while verifying amortization in Prod Config page..");
			}
			slf4jLogger.info(testID+ System.currentTimeMillis() + "Verified Amortization in Prod Config page..");
			}
		else if(testID.equals("2043")) {
			boolean res1=false,res2=false,res3=false,res4=false;
			for(int i=2;i<=3;i++) {
				WebElement element = driver.findElement(By.xpath(".//*[@id='ProductGrid']/div[2]/table/tbody/tr["+i+"]/td[1]/div/div[1]/span[2]/a"));
				wait.until(ExpectedConditions.elementToBeClickable(element));
				element.click();
				WaitForPageToLoad(10000);
				wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.displayPricingButton));
				productConfigPage.displayPricingButton.click();
				WaitForPageToLoad(10000);
				
				res1 = productConfigPage.internetExtAdjustedMRC.getText().equals("$0.00");
				res2 = productConfigPage.internetExtApprovedMRC.getText().equals("$0.00");
				res3 = productConfigPage.internetExtAdjustedNRC.getText().equals("-");
				res4 = productConfigPage.internetExtApprovedNRC.getText().equals("-");
				
				if(res1 && res2 && res3 && res4)
					slf4jLogger.info("Invalid Amortized NRC pricing for Internet Transport and Managed Router");
				
				slf4jLogger.info("Valid Amortized NRC pricing for Internet Transport and Managed Router");	
				clickOnNext();
			}
				
		}
		
		
	} catch (Exception e) {
		slf4jLogger.info(e.getMessage());
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		Assert.fail(e.getMessage());
		
	}
	
}


public void viewAttributes(String string, String string2) {

	WebDriver driver = getDriver();
	
	try {
		
	} catch (Exception e) {
		slf4jLogger.info(e.getMessage());
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		Assert.fail(e.getMessage());
		
	}
	
}



public void openChildproduct(String string, String string2) {

	WebDriver driver = getDriver();
	try {
		
	} catch (Exception e) {
		slf4jLogger.info(e.getMessage());
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		Assert.fail(e.getMessage());
		
	}
	
}


@Step
public void preDeployLabelCheckWavelength() throws InterruptedException{
	try {
		WebDriver driver = getDriver();
			slf4jLogger.info("inside preDeploy check wavelength method..");
			WaitForPageToLoad(5000);
			Thread.sleep(5000);
			
			ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[@id='pdbadge']/text()"));
			WaitForPageToLoad(5000);
	        Thread.sleep(8000);
	        
			assertTrue("Pre-Deploy label check failed...!!! ",productConfigPage.preDeployedLabel.getText().trim().equalsIgnoreCase("Pre-Deployed"));
			
	        WaitForPageToLoad(5000);
	        Thread.sleep(5000);
	        slf4jLogger.info("Test Pass...!!!");
	}
	catch (Exception e) {
		slf4jLogger.info(e.getMessage());
		System.exit(0);
	}
}


@Step
public void editConfigurationWavelength(String configuration, String scenstatus) throws InterruptedException {
	WaitForPageToLoad(5000);
	try {
		WebDriver driver = getDriver();
		Wait<WebDriver> wait = new WebDriverWait(driver, 10000);
		slf4jLogger.info("inside Edit Configurations Wavelength method..");
		if(scenstatus.equalsIgnoreCase("Valid")) {
			ExpectedConditions.elementToBeClickable(productConfigPage.waveBandwidth);
			productConfigPage.waveBandwidth.sendKeys(configuration);
			driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
			WaitForPageToLoad(5000);
			Thread.sleep(2000);
			slf4jLogger.info("selected Bandwidth");
		}
		else if(scenstatus.equalsIgnoreCase("Invalid")) {
			wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.waveBandwidth));
			productConfigPage.waveBandwidth.sendKeys(configuration);
			driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
			WaitForPageToLoad(5000);
			Thread.sleep(2000);
			slf4jLogger.info("selected Bandwidth");
		}
	}
	catch (Exception e) {
		slf4jLogger.info(e.getMessage());
		System.exit(0);
	}
	
}


@Step

public void checkForEnabledOrDisabledROCOption(String testid) {
	try {
		slf4jLogger.info("Checking for ROC Option is enabled/disabled");
		WebDriver driver = getDriver();
		Wait<WebDriver> fluentwait =new FluentWait<WebDriver>(driver)
		        .pollingEvery(Duration.ofSeconds(2))
				.withTimeout(Duration.ofMinutes(5))
				.ignoring(NoSuchElementException.class)
				.ignoring(StaleElementReferenceException.class)
				.ignoring(ElementNotVisibleException.class)
				.ignoring(ElementClickInterceptedException.class);
		boolean res1 = false, res2 = false;
		if(testid.equals("25596") || testid.equals("25597")) {
			SwitchToASideAccess();
			
			fluentwait.until(ExpectedConditions.elementToBeClickable(productConfigPage.rocAccessAndDiversityOption));
			res1 = productConfigPage.rocAccessAndDiversityOption.isEnabled();
			if(res1) {
				if(testid.equals("25596")) 
					slf4jLogger.info("verification of ROC Option is enabled successful");
				else if(testid.equals("25597")) {
					SwitchToZSideAccess();
					fluentwait.until(ExpectedConditions.elementToBeClickable(productConfigPage.rocAccessAndDiversityOption));
					res2 = productConfigPage.rocAccessAndDiversityOption.isEnabled();
					if(res2) 
						slf4jLogger.info("verification of ROC Option is enabled successful");
					else
						Assert.fail("verification of ROC Option is enabled failed....");
				}
			}
			else
				Assert.fail("verification of ROC Option is enabled failed....");
			
		}
	}
	catch (Exception e) {
			slf4jLogger.info("verification of ROC Option is enabled/disabled/hidden failed for Test id ....@"+ testid +" " +e.getMessage());
			Assert.fail(e.getMessage());	
	}
}

@Step
public void checkForROCOptionsAttributes(String testid) {
	try {
		WebDriver driver = getDriver();
		slf4jLogger.info("Checking for the presence of ROC Option Attributes");
		Wait<WebDriver> fluentwait =new FluentWait<WebDriver>(driver)
		        .pollingEvery(Duration.ofSeconds(2))
				.withTimeout(Duration.ofMinutes(5))
				.ignoring(NoSuchElementException.class)
				.ignoring(StaleElementReferenceException.class)
				.ignoring(ElementNotVisibleException.class)
				.ignoring(ElementClickInterceptedException.class);
		WaitForPageToLoad(5000);
		SwitchToASideAccess();
		
		boolean res1=false,res2=false, res3=false , res4=false;
		fluentwait.until(ExpectedConditions.elementToBeClickable(productConfigPage.rocAccessAndDiversityOption));
		res1 = productConfigPage.rocAccessAndDiversityOption.isEnabled();
		if(res1) {
			if(testid.equals("25598")) {
				productConfigPage.rocAccessAndDiversityOption.click();
				WaitForPageToLoad(5000);
				fluentwait.until(ExpectedConditions.visibilityOf(productConfigPage.rocAccessAndDiversityPopup));
				res2 = driver.findElement(By.xpath("/html/body/ngb-modal-window/div/div/app-product-children-attribute-table-edit/div[2]/div/form/div[1]/div/label")).isDisplayed();
				res3 = driver.findElement(By.xpath("/html/body/ngb-modal-window/div/div/app-product-children-attribute-table-edit/div[2]/div/form/div[2]/div/label")).isDisplayed();
				if(res2 && res3) {
	            	slf4jLogger.info("verification of presence of ROC Option Attributes successful");
	            }
	            else
	            	Assert.fail("verification of presence of ROC Option Attributes failed....");
			}
			else if(testid.equals("25599")) {
				
				driver.findElement(By.xpath("//*[@id='NetworkStatus']/option[3]")).click();
				WaitForPageToLoad(10000);
				Thread.sleep(10000);
				res2 = productConfigPage.rocAccessAndDiversityOption.isCurrentlyVisible();
				if(!res2) {
					slf4jLogger.info("verification of invisibility of ROC Option successful");
				}
				else
					Assert.fail("verification of invisibility of ROC Option failed");
			}
	        else if(testid.equals("25603")) {
	        	productConfigPage.rocAccessAndDiversityOption.click();
	        	Thread.sleep(10000);
	        	editROCAndAccessDiversityAttributes();
	        	WaitForPageToLoad(5000);
	        	Thread.sleep(10000);
	        	productConfigPage.rocAccessAndDiversityOption.click();
	        	Thread.sleep(10000);
	        	res2 = (productConfigPage.rocAccessDiversity.getText()!=null);
	        	if(res2) {
					slf4jLogger.info("verification of modification of ROC Option Attributes successful");
				}
				else
					Assert.fail("verification of modification of ROC Option Attributes failed");
	        }
	        else if(testid.equals("27325")) {
				driver.findElement(By.xpath("//*[@id=\"WaveBandwidth\"]/option[13]")).click();
			    Thread.sleep(10000);
				res2 = driver.findElement(By.xpath("//*[@id=\"WaveZSide_Mrc\"]")).getText().equals("--");
				res3 = productConfigPage.rocAccessAndDiversityOption.isCurrentlyEnabled();
				
				if(res2 && !res3) {
					slf4jLogger.info("verification of ROC Option disabled while pricing call successful");
				}
				else
					Assert.fail("verification of ROC Option disabled while pricing call failed");
			}
	        else if(testid.equals("27326")) {
	        	res2=true;
				driver.findElement(By.xpath("//*[@id=\"WaveBandwidth\"]/option[4]")).click();
				Thread.sleep(10000);
				while(res2) {
					Thread.sleep(1000);
					res2 = driver.findElement(By.xpath("//*[@id=\"WaveZSide_Mrc\"]")).getText().equals("--");
				}
				res2 = driver.findElement(By.xpath("//*[@id=\"WaveZSide_Mrc\"]")).getText().equals("--");
				res3 = productConfigPage.rocAccessAndDiversityOption.isCurrentlyEnabled();
				if(!res2 && res3) {
					slf4jLogger.info("verification of ROC Option enabled while pricing call successful");
				}
				else
					Assert.fail("verification of ROC Option enabled while pricing call failed");
			}
	        else if(testid.equals("27327")) {
				driver.findElement(By.xpath("//*[@id=\"WaveBandwidth\"]/option[4]")).click();
				Thread.sleep(10000);
				res2 = driver.findElement(By.xpath("//*[@id=\"parentAttributes\"]/div/div[3]/table/tbody[1]/tr/td[3]")).getText().equals("--");
				res3 = driver.findElement(By.xpath("//*[@id=\"parentAttributes\"]/div/div[3]/table/tbody[1]/tr/td[4]")).getText().equals("--");
				if(res2 && res3) {
					slf4jLogger.info("verification of Pricing grid contains dashes while pricing call successful");
				}
				else
					Assert.fail("verification of Pricing grid contains dashes while pricing call failed");
			}
	        else if(testid.equals("27328")) {
	        	res2=true;res3=true;
				driver.findElement(By.xpath("//*[@id=\"WaveBandwidth\"]/option[4]")).click();
				Thread.sleep(15000);
				while(res2 && res3) {
					Thread.sleep(1000);
				    res2 = driver.findElement(By.xpath("//*[@id=\"parentAttributes\"]/div/div[3]/table/tbody[1]/tr/td[3]/span")).getText().equals("--");
				    res3 = driver.findElement(By.xpath("//*[@id=\"parentAttributes\"]/div/div[3]/table/tbody[1]/tr/td[4]/span")).getText().equals("--");
				}
				res2 = driver.findElement(By.xpath("//*[@id=\"parentAttributes\"]/div/div[3]/table/tbody[1]/tr/td[3]")).getText().equals("--");
				res3 = driver.findElement(By.xpath("//*[@id=\"parentAttributes\"]/div/div[3]/table/tbody[1]/tr/td[4]")).getText().equals("--");
				res4 = productConfigPage.rocAccessAndDiversityOption.isCurrentlyEnabled();
				if(!res2 && !res3 && res4) {
					slf4jLogger.info("verification of Pricing grid contains prices while pricing call successful");
				}
				else
					Assert.fail("verification of Pricing grid contains prices while pricing call failed");
			}
		}   
	}
	catch (Exception e) {
		slf4jLogger.info("Verification for presence of ROC Option Attributes Failed...."+e.getMessage());
		Assert.fail(e.getMessage());
	}
	
}
	
@Step
    public void editROCAndAccessDiversityAttributes() {
		slf4jLogger.info("Editing ROC and Access diversity pop-up attribute's values");
		WaitForPageToLoad(5000);
		WebDriver driver = getDriver();
		Wait<WebDriver> fluentwait =new FluentWait<WebDriver>(driver)
		        .pollingEvery(Duration.ofSeconds(2))
				.withTimeout(Duration.ofMinutes(5))
				.ignoring(NoSuchElementException.class)
				.ignoring(StaleElementReferenceException.class)
				.ignoring(ElementNotVisibleException.class)
				.ignoring(ElementClickInterceptedException.class);
    	productConfigPage.rocSolution.click();
    	WaitForPageToLoad(5000);
    	productConfigPage.dqpROCInstruction.sendKeys("Some ROC Instructions");
    	WaitForPageToLoad(5000);
    	productConfigPage.rocAccessDiversity.click();
    	WaitForPageToLoad(5000);
    	
    	fluentwait.until(ExpectedConditions.elementToBeClickable(productConfigPage.rocAccessDiversitySaveBtn));
    	productConfigPage.rocAccessDiversitySaveBtn.click();
    	WaitForPageToLoad(10000);
    }

public ProductConfigSteps selectAttributesPDN(String attributeList) {
	WebDriver driver = getDriver();
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	
	try{
		configKeyValuePair = createConfigKeyValuePair(attributeList);
		ExpectedConditions.elementToBeClickable(productConfigPage.clearSelections);
    productConfigPage.clearSelections.click();
	Thread.sleep(5000);
	for(int i=1;i<=productConfigPage.smCoreProdFields.size();i++) {
		WebElement prodField = null;
		try{
			 prodField = driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/input"));
			
		}catch (Exception e) {
			slf4jLogger.info("Selected.Attributes..!");
			break;
		}
		String prodID = prodField.getAttribute("id");
		WebElement prod = driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span"));
		ExpectedConditions.elementToBeClickable(prod);
		
		  if(prodID.equals("Dedicated_Network_Name")) {
				prod.click();
				slf4jLogger.info("Select Dedicated_Network_Name ..");
				prod.sendKeys(configKeyValuePair.get("Dedicated_Network_Name"));
				driver.findElement(By.xpath("//*[@id='Dedicated_Network_Name']")).sendKeys(configKeyValuePair.get("Dedicated_Network_Name"));
				slf4jLogger.info("Selected Dedicated_Network_Name..");
		        WaitForPageToLoad(5000);
		        Thread.sleep(5000);
		        				
			}
		
			else if(prodID.equals("Dedicated_Network_Type")) {
				prod.click();
				slf4jLogger.info("Select Dedicated_Network_Type..");
				
				Thread.sleep(1000);
				driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[2]/td[2]/div/span")).sendKeys(configKeyValuePair.get("Dedicated_Network_Type"));
				slf4jLogger.info("Selected Dedicated_Network_Type..");
		        WaitForPageToLoad(5000);
		        Thread.sleep(5000);
				break;
			}
			
	       
		}
	slf4jLogger.info(+ System.currentTimeMillis()
			+ "299: Selecting Product Attributes Completed : Private Dedicated Network");

}
catch (Exception e) {
	Assert.fail(System.currentTimeMillis() + "@"
			+ "Error occured while configuring Private Dedicated Network product");
}
return new ProductConfigSteps();
	
}



public ProductConfigSteps selectAttributesPrivateNetworkAccess(String attributeList) throws Exception {
	WebDriver driver = getDriver();
	try{
		if(productConfigPage.address1.isCurrentlyEnabled()){
			Thread.sleep(1000);
			productConfigPage.address1.click();
			productConfigPage.address1List.get(2).click();
			Thread.sleep(10000);
		}
		
		ExpectedConditions.elementToBeClickable(productConfigPage.clearSelections);
		productConfigPage.clearSelections.click();
		Thread.sleep(5000);
	for(int i=1;i<=productConfigPage.smCoreProdFields.size();i++) {
		WebElement prodField = null;
		try{
			 prodField = driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/input"));
			
		}catch (Exception e) {
			slf4jLogger.info("Selected.Attributes..!");
			break;
		}
		String prodID = prodField.getAttribute("id");
		WebElement prod = driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/span/span[1]"));
		ExpectedConditions.elementToBeClickable(prod);
		
		  if(prodID.equals("Network")) {
				prod.click();
				slf4jLogger.info("Select Network ..");
				driver.switchTo().frame(driver.findElement(By.className("k-widget k-window")));
				
				Thread.sleep(5000);
				driver.findElement(By.xpath("//*[@id='RelatedProductScenarioGrid-relNetwork']/div[2]/table/tbody/tr/td[1]/input")).click();
				
				slf4jLogger.info("Selected Network..");
		        WaitForPageToLoad(5000);
		        Thread.sleep(5000);
		        				
			}
		
			
	       
		}
	slf4jLogger.info(+ System.currentTimeMillis()
			+ "299: Selecting Product Attributes Completed : Private Network Access Node");

}
catch (Exception e) {
	Assert.fail(System.currentTimeMillis() + "@"
			+ "Error occured while configuring Private Network Access Node product");
}
return new ProductConfigSteps();
	
}

@Step
public ProductConfigSteps selectAttributesStandAloneCrossConnect(String attributeList,String testID) throws Exception{
	WebDriver driver = getDriver();
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	configKeyValuePair = createConfigKeyValuePair(attributeList);
	try {
		ExpectedConditions.elementToBeClickable(productConfigPage.clearSelections);
	    productConfigPage.clearSelections.click();
		Thread.sleep(5000);
		for(int i=1;i<=productConfigPage.smCoreProdFields.size();i++) {
			WebElement prodField = null;
			try{
				
				 prodField = driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/input"));
				
			}catch (Exception e) {
				slf4jLogger.info("Selected.Attributes..!");
				break;
			}
			String prodID = prodField.getAttribute("id");
			WebElement prod = driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/span/span[1]"));
			ExpectedConditions.elementToBeClickable(prod);
			
			
			
	       if(prodID.equals("Z_End_Service_Type")) {
				prod.click();
				List<WebElement> Z_service = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Z_End_Service_Type")+"']"));
				Thread.sleep(1000);
				Z_service.get(Z_service.size() - 1).click();
		        WaitForPageToLoad(5000);
		        Thread.sleep(5000);
				
			}
			else if(prodID.equals("Cable_Type")) {
				prod.click();
				List<WebElement> cable_type = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Cable_Type")+"']"));
				Thread.sleep(1000);
				cable_type.get(cable_type.size() - 1).click();
		        WaitForPageToLoad(5000);
		        Thread.sleep(5000);
				
			}
			
			
			}
		slf4jLogger.info(testID + ":" + System.currentTimeMillis()
				+ "299: Selecting Product Attributes Completed : Stand Alone Cross Connect");
		Thread.sleep(5000);

	}
	catch (Exception e) {
		Assert.fail(System.currentTimeMillis() + "@"
				+ "Error occured while configuring SAXC produt");
	}
	return new ProductConfigSteps();
	
}


@Step
public  ProductConfigSteps verifyProductReviewPage(String testID) throws Exception{
	try {
		WebDriver driver = getDriver();
		slf4jLogger.info("Verifying product review page....Started");
		Thread.sleep(10000);
		if(testID.equals("2027")) {
			if (productConfigPage.checkboxPrimary.isVisible())
				Assert.fail("primary package checkbox is visible ,which is not expected");
			ExpectedConditions.elementToBeClickable(productConfigPage.checkbox2);
			if (!productConfigPage.checkbox2.isVisible() || !productConfigPage.checkbox2.isPresent())
				Assert.fail("non-primary package checkbox is not visible/clickable ,which is not expected");
			if(productConfigPage.removeSelectedButton.isCurrentlyEnabled())
				Assert.fail("Remove/Selected button is enabled before selecting package ,which is not expected");
			productConfigPage.checkbox2.click();
			Thread.sleep(2000);
			if(!productConfigPage.removeSelectedButton.isCurrentlyEnabled())
				Assert.fail("Remove/Selected button is not enabled after selecting package ,which is not expected");
			productConfigPage.saveproductbutton.click();
			Thread.sleep(2000);
		}
		else if(testID.equals("2045")) {
			
			List<WebElement> AddCopies = driver.findElements(By.xpath("//input[@class='k-formatted-value k-input']"));
			Thread.sleep(200);
			AddCopies.get(0).sendKeys(Keys.ENTER);
			
			WebElement AddCopiesInput = driver
					.findElement(By.xpath("/html/body/div[4]/div[2]/div[2]/div[2]/div[4]/div[2]/table/tbody/tr[1]/td[2]/span/span/input[2]"));
			AddCopiesInput.sendKeys(Keys.CONTROL + "a");
			AddCopiesInput.sendKeys(Keys.DELETE);
			AddCopiesInput.sendKeys("1");
			Thread.sleep(2000);
			productConfigPage.saveproductbutton.click();
			Thread.sleep(2000);
		}
		slf4jLogger.info("Verifying product review page....Completed");
	}
	catch(Exception e) {
		slf4jLogger.info(e.getMessage());
		Assert.fail(System.currentTimeMillis() + "@"
				+ "Error occured while verifying product review page");
	}
	return new ProductConfigSteps();
}

public void selectExistingAddress(String testID)throws Exception {
	
	WebDriver driver = getDriver();
	try {
		Thread.sleep(1000);
		ExpectedConditions.elementToBeClickable(productConfigPage.selectAllCheckBox);
		productConfigPage.selectAllCheckBox.click();
		Thread.sleep(2000);
		slf4jLogger.info("Clicked on select all checkbox..");
		clickOnNext();
	} catch (Exception e) {
	 Assert.fail(System.currentTimeMillis() + "@"
				+ "Error occured while selecting the displayed address");

}
	
}

@Step
public ProductConfigSteps selectAttributesSIPTrunking(String attributeList, String testID) throws InterruptedException {
	WebDriver driver = getDriver();
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	
	try {
		configKeyValuePair = createConfigKeyValuePair(attributeList);
		ExpectedConditions.elementToBeClickable(productConfigPage.clearSelections);
	    productConfigPage.clearSelections.click();
		Thread.sleep(5000);

		for(int i=1;i<=productConfigPage.smCoreProdFields.size();i++) {
			WebElement prodField = null;
			try{
				 prodField = driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/input"));
				
			}catch (Exception e) {
				slf4jLogger.info("Selected.Attributes..!");
				break;
			}
			String prodID = prodField.getAttribute("id");
			WebElement prod = driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/span/span[1]"));
			ExpectedConditions.elementToBeClickable(prod);
			
			if(prodID.equals("Number_of_Simultaneous_Calls")) {
				prod.click();
				List<WebElement> Calls_options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("NoOfSimultaneousCalls")+"']"));
				Thread.sleep(2000);
				Calls_options.get(Calls_options.size() - 1).click();
		        WaitForPageToLoad(6000);
		        Thread.sleep(5000);
				
			}
			
	       else if(prodID.equals("Transport")) {
				prod.click();
				List<WebElement> Transport_options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Transport")+"']"));
				Thread.sleep(2000);
				Transport_options.get(Transport_options.size() - 1).click();
				WaitForPageToLoad(5000);
		        Thread.sleep(5000);
		        i=6;
				
			}
			else if(prodID.equals("Customer_Voice_Equip_Make")) {
				prod.click();
				List<WebElement> Customer_Voice_Equip_Make_options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Customer_Voice_Equip_Make")+"']"));
				Thread.sleep(2000);
				Customer_Voice_Equip_Make_options.get(Customer_Voice_Equip_Make_options.size() - 1).click();
		        WaitForPageToLoad(5000);
		        Thread.sleep(5000);
				
			}
			else if(prodID.equals("Customer_Voice_Equip_Release")) {
				prod.click();
				List<WebElement> Customer_Voice_Equip_Release_options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Customer_Voice_Equip_Release")+"']"));
				Thread.sleep(2000);
				Customer_Voice_Equip_Release_options.get(Customer_Voice_Equip_Release_options.size() - 1).click();
		        WaitForPageToLoad(5000);
		        Thread.sleep(6000);
				break;
			}
			
			}
		slf4jLogger.info(testID + ":" + System.currentTimeMillis()
				+ "299: Selecting Product Attributes Completed : SIP Trunking");

	}
	catch (Exception e) {
		Assert.fail(System.currentTimeMillis() + "@"
				+ "Error occured while configuring SIP Trunking product");
	}
	return new ProductConfigSteps();
	
}

public ProductConfigSteps selectAttributeseLynkEVC(String attributeList, String testID) throws InterruptedException {
	
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	WebDriver driver = getDriver();
	try {
		configKeyValuePair = createConfigKeyValuePair(attributeList);
		if(driver.findElement(By.xpath("//*[@id='AttributeForm']/div[1]/div[2]/table/tbody/tr[3]/td[2]/div/span/span/span[1]")).getText().isEmpty()||
				driver.findElement(By.xpath("//*[@id='AttributeForm']/div[1]/div[2]/table/tbody/tr[3]/td[2]/div/span/span/span[1]")).getText().contains("Select")){
			Thread.sleep(1000);
			productConfigPage.address1.click();
			productConfigPage.address1List.get(2).click();
			Thread.sleep(10000);
		}
		ExpectedConditions.elementToBeClickable(productConfigPage.clearSelections);
	    productConfigPage.clearSelections.click();
		Thread.sleep(5000);
		for(int i=3;i<=productConfigPage.smCoreProdFields.size();i++) {
			WebElement prodField = null;
			try{
				 prodField = driver.findElement(By.xpath("/html/body/div[4]/div[2]/form/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/input"));
				
			}catch (Exception e) {
				slf4jLogger.info("Selected.Attributes..!");
				break;
			}
			String prodID = prodField.getAttribute("id");
			WebElement prod = driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr["+i+"]/td[2]/div/span/span/span[1]"));
			ExpectedConditions.elementToBeClickable(prod);
			
			if(prodID.equals("Destination_Type")) {
				prod.click();
				List<WebElement> Destination_Type_options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Destination_Type")+"']"));
				Thread.sleep(2000);
				Destination_Type_options.get(Destination_Type_options.size() - 1).click();
		        WaitForPageToLoad(6000);
		        Thread.sleep(5000);
				
			}
			
	       else if(prodID.equals("Bandwidth")) {
				prod.click();
				List<WebElement> Bandwidth_options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Bandwidth")+"']"));
				Thread.sleep(2000);
				Bandwidth_options.get(Bandwidth_options.size() - 1).click();
				WaitForPageToLoad(5000);
		        Thread.sleep(5000);
				
			}
			else if(prodID.equals("Destination")) {
				prod.click();
				List<WebElement> Destination_options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Destination")+"']"));
				Thread.sleep(2000);
				Destination_options.get(Destination_options.size() - 1).click();
		        WaitForPageToLoad(5000);
		        Thread.sleep(5000);
				
			}
			else if(prodID.equals("Class")) {
				prod.click();
				List<WebElement> Class_options = driver.findElements(By.xpath("//li[text()='"+configKeyValuePair.get("Class")+"']"));
				Thread.sleep(2000);
				Class_options.get(Class_options.size() - 1).click();
		        WaitForPageToLoad(5000);
		        Thread.sleep(6000);
				break;
			}
			
			}
		slf4jLogger.info(testID + ":" + System.currentTimeMillis()
				+ "299: Selecting Product Attributes Completed : eLynk - EVC");

	}
	catch (Exception e) {
		Assert.fail(System.currentTimeMillis() + "@"
				+ "Error occured while configuring eLynk - EVC product");
	}
	return new ProductConfigSteps();
	
}



public void addClonePackages(String testID) {
	WebDriver driver = getDriver();
	try {
		Thread.sleep(1000);
		ExpectedConditions.elementToBeClickable(productConfigPage.nextbtn1);
		slf4jLogger.info(testID + ":" + System.currentTimeMillis()
		+ "299: Selecting NextButton");
		productConfigPage.nextbtn1.click();
		slf4jLogger.info(testID + ":" + System.currentTimeMillis()
		+ "299: Selecting NextButton");
		ExpectedConditions.elementToBeClickable(productConfigPage.nextbtn2);
		productConfigPage.nextbtn2.click();
		Thread.sleep(5000);
		productConfigPage.addALocation.click();
		if(!(productConfigPage.addLocationAList.size()==2)) {
			 Assert.fail(System.currentTimeMillis() + "@"
						+ "Error occured while verifying the displayed address");
		}
		slf4jLogger.info(testID + ":" + System.currentTimeMillis()
		+ "299: Selecting A address");
		productConfigPage.addLocationAList.get(0).click();
		Thread.sleep(5000);
		slf4jLogger.info(testID + ":" + System.currentTimeMillis()
		+ "299: Selecting Z Address..!");
		productConfigPage.addZLocation.click();
		productConfigPage.addLocationZList.get(0).click();
		productConfigPage.addLocationPairBtn.click();
		Thread.sleep(5000);
		} catch (Exception e) {
	 Assert.fail(System.currentTimeMillis() + "@"
				+ "Error occured while selecting the displayed address");

}
	
}

public ProductConfigSteps editAttributesLocalLoop(String testID, String attributeList) throws Exception {
	WebDriver driver = getDriver();
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	configKeyValuePair = createConfigKeyValuePair(attributeList);
	try {
		WaitForPageToLoad(10000);
		productConfigPage.nextbtn1.click();
		Thread.sleep(5000);
		driver.findElement(By.xpath("//a[text()='Local Loop']")).click();
		productConfigPage.clearSelections.click();
		Thread.sleep(2500);
		productConfigPage.phoneNumber.click();
		productConfigPage.phoneNumber.sendKeys(configKeyValuePair.get("Phone_Number"));
		slf4jLogger.info(testID + ":" + System.currentTimeMillis()
		+ "Entered Phone Number for Local Loop");
		productConfigPage.phoneNumberLabel.click();
		Thread.sleep(2500);
	}
	catch (Exception e) {
		Assert.fail(System.currentTimeMillis() + "@"
				+ "Error occured while configuring Local Loop..!");
	}
	return new ProductConfigSteps();
	
}

@Step
public void clickOnBack() throws Exception {
	WebDriver driver = getDriver();
	Wait<WebDriver> wait = new WebDriverWait(driver, 15000);
	try {
 		
		wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.back));
		productConfigPage.back.click();
		WaitForPageToLoad(4000);
		Thread.sleep(2000);
		WaitForPageToLoad(8000);
		slf4jLogger.info("Clicked on back..");
	} catch (Exception e) {
		try{
			wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("/html/body/div[4]/div[1]/div[5]/div[2]/div[3]/button"))));
			driver.findElement(By.xpath("/html/body/div[4]/div[1]/div[5]/div[2]/div[3]/button")).click();
			WaitForPageToLoad(4000);
			Thread.sleep(2000);
			slf4jLogger.info("Clicked on next..");
		}catch(Exception e1){
		Assert.fail("Error while clicking on next" + "@" + e1.getMessage());
		}
	}
	
}

@Step
public void changeAttributesSDWAN(String attributesList)  throws Exception{
	try {
		Thread.sleep(10000);
		WebDriver driver = getDriver();
		Map<String, String> configKeyValuePair = new HashMap<String, String>();
		configKeyValuePair = createConfigKeyValuePair(attributesList);
		driver.findElement(By.xpath("//*[@id=\"ProductGrid\"]/div[2]/table/tbody/tr[1]/td[1]/div/div[1]/span[2]/a")).click();
		Thread.sleep(5000);
		productConfigPage.packageHeaderLabel.click();
		JavascriptExecutor js = (JavascriptExecutor) driver;js.executeScript("window.scrollBy(0,280)", "");
		driver.switchTo().defaultContent();
		driver.switchTo().frame(driver.findElement(By.tagName("iframe")));
		if(configKeyValuePair.get("access_one")!=null) {
			ExpectedConditions.elementToBeClickable(productConfigPage.accessOne);
		  	
			driver.findElement(By.xpath("//*[@id=\"RelatedProductSearch-relAccess_One_Connectivity_DIA\"]/span")).click();
			
			WaitForPageToLoad(5000);
			Thread.sleep(5000);
			driver.findElement(By.xpath("/html/body/div[119]/div[2]/div/div/div[1]/div[2]/div[2]/table/tbody/tr[2]/td[1]/input")).click();
			Thread.sleep(10000);
			slf4jLogger.info("selected create new package");
		}
		if(configKeyValuePair.get("Circuit_Type")!=null) {
			Thread.sleep(2000);
			driver.findElement(By.xpath("//*[@id=\"AttributeForm\"]/div[3]/div[2]/table/tbody/tr[15]/td[2]/div/span/span/span[1]")).click();
			WaitForPageToLoad(5000);
			Thread.sleep(1000);
			List<WebElement> bandwidth = driver.findElements(By.xpath("//li[text()='" +configKeyValuePair.get("Circuit_Type") +"']"));
			Thread.sleep(3000);
			bandwidth.get(bandwidth.size() - 1).click();	
	        WaitForPageToLoad(5000);
	        Thread.sleep(5000);
		}
		
		if(configKeyValuePair.get("Billing_Method")!=null) {
	        ExpectedConditions.elementToBeClickable(productConfigPage.billingMethod);
			productConfigPage.billingMethod.click();
	       
			Thread.sleep(1000);
			List<WebElement> bandwidth = driver.findElements(By.xpath("//li[text()='" +configKeyValuePair.get("Billing_Method") +"']"));
			Thread.sleep(3000);
			bandwidth.get(bandwidth.size() - 1).click();	
	        WaitForPageToLoad(5000);
	        Thread.sleep(5000);
       }
		if(configKeyValuePair.get("Inside_Wiring")!=null) {
	        ExpectedConditions.elementToBeClickable(productConfigPage.insideWiring);
		productConfigPage.insideWiring.click();
	       
			WaitForPageToLoad(5000);
			Thread.sleep(1000);
			List<WebElement> billingextns = driver.findElements(By.xpath("//li[text()='Standard Delivery - To the MPoE (Customer Provided)']"));
			Thread.sleep(3000);
			billingextns.get(billingextns.size() - 1).click();
	        WaitForPageToLoad(5000);
	        Thread.sleep(3000);
		}
       
       
       clickOnNext();
       Thread.sleep(10000);
       
       driver.findElement(By.xpath("//*[@id=\"ProductGrid\"]/div[2]/table/tbody/tr[3]/td[1]/div/div[1]/span[2]/a")).click();
      
       Thread.sleep(10000);
       productConfigPage.packageHeaderLabel.click();
       Thread.sleep(2000);
       if(configKeyValuePair.get("access_one_ha")!=null) {
			ExpectedConditions.elementToBeClickable(productConfigPage.accessOneHA);
		  	productConfigPage.accessOneHA.click();
		  	Thread.sleep(1000);
		  	slf4jLogger.info(configKeyValuePair.get("access_one_ha"));
		  	List<WebElement> ha = driver.findElements(By.xpath("//li[text()='" +configKeyValuePair.get("access_one_ha") +"']"));
			Thread.sleep(3000);
			for(int i=0;i<ha.size();i++) {
				if(ha.get(i).getText().equals(configKeyValuePair.get("access_one_ha"))) 
					{
					ha.get(i).click();
					break;
					}
			}
				
	        WaitForPageToLoad(5000);
	        Thread.sleep(5000);
			slf4jLogger.info("selected dia");
		}
       if(configKeyValuePair.get("A1Type_ha")!=null) {
			ExpectedConditions.elementToBeClickable(productConfigPage.a1TypeHA);
		  	productConfigPage.a1TypeHA.click();
		  	Thread.sleep(1000);
		  	List<WebElement> ha = driver.findElements(By.xpath("//li[text()='" +configKeyValuePair.get("A1Type_ha") +"']"));
			Thread.sleep(3000);
			ha.get(ha.size() - 1).click();	
	        WaitForPageToLoad(5000);
	        Thread.sleep(5000);
			slf4jLogger.info("selected type");
		}
	}
	
	catch (Exception e) {
		slf4jLogger.info(e.getMessage());
		slf4jLogger.info("sdwan Product configuration-edit failed..");
		Assert.fail(e.getMessage());
	}
	}

@Step
public void checkBillingOption(String testID, String product) throws Exception {
	slf4jLogger.info("Checking Billing Option...!!!");
	WebDriver driver = getDriver();
	Thread.sleep(7000);
	Wait<WebDriver> wait = new WebDriverWait(driver, 10000);
	wait.until(ExpectedConditions.visibilityOfElementLocated(By.className("pageDescription")));
	try {
		if(product.equalsIgnoreCase("HSIP Service")) {
			wait.until(ExpectedConditions.visibilityOf(productConfigPage.hsipServiceCDRText));
			if(productConfigPage.hsipServiceCDRText.getText().equalsIgnoreCase("Billing Type = CDR")) {
				slf4jLogger.info("Proceed");
			}
			else {
				slf4jLogger.info("Test fail..!!");
				System.exit(0);
			}
		}
		else if(product.equalsIgnoreCase("DIA BA")) {
			slf4jLogger.info("gonna wait");
			wait.until(ExpectedConditions.visibilityOf(productConfigPage.diaBACDRText));
			slf4jLogger.info(productConfigPage.diaBACDRText.getText());
			if(productConfigPage.diaBACDRText.getText().contains("CDR")) {
				slf4jLogger.info("Proceed");
			}
			else {
				slf4jLogger.info("Test fail..!!");
				System.exit(0);
			}
		}
		else if(product.equalsIgnoreCase("DIA")) {
			Thread.sleep(6000);
			if(!(productConfigPage.diaBillingType.getText().equalsIgnoreCase("CDR"))){
				ExpectedConditions.elementToBeClickable(productConfigPage.diaBillingType);
				WaitForPageToLoad(5000);
				productConfigPage.diaBillingType.sendKeys("Commit plus Burst ");
				WaitForPageToLoad(5000);
				Thread.sleep(4000);
				slf4jLogger.info("selected billing method");
			}
			else {
				slf4jLogger.info("DIA Billing Method is Flat Rate..!!");
				Thread.sleep(3000);
			}
		}
		else if(product.equalsIgnoreCase("HSIP BA")) {
			Thread.sleep(6000);
			wait.until(ExpectedConditions.visibilityOf(productConfigPage.hsipBALink));
			productConfigPage.hsipBALink.click();
			Thread.sleep(5000);
			wait.until(ExpectedConditions.visibilityOf(productConfigPage.cdrLabelHSIPBA));
			Assert.assertTrue("Element does not contain CDR", productConfigPage.cdrLabelHSIPBA.getText().contains("CDR"));
			Thread.sleep(6000);
			productConfigPage.cdrTextHSIPBA.click();
			WaitForPageToLoad(5000);
			Thread.sleep(4000);
			slf4jLogger.info("HSIP BA Method CDR Value was zero..!!! Updated..!!!");
			do {
				try {
					slf4jLogger.info("try block");
					wait.until(ExpectedConditions.visibilityOf(productConfigPage.nextbtn1));
					productConfigPage.nextbtn1.click();
				}
				catch(Exception e) {
					slf4jLogger.info("catch block");
					Thread.sleep(5000);
					driver.findElement(By.xpath("/html/body/div[4]/div[3]/div[4]/div[2]/button")).click();
				}
				slf4jLogger.info("Clicked Next..!!!");
			}
			while(productConfigPage.nextbtn1.isVisible());
		}
	}
	catch (Exception e) {
		slf4jLogger.info(e.getMessage());
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		Assert.fail(e.getMessage());
	}
	
}


@Step
public  ProductConfigPage selectAttributesIPVPNBA(String attributeList) throws InterruptedException{
	WebDriver driver = getDriver();
	try {
		slf4jLogger.info("Product configuration for IPVPN Billing Arrangement Product");
		String[] attributes =  attributeList.split(";");
		WaitForPageToLoad(4000);
		
		for(int i=0;i<attributes.length;i++){
		  String[] keyValuePair =  attributes[i].split(":");
			  String key = keyValuePair[0];
			  String value = keyValuePair[1];
			  WaitForPageToLoad(5000);	
			driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
				
			if(key.equals("BA_Name")) {
				WaitForPageToLoad(5000);
				ExpectedConditions.elementToBeClickable(productConfigPage.ipvpnBAName);
				productConfigPage.ipvpnBAName.sendKeys(value);
				WaitForPageToLoad(5000);
				Thread.sleep(3000);
				slf4jLogger.info("Entered value for BA Name");
			  }
			  else if(key.equals("CIR")) {
				 WaitForPageToLoad(5000);
				 Thread.sleep(3000);
				 ExpectedConditions.elementToBeClickable(productConfigPage.ipvpnCIR);
				productConfigPage.ipvpnCIR.sendKeys(value);
				WaitForPageToLoad(5000);
				Thread.sleep(1000);
				slf4jLogger.info("Entered value for IPVPN Committed Information Rate");
			  }	  
		}
		slf4jLogger.info("Ip VPN Product configuration success ");
	}
	catch (Exception e) {
		slf4jLogger.info(e.getMessage());
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		Assert.fail(e.getMessage());
		
	}
	return new ProductConfigPage();
	
}


@Step
public  ProductConfigPage IPVPNbillingreadOnly(String attributeList) throws InterruptedException{
	WebDriver driver = getDriver();
	Boolean BPD = false;
	Boolean BP = false;
	try {
		if(!(productConfigPage.ipvpnBPD.isEnabled())) {
			BPD = true;
			slf4jLogger.info("Billing Direction is read only");
		}
		if(!(productConfigPage.ipvpnBP.isEnabled())) {
			BP = true;
			slf4jLogger.info("Billing Percentile is read only");
		}
		assertTrue("IP VPN Billing Direction and the Billing Percentile fields are editable", (BPD = true)&&(BP = true));
		slf4jLogger.info("IP VPN Billing Direction and the Billing Percentile fields are read only..!! ");
	}
	catch (Exception e) {
		slf4jLogger.info(e.getMessage());
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		Assert.fail(e.getMessage());
		
	}
	return new ProductConfigPage();
	
}


@Step
public  ProductConfigPage addNewCAMMSATermCommit(String testID) throws InterruptedException{
	WebDriver driver = getDriver();
	try {
		slf4jLogger.info("Click Add New for CAM - Managed Service Anywhere Term Commit");
		Thread.sleep(6000);
		productConfigPage.addNewCAMMSATermCommit.click();
		slf4jLogger.info("Add New click success ");
	}
	catch (Exception e) {
		slf4jLogger.info(e.getMessage());
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		Assert.fail(e.getMessage());
		
	}
	return new ProductConfigPage();
	
}


@Step
public String spendCommitDefault(String testID) throws InterruptedException{
	WebDriver driver = getDriver();
	String min=null;
	
	try {
		slf4jLogger.info("Spend Commit Field..!!");
		Thread.sleep(6000);
		if(productConfigPage.spendCommitField.getValue()!=null) {
			slf4jLogger.info("Spend Commit Field has a default value");
		}
		productConfigPage.spendCommitField.click();
		slf4jLogger.info("value:" +productConfigPage.spendCommitField.getValue());
		min = productConfigPage.spendCommitField.getValue();
		
		slf4jLogger.info("Method Success..!!");
	}
	catch (Exception e) {
		slf4jLogger.info(e.getMessage());
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		Assert.fail(e.getMessage());
		
	}
	return min;
}



@Step
public  ProductConfigPage spendCommitGreaterValue(String testID, String min) throws InterruptedException{
	WebDriver driver = getDriver();
	try {
		slf4jLogger.info("Spend Commit - Greater value..!!");
		Thread.sleep(6000);
		productConfigPage.spendCommitField.clear();
		productConfigPage.spendCommitField.sendKeys(String.valueOf(Integer.parseInt(min)+500));
		Thread.sleep(10000);
		productConfigPage.spendCommitLabel.click();
		ExpectedConditions.elementToBeClickable(productConfigPage.saveBtnSC);
		productConfigPage.saveBtnSC.click();
		slf4jLogger.info("Spend Commit Field is greater than the default value..!!! Success..!!");
	}
	catch (Exception e) {
		slf4jLogger.info(e.getMessage());
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		Assert.fail(e.getMessage());
		
	}
	return new ProductConfigPage();
	
}


@Step
public  ProductConfigPage spendCommitLessValue(String testID, String min) throws InterruptedException{
	WebDriver driver = getDriver();
	try {
		slf4jLogger.info("Spend Commit - Less value..!!");
		Thread.sleep(6000);
		productConfigPage.spendCommitField.clear();
		productConfigPage.spendCommitField.sendKeys(String.valueOf(Integer.parseInt(min)-500));
		Thread.sleep(10000);
		ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[contains(text(),'Spend Commit must be at least 1000')]"));
		productConfigPage.spendCommitLabel.click();
		ExpectedConditions.elementToBeClickable(productConfigPage.saveBtnSC);
		productConfigPage.saveBtnSC.click();
		slf4jLogger.info("Entered Spend Commit was less and auto-corrected to the default value..!!! Success..!!");
	}
	catch (Exception e) {
		slf4jLogger.info(e.getMessage());
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		Assert.fail(e.getMessage());
		
	}
	return new ProductConfigPage();
	
}

@Step
public ProductConfigSteps verifyAddNewOrDeleteButton(String testid) {
	try {
		slf4jLogger.info("Verifying Add New Button or Delete Button for optional related product package of predeployed product");
		WebDriver driver = getDriver();
		Wait<WebDriver> wait = new WebDriverWait(driver, 10000);
		wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.changeLabelIPVPNlogical));
		productConfigPage.changeLabelIPVPNlogical.click();
		WaitForPageToLoad(10000);
		
		if(testid.equals("23855")) {
			if(productConfigPage.addNewBtn.getAttribute("disabled").equals("true")) 
				slf4jLogger.info("Add New Button is disabled...!!!");
			else
				Assert.fail("verification for Add New Button for optional related product package of predeployed product failed!!");
		}
		else if(testid.equals("23858")) {
			if(productConfigPage.addNewBtn.getAttribute("disabled").equals("false")) 
				slf4jLogger.info("Add New Button is enabled...!!!");
			else
				Assert.fail("verification for Add New Button for optional related product package of predeployed product failed!!");
		}
		else if(testid.equals("23856")) {
			if(productConfigPage.delete.getAttribute("disabled").equals("true")) 
				slf4jLogger.info("Delete Button is disabled...!!!");
			else
				Assert.fail("verification for Delete Button for optional related product package of predeployed product failed!!");
		}
		else if(testid.equals("23859")) {
			if(productConfigPage.delete.getAttribute("disabled").equals("false")) 
				slf4jLogger.info("Delete Button is enabled...!!!");
			else
				Assert.fail("verification for Delete Button for optional related product package of predeployed product failed!!");
		}
	}
	catch (Exception e) {
		Assert.fail("verification for Add New Button or Delete Button for optional related product package of predeployed product failed!!"+ e.getMessage());
	}
	return new ProductConfigSteps();
	
}

@Step
public ProductConfigSteps verifyAdditionalCopiesForPredeployNonPredeployScenario(String testid) {
	try {
		slf4jLogger.info("Verifying Additional Copies for Predeployed or Non Predeployed Scenario");
		WebDriver driver = getDriver();
		Wait<WebDriver> wait = new WebDriverWait(driver, 10000);
		wait.until(ExpectedConditions.visibilityOf(productConfigPage.packageDetailsPanel));
		productConfigPage.packageDetailsPanel.waitUntilClickable();
		productConfigPage.packageDetailsPanel.click();
		wait.until(ExpectedConditions.visibilityOf(productConfigPage.addCopiesInput));
		if(testid.equals("23860")) {
			if(productConfigPage.addCopiesInput.getAttribute("disabled").equals("true")) 
				slf4jLogger.info("Additional Copies is disabled...!!!");
			else
				Assert.fail("verification for Additional Copies for Predeployed Scenario failed!!");
		}
		else if(testid.equals("23861")) {
			if(productConfigPage.addCopiesInput.getAttribute("disabled").equals("false")) 
				slf4jLogger.info("Additional Copies Button is enabled...!!!");
			else
				Assert.fail("verification for Additional Copies for Non Predeployed Scenario failed!!");
		}
		
	}
	catch (Exception e) {
		Assert.fail("Verification of Additional Copies for Predeployed or Non Predeployed Scenario failed!!"+ e.getMessage());
	}
	return new ProductConfigSteps();
	
}	

@Step
public ProductConfigSteps verifyAllAttributesAreInCorrectState(String testid) {
	try {
		slf4jLogger.info("Verifying All Attributes of DIA package are not in read-only state");
		boolean res1=false, res2=false, res3=false;
		WebDriver driver = getDriver();
		Wait<WebDriver> wait = new WebDriverWait(driver, 10000);
		wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.bandwidth));
		wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.billingExtension));
		wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.diaBillingType));
		res1 = productConfigPage.bandwidth.isPresent();
		res2 = productConfigPage.billingExtension.isPresent();
		res3 = productConfigPage.diaBillingType.isPresent();
		if(res1 && res2 && res3) 
			slf4jLogger.info("verification for All Attributes of DIA package are not in read-only state passed...");
		else
			Assert.fail("Verification for All Attributes of DIA package are not in read-only state failed!!");	
	}
	catch (Exception e) {
		Assert.fail("Verification for All Attributes of DIA package are not in read-only state failed!!"+ e.getMessage());
	}
	return new ProductConfigSteps();
	
}

@Step
public  ProductConfigPage selectAttributesHybridConnectivity(String testid, String attributeList) throws InterruptedException{
	WebDriver driver = getDriver();
	try {
		slf4jLogger.info("Product configuration for Hybrid Connectivity Product");
		Map<String, String> configKeyValuePair = new HashMap<String, String>();
		configKeyValuePair = createConfigKeyValuePair(attributeList);
			  
		if(configKeyValuePair.get("ServiceType")!=null) {
			ExpectedConditions.elementToBeClickable(productConfigPage.hybridconnServiceType);
			productConfigPage.hybridconnServiceType.click();
			WaitForPageToLoad(5000);
			Thread.sleep(1000);
			productConfigPage.hybridconnServiceType.sendKeys(configKeyValuePair.get("ServiceType"));
			slf4jLogger.info("Selected Service Type ..");
			Thread.sleep(3000);
		}
		if(configKeyValuePair.get("AccessQuantity")!=null) {
			ExpectedConditions.elementToBeClickable(productConfigPage.hybridconnAccessQuantity);
			productConfigPage.hybridconnAccessQuantity.click();
			WaitForPageToLoad(5000);
			Thread.sleep(1000);
			productConfigPage.hybridconnAccessQuantity.sendKeys(configKeyValuePair.get("AccessQuantity"));
			slf4jLogger.info("Selected Access_Quantity ..");
			Thread.sleep(3000);
		}
		if(configKeyValuePair.get("AccessOneType")!=null) {
			ExpectedConditions.elementToBeClickable(productConfigPage.hybridconnAccessOneType);
			productConfigPage.hybridconnAccessOneType.click();
			WaitForPageToLoad(5000);
			Thread.sleep(1000);
			productConfigPage.hybridconnAccessOneType.sendKeys(configKeyValuePair.get("AccessOneType"));
			slf4jLogger.info("Selected Access One Type ..");
			Thread.sleep(3000);
		}
		if(configKeyValuePair.get("AccessOneOption")!=null) {
			ExpectedConditions.elementToBeClickable(productConfigPage.hybridconnAccessOneTypedropdown);
			productConfigPage.hybridconnAccessOneTypedropdown.click();
			WaitForPageToLoad(5000);
			Thread.sleep(1000);
			productConfigPage.hybridconnAccessOneTypeCreateNewOption.click();
			slf4jLogger.info("Selected AccessOneOption ..");
			Thread.sleep(3000);
		}
		if(configKeyValuePair.get("AccessTwoType")!=null) {
			ExpectedConditions.elementToBeClickable(productConfigPage.hybridconnAccessTwoType);
			productConfigPage.hybridconnAccessTwoType.click();
			WaitForPageToLoad(5000);
			Thread.sleep(1000);
			productConfigPage.hybridconnAccessTwoType.sendKeys(configKeyValuePair.get("AccessTwoType"));
			slf4jLogger.info("Selected Access Two Type ..");
			Thread.sleep(3000);
		}
		if(configKeyValuePair.get("AccessTwoOption")!=null) {
			ExpectedConditions.elementToBeClickable(productConfigPage.hybridconnAccessTwoTypedropdown);
			productConfigPage.hybridconnAccessTwoTypedropdown.click();
			WaitForPageToLoad(5000);
			Thread.sleep(1000);
			productConfigPage.hybridconnAccessTwoTypeCreateNewOption.click();
			slf4jLogger.info("Selected AccessTwoOption ..");
			Thread.sleep(3000);
		}
		if(configKeyValuePair.get("CPE")!=null) {
			ExpectedConditions.elementToBeClickable(productConfigPage.hybridconnCPE);
			productConfigPage.hybridconnCPE.click();
			WaitForPageToLoad(5000);
			Thread.sleep(1000);
			productConfigPage.hybridconnCPE.sendKeys(configKeyValuePair.get("CPE"));
			slf4jLogger.info("Selected CPE Package Type ..");
			Thread.sleep(3000);
		}
		if(configKeyValuePair.get("OnsiteInstall")!=null) {
			ExpectedConditions.elementToBeClickable(productConfigPage.sm_OnsiteInstallation);
			productConfigPage.sm_OnsiteInstallation.click();
			WaitForPageToLoad(5000);
			Thread.sleep(1000);
			productConfigPage.sm_OnsiteInstallation.sendKeys(configKeyValuePair.get("OnsiteInstall"));
			slf4jLogger.info("Selected Onsite Installation ..");
			Thread.sleep(3000);
		}
	
	    if(configKeyValuePair.get("AccessOneTypeChange")!=null) {
	    	slf4jLogger.info("Click on Next Button");
			Thread.sleep(1000);
	    	ExpectedConditions.elementToBeClickable(productConfigPage.nextbtn1);
	    	productConfigPage.nextbtn1.click();
	    	WaitForPageToLoad(10000);
	    	ExpectedConditions.elementToBeClickable(productConfigPage.hybridConnectivity);
	    	productConfigPage.hybridConnectivity.click();
	    	slf4jLogger.info("Clicked on Hybrid Connectivity to edit");
			WaitForPageToLoad(5000);
			Thread.sleep(3000);
			ExpectedConditions.elementToBeClickable(productConfigPage.hybridconnAccessOneTypedropdown);
			productConfigPage.hybridconnAccessOneTypedropdown.click();
			WaitForPageToLoad(5000);
			Thread.sleep(1000);
			productConfigPage.hybridconnAccessOneTypeCreateNewOption.click();
			slf4jLogger.info("Selected AccessOneOption as Create New Package ..");
			Thread.sleep(3000);
	    	ExpectedConditions.elementToBeClickable(productConfigPage.hybridconnAccessOneType);
			productConfigPage.hybridconnAccessOneType.click();
			WaitForPageToLoad(5000);
			Thread.sleep(1000);
			productConfigPage.hybridconnAccessOneType.sendKeys(configKeyValuePair.get("AccessOneTypeNew"));
			slf4jLogger.info("Changed Access one type to BIA  ..");
			Thread.sleep(3000);
		}
		slf4jLogger.info("Hybrid Connectivity Product configuration success ");
	}
	catch (Exception e) {
		slf4jLogger.info("Hybrid Connectivity Product configuration failed.... "+e.getMessage());
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		Assert.fail("Hybrid Connectivity Product configuration failed... "+e.getMessage());
		
	}
	return new ProductConfigPage();
}

@Step
public  ProductConfigPage selectAttributesSwitchlessLD(String testid, String attributeList) throws InterruptedException{
	WebDriver driver = getDriver();
	try {
		slf4jLogger.info("Product configuration for Switchless LD 1+/8XX Product");
		Map<String, String> configKeyValuePair = new HashMap<String, String>();
		configKeyValuePair = createConfigKeyValuePair(attributeList);
		ExpectedConditions.elementToBeClickable(productConfigPage.address1);
		if(productConfigPage.address1.isPresent()){
			Thread.sleep(1000);
			productConfigPage.address1.click();
			slf4jLogger.info(productConfigPage.address1List.get(2).getText());
			productConfigPage.address1List.get(2).click();
			Thread.sleep(2000);
		}
		if(configKeyValuePair.get("AdditionalMOU")!=null) {
			ExpectedConditions.elementToBeClickable(productConfigPage.estimatedAdditionalMOU);
			productConfigPage.estimatedAdditionalMOU.click();
			WaitForPageToLoad(5000);
			Thread.sleep(1000);
			productConfigPage.estimatedAdditionalMOU.sendKeys(configKeyValuePair.get("AdditionalMOU"));
			driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[2]/td[3]")).click();  //click somewhere outside
			slf4jLogger.info("Selected Estimated Additional MOU ..");
			Thread.sleep(3000);
		}
		if(configKeyValuePair.get("ChangeUsageRates")!=null) {
			String old_ExtMRC_Intrastate = productConfigPage.estMRCIntraprice.getText();
			String old_ExtMRC_Interstate = productConfigPage.estMRCInterprice.getText();
			String[] old_EstMRCs = {old_ExtMRC_Intrastate,old_ExtMRC_Interstate};
			if(configKeyValuePair.get("AdjustedIntraRate")!=null) {
				ExpectedConditions.elementToBeClickable(productConfigPage.adjustedIntraRate);
				productConfigPage.adjustedIntraRate.click();
				WaitForPageToLoad(5000);
				Thread.sleep(1000);
				productConfigPage.adjustedIntraRate.sendKeys(configKeyValuePair.get("AdjustedIntraRate"));
				slf4jLogger.info("Changed Adjusted Intrastate Rate ..");
				Thread.sleep(3000);
				
				if(configKeyValuePair.get("percentOfMOUIntraRate")!=null) {
					ExpectedConditions.elementToBeClickable(productConfigPage.percentOfMOUIntraRate);
					productConfigPage.percentOfMOUIntraRate.click();
					WaitForPageToLoad(5000);
					Thread.sleep(1000);
					productConfigPage.percentOfMOUIntraRate.sendKeys(configKeyValuePair.get("percentOfMOUIntraRate"));
					slf4jLogger.info("Changed % Of MOU Intrastate ..");
					Thread.sleep(3000);
			    }
			}
		    if(configKeyValuePair.get("AdjustedInterRate")!=null) {
		    	ExpectedConditions.elementToBeClickable(productConfigPage.adjustedInterRate);
				productConfigPage.adjustedInterRate.click();
				WaitForPageToLoad(5000);
				Thread.sleep(1000);
				productConfigPage.adjustedInterRate.sendKeys(configKeyValuePair.get("AdjustedInterRate"));
				slf4jLogger.info("Changed Adjusted Interstate Rate ..");
				Thread.sleep(3000);
				
				if(configKeyValuePair.get("percentOfMOUInterRate")!=null) {
					ExpectedConditions.elementToBeClickable(productConfigPage.percentOfMOUInterRate);
					productConfigPage.percentOfMOUInterRate.click();
					WaitForPageToLoad(5000);
					Thread.sleep(1000);
					productConfigPage.percentOfMOUInterRate.sendKeys(configKeyValuePair.get("percentOfMOUInterRate"));
					slf4jLogger.info("Changed % Of MOU Interstate ..");
					Thread.sleep(3000);
				}
			}
		   
		}
	}
	catch (Exception e) {
		slf4jLogger.info("Switchless LD 1+/8XX Product configuration failed.... "+e.getMessage());
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		Assert.fail("Switchless LD 1+/8XX Product configuration failed... "+e.getMessage());
		
	}
	return new ProductConfigPage();
}

public String[] verifyExtMRCPrice(String[] oldestMRCs) {
	WebDriver driver = getDriver();
	String new_estMRCIntra = productConfigPage.estMRCIntraprice.getText();
	String new_estMRCInter = productConfigPage.estMRCInterprice.getText();
	String[] EstMRCs = {new_estMRCIntra,new_estMRCInter};
	
	if(new_estMRCIntra.equals(oldestMRCs[0]) && new_estMRCInter.equals(oldestMRCs[1]))
		Assert.fail("Est. MRC not gets updated after changing the % of MOU and Adjusted Interstate and Intrastate Rate...Failed");
	
	slf4jLogger.info("Est. MRC not gets updated after changing the % of MOU and Adjusted Interstate and Intrastate Rate...Success");
	
	return EstMRCs;	
    
}

@Step
public void verifyMRCNRCPricing(String testID) {
	WebDriver driver = getDriver();
	WaitForPageToLoad(10000);
	Wait<WebDriver> wait = new WebDriverWait(driver, 10000);
	boolean res1=false,res2=false;
	if(testID.equals("2043")) {
		for(int i=2;i<=3;i++) {
			WebElement element = driver.findElement(By.xpath(".//*[@id='ProductGrid']/div[2]/table/tbody/tr["+i+"]/td[1]/div/div[1]/span[2]/a"));
			wait.until(ExpectedConditions.elementToBeClickable(element));
			element.click();
			WaitForPageToLoad(10000);
			wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.displayPricingButton));
			productConfigPage.displayPricingButton.click();
			
			res1 = productConfigPage.internetUnitAdjustedMRC.getText().equals("$0.00");
			res2 = productConfigPage.internetUnitAdjustedMRC.getText().equals("$0.00");
			
			if(res1 && res2)
				Assert.fail("Getting Invalid values of MRC and NRC for Internet Transport and Managed Router");
			
			slf4jLogger.info("Getting Valid values of MRC and NRC for Internet Transport and Managed Router");
		
		}
	}
}


@Step
public void editConfigurationUNIbandwidth(String bandwidth2) throws InterruptedException {
try {
	slf4jLogger.info("inside Edit Configurations  method..");
	WebDriver driver = getDriver();
	ExpectedConditions.elementToBeClickable(productConfigPage.uniBandwidth);
	productConfigPage.uniBandwidth.click();
	productConfigPage.uniBandwidth.sendKeys(bandwidth2);
	WaitForPageToLoad(5000);
	Thread.sleep(1000);
	productConfigPage.uniBandwidthLabel.click();
	WaitForPageToLoad(5000);
    Thread.sleep(5000);
    slf4jLogger.info("selected UNI_Bandwidth");

	}
catch (Exception e) {
	slf4jLogger.info(e.getMessage());
	System.exit(0);
}

}


@Step
public ProductConfigSteps prodConfigSDWAN(String attributeList, String testID) throws Exception {
	WebDriver driver = getDriver();
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	configKeyValuePair = createConfigKeyValuePair(attributeList);
	Thread.sleep(4000);
	try {
		slf4jLogger.info("Product configuration for Product");
		String[] attributes =  attributeList.split(";");
		WaitForPageToLoad(5000);
		
		  for(int i=0;i<attributes.length;i++){
			   String[] keyValuePair =  attributes[i].split(":");
				  String key = keyValuePair[0];
				  String value = keyValuePair[1];
				  WaitForPageToLoad(6000);	
				  driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
	
					if(key.equals("Access_One_Type")) {
						WaitForPageToLoad(10000);
				        Thread.sleep(10000);
						slf4jLogger.info("Access One Type method - SD WAN");
						ExpectedConditions.elementToBeClickable(productConfigPage.accessOneTypelistbox);
						productConfigPage.accessOneTypelistbox.click();
						productConfigPage.accessOneTypelistbox.sendKeys(value.trim());
						WaitForPageToLoad(15000);
				        Thread.sleep(7000);
				        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[11]/td[1]/label")).click();
				        Thread.sleep(6000);
				        slf4jLogger.info("selected Access One Type method - SD WAN");
					}
					
					else if(key.equals("A1Type")) {
						WaitForPageToLoad(10000);
				        Thread.sleep(10000);
						slf4jLogger.info("A1Type method - SD WAN");
						ExpectedConditions.elementToBeClickable(productConfigPage.a1Typelistbox);
						productConfigPage.a1Typelistbox.click();
						productConfigPage.a1Typelistbox.sendKeys(value.trim());
						WaitForPageToLoad(15000);
				        Thread.sleep(7000);
				        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[12]/td[1]/label")).click();
				        Thread.sleep(6000);
				        slf4jLogger.info("selected A1Type method - SD WAN");
						}
					
					else if(key.equals("Vendor")) {
						WaitForPageToLoad(10000);
				        Thread.sleep(10000);
						slf4jLogger.info("Vendor method - SD WAN");
						ExpectedConditions.elementToBeClickable(productConfigPage.vendorListbox);
						productConfigPage.vendorListbox.click();
						productConfigPage.vendorListbox.sendKeys(value.trim());
						WaitForPageToLoad(15000);
				        Thread.sleep(7000);
				        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[1]/td[1]/label")).click();
				        Thread.sleep(6000);
				        slf4jLogger.info("selected Vendor method - SD WAN");
					}
					
					else if(key.equals("Transport_Speed")) {
						WaitForPageToLoad(10000);
				        Thread.sleep(10000);
						slf4jLogger.info("Transport Speed method - SD WAN");
						ExpectedConditions.elementToBeClickable(productConfigPage.transportSpeedListbox);
						productConfigPage.transportSpeedListbox.click();
						productConfigPage.transportSpeedListbox.sendKeys(value.trim());
						WaitForPageToLoad(15000);
				        Thread.sleep(7000);
				        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[7]/td[1]/label")).click();
				        Thread.sleep(6000);
				        slf4jLogger.info("selected Transport Speed method - SD WAN");
					}
				
					else if(key.equals("Bundle")) {
						WaitForPageToLoad(10000);
				        Thread.sleep(10000);
						slf4jLogger.info("Bundle method - SD WAN");
						ExpectedConditions.elementToBeClickable(productConfigPage.bundleListbox);
						productConfigPage.bundleListbox.click();
						productConfigPage.bundleListbox.sendKeys(value.trim());
						WaitForPageToLoad(15000);
				        Thread.sleep(7000);
				        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[8]/td[1]/label")).click();
				        Thread.sleep(6000);
				        slf4jLogger.info("selected Bundle method - SD WAN");
					}
					
					
					else if(key.equals("CPE_Device_Model")) {
						WaitForPageToLoad(10000);
				        Thread.sleep(10000);
						slf4jLogger.info("CPE Device Model method - SD WAN");
						ExpectedConditions.elementToBeClickable(productConfigPage.cpeDeviceModelListbox);
						productConfigPage.cpeDeviceModelListbox.click();
						productConfigPage.cpeDeviceModelListbox.sendKeys(value.trim());
						WaitForPageToLoad(15000);
				        Thread.sleep(7000);
				        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[10]/td[1]/label")).click();
				        Thread.sleep(6000);
				        slf4jLogger.info("selected CPE Device Model method - SD WAN");
					}
						
					else if(key.equals("relAccess_One_Connectivity_DIA")) {
						WaitForPageToLoad(10000);
				        Thread.sleep(10000);
						slf4jLogger.info("relAccess One Connectivity DIA method - SD WAN");
						ExpectedConditions.elementToBeClickable(productConfigPage.accessOne);
						productConfigPage.accessOne.click();
						productConfigPage.accessOne.sendKeys(value.trim());
						WaitForPageToLoad(15000);
				        Thread.sleep(7000);
				        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[13]/td[1]/label")).click();
				        Thread.sleep(6000);
				        slf4jLogger.info("selected relAccess One Connectivity DIA method - SD WAN");    
					}
			       else if(key.equals("Access_Two_Type")) {
						WaitForPageToLoad(10000);
				        Thread.sleep(10000);
						slf4jLogger.info("Access Two Type method - SD WAN");
						ExpectedConditions.elementToBeClickable(productConfigPage.accessTwoTypelistbox);
						productConfigPage.accessTwoTypelistbox.click();
						productConfigPage.accessTwoTypelistbox.sendKeys(value.trim());
						WaitForPageToLoad(15000);
				        Thread.sleep(7000);
				        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[15]/td[1]/label")).click();
				        Thread.sleep(6000);
				        slf4jLogger.info("selected Access Two Type method - SD WAN");
					}
					else if(key.equals("Access_Two_Type_Bandwidth")) {
						WaitForPageToLoad(10000);
				        Thread.sleep(10000);
						slf4jLogger.info("Access Two Type Bandwidth method - SD WAN");
						ExpectedConditions.elementToBeClickable(productConfigPage.accessTwoTypeBandwidthlistbox);
						productConfigPage.accessTwoTypeBandwidthlistbox.click();
						productConfigPage.accessTwoTypeBandwidthlistbox.sendKeys(value.trim());
						WaitForPageToLoad(15000);
				        Thread.sleep(10000);
				        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[16]/td[1]/label")).click();
				        Thread.sleep(6000);
				        slf4jLogger.info("selected Access Two Type Bandwidth method - SD WAN");
					}
			       else if(key.equals("Access_Three_Type")) {
			    	   	WaitForPageToLoad(10000);
				        Thread.sleep(10000);
						slf4jLogger.info("Access Three Type method - SD WAN");
						ExpectedConditions.elementToBeClickable(productConfigPage.accessThreeTypeListbox);
						productConfigPage.accessThreeTypeListbox.click();
						productConfigPage.accessThreeTypeListbox.sendKeys(value.trim());
						WaitForPageToLoad(15000);
				        Thread.sleep(7000);
				        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[18]/td[1]/label")).click();
				        Thread.sleep(6000);
				        slf4jLogger.info("selected Access Three Type method - SD WAN");
					}
			       else if(key.equals("Access_Three_Type_Bandwidth")) {
			    	   	WaitForPageToLoad(10000);
				        Thread.sleep(10000);
						slf4jLogger.info("Access Three Type Bandwidth method - SD WAN");
						ExpectedConditions.elementToBeClickable(productConfigPage.accessThreeTypeBandwidthListbox);
						productConfigPage.accessThreeTypeBandwidthListbox.click();
						productConfigPage.accessThreeTypeBandwidthListbox.sendKeys(value.trim());
						WaitForPageToLoad(15000);
				        Thread.sleep(10000);
				        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[19]/td[1]/label")).click();
				        Thread.sleep(6000);
				        slf4jLogger.info("selected Access Three Type Bandwidth method - SD WAN");
					}
			       else if(key.equals("Access_Four_Type")) {
			    	   	WaitForPageToLoad(10000);
				        Thread.sleep(10000);
						slf4jLogger.info("Access Four Type Bandwidth method - SD WAN");
						ExpectedConditions.elementToBeClickable(productConfigPage.accessFourTypeListbox);
						productConfigPage.accessFourTypeListbox.click();
						productConfigPage.accessFourTypeListbox.sendKeys(value.trim());
						WaitForPageToLoad(15000);
				        Thread.sleep(10000);
				        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[21]/td[1]/label")).click();
				        Thread.sleep(6000);
				        slf4jLogger.info("selected Access Four Type Bandwidth method - SD WAN");
					}
			       else if(key.equals("A4Type")) {
			    	   	WaitForPageToLoad(10000);
				        Thread.sleep(10000);
						slf4jLogger.info("A4Type method - SD WAN");
						ExpectedConditions.elementToBeClickable(productConfigPage.a4TypeListbox);
						productConfigPage.a4TypeListbox.click();
						productConfigPage.a4TypeListbox.sendKeys(value.trim());
						WaitForPageToLoad(15000);
				        Thread.sleep(10000);
				        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[22]/td[1]/label")).click();
				        Thread.sleep(6000);
				        slf4jLogger.info("selected A4Type method - SD WAN");
					}

			       else if(key.equals("Circuit_Type4")) {
			    	   	WaitForPageToLoad(10000);
				        Thread.sleep(10000);
						slf4jLogger.info("Circuit Type4 method - SD WAN");
						ExpectedConditions.elementToBeClickable(productConfigPage.circuitType4Listbox);
						productConfigPage.circuitType4Listbox.click();
						productConfigPage.circuitType4Listbox.sendKeys(value.trim());
						WaitForPageToLoad(15000);
				        Thread.sleep(10000);
				        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[26]/td[1]/label")).click();
				        Thread.sleep(6000);
				        slf4jLogger.info("selected Circuit Type4 method - SD WAN");
					}
			       else if(key.equals("Billing_Method4")) {
			    	   	WaitForPageToLoad(10000);
				        Thread.sleep(10000);
						slf4jLogger.info("Billing Method4 method - SD WAN");
						ExpectedConditions.elementToBeClickable(productConfigPage.billingMethod4Listbox);
						productConfigPage.billingMethod4Listbox.click();
						productConfigPage.billingMethod4Listbox.sendKeys(value.trim());
						WaitForPageToLoad(15000);
				        Thread.sleep(10000);
				        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[27]/td[1]/label")).click();
				        Thread.sleep(6000);
				        slf4jLogger.info("selected Billing Method4 method - SD WAN");
					}
			       else if(key.equals("Access_Type4")) {
			    	   	WaitForPageToLoad(10000);
				        Thread.sleep(10000);
						slf4jLogger.info("Access Method4 method - SD WAN");
						ExpectedConditions.elementToBeClickable(productConfigPage.accessType4Listbox);
						productConfigPage.accessType4Listbox.click();
						productConfigPage.accessType4Listbox.sendKeys(value.trim());
						WaitForPageToLoad(15000);
				        Thread.sleep(10000);
				        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[30]/td[1]/label")).click();
				        Thread.sleep(6000);
				        slf4jLogger.info("selected Access Method4 method - SD WAN");
					}
			       else if(key.equals("Inside_Wiring4")) {
			    	   	WaitForPageToLoad(10000);
				        Thread.sleep(10000);
						slf4jLogger.info("Inside Wiring4 method - SD WAN");
						ExpectedConditions.elementToBeClickable(productConfigPage.insideWiring4Listbox);
						productConfigPage.insideWiring4Listbox.click();
						productConfigPage.insideWiring4Listbox.sendKeys(value.trim());
						WaitForPageToLoad(15000);
				        Thread.sleep(10000);
				        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[32]/td[1]/label")).click();
				        Thread.sleep(6000);
				        slf4jLogger.info("selected Inside Wiring4 method - SD WAN");
					}
					else if(key.equals("High_Availability")) {
						WaitForPageToLoad(10000);
				        Thread.sleep(10000);
						slf4jLogger.info("High Availability method - SD WAN");
						ExpectedConditions.elementToBeClickable(productConfigPage.highAvailabilityListbox);
						productConfigPage.highAvailabilityListbox.click();
						productConfigPage.highAvailabilityListbox.sendKeys(value.trim());
						WaitForPageToLoad(15000);
				        Thread.sleep(10000);
				        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[36]/td[1]/label")).click();
				        Thread.sleep(6000);
				        slf4jLogger.info("selected High Availability method - SD WAN");
					}
					
					 else if(key.equals("Circuit_Type")) {
						 	WaitForPageToLoad(10000);
					        Thread.sleep(10000);
							slf4jLogger.info("Circuit Type method - SD WAN");
							ExpectedConditions.elementToBeClickable(productConfigPage.circuitType);
							productConfigPage.circuitType.click();
							productConfigPage.circuitType.sendKeys(value.trim());
							WaitForPageToLoad(15000);
					        Thread.sleep(10000);
					        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[15]/td[1]/label")).click();
					        Thread.sleep(6000);
					        slf4jLogger.info("selected Circuit Type method - SD WAN");
						}
					
					 else if(key.equals("Billing_Method")) {
						 	WaitForPageToLoad(10000);
					        Thread.sleep(10000);
							slf4jLogger.info("Billing Method - SD WAN");
							ExpectedConditions.elementToBeClickable(productConfigPage.billingMethod);
							productConfigPage.billingMethod.click();
							productConfigPage.billingMethod.sendKeys(value.trim());
							WaitForPageToLoad(15000);
					        Thread.sleep(10000);
					        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[17]/td[1]/label")).click();
					        Thread.sleep(6000);
					        slf4jLogger.info("selected Billing Method - SD WAN");
						}
					
					 else if(key.equals("Inside_Wiring")) {
						 WaitForPageToLoad(10000);
					        Thread.sleep(10000);
							slf4jLogger.info("Inside Wiring Method - SD WAN");
							ExpectedConditions.elementToBeClickable(productConfigPage.unibillingExtension);
							productConfigPage.unibillingExtension.click();
							productConfigPage.unibillingExtension.sendKeys(value.trim());
							WaitForPageToLoad(15000);
					        Thread.sleep(10000);
					        driver.findElement(By.xpath("//*[@id='AttributeForm']/div[3]/div[2]/table/tbody/tr[23]/td[1]/label")).click();
					        Thread.sleep(6000);
					        slf4jLogger.info("selected Inside Wiring Method - SD WAN");
						}
					 else if(key.equals("OnsiteInstallation")) {
						  	ExpectedConditions.elementToBeClickable(productConfigPage.sm_OnsiteInstallation);
							productConfigPage.sm_OnsiteInstallation.sendKeys(value);
							WaitForPageToLoad(5000);
							Thread.sleep(2000);
							slf4jLogger.info("selected Onsite Installation");
					  }
				}
		slf4jLogger.info(testID + ":" + System.currentTimeMillis()+ "299: Selecting Product Attributes Completed : SD-WAN");

	}
	catch (Exception e) {
		slf4jLogger.info("error "+e.getMessage());
		Assert.fail(System.currentTimeMillis() + "@" + "Error occured while configuring SD-WAN product");
	}
	return new ProductConfigSteps();
	
}

public ProductConfigSteps selectAttributes_ManagedEquipment(String attributeList, String testID) throws Exception {
	WebDriver driver = getDriver();
	Wait<WebDriver> wait = new WebDriverWait(driver, 10000);
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	configKeyValuePair = createConfigKeyValuePair(attributeList);
	Thread.sleep(4000);
	try {
		slf4jLogger.info("Product configuration for Managed Equipment");
		String[] attributes =  attributeList.split(";");
		WaitForPageToLoad(5000);
		
		  for(int i=0;i<attributes.length;i++){
			   String[] keyValuePair =  attributes[i].split(":");
				  String key = keyValuePair[0];
				  String value = keyValuePair[1];
				  WaitForPageToLoad(6000);	
				  driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
					
					if(key.equals("OnsiteInstallation")) {
						  	ExpectedConditions.elementToBeClickable(productConfigPage.dqp_onsiteInstallation);
							productConfigPage.dqp_onsiteInstallation.sendKeys(value);
							WaitForPageToLoad(5000);
							Thread.sleep(2000);
							slf4jLogger.info("selected Onsite Installation");
					  }
					  else if(key.equals("Term")) {
						  	ExpectedConditions.elementToBeClickable(productConfigPage.term);
						  	productConfigPage.term.sendKeys(value);
							WaitForPageToLoad(5000);
							Thread.sleep(2000);
							slf4jLogger.info("selected Term");
					  }
					}
		Thread.sleep(5000);
		clickOnContinue();
		WaitForPageToLoad(5000);
		wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.editButton));
		productConfigPage.editButton.click();
		ExpectedConditions.elementToBeClickable(productConfigPage.deviceCategory);
		productConfigPage.deviceCategory.sendKeys(configKeyValuePair.get("DeviceCategory"));
		WaitForPageToLoad(5000);
		Thread.sleep(2000);
		slf4jLogger.info("selected Device Category");
		
		ExpectedConditions.elementToBeClickable(productConfigPage.deviceModel);
		productConfigPage.deviceModel.sendKeys(configKeyValuePair.get("DeviceModel"));
		WaitForPageToLoad(5000);
		Thread.sleep(2000);
		slf4jLogger.info("selected Device Model");
		
		wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.saveButton));
		productConfigPage.saveButton.click();
		WaitForPageToLoad(5000);
		
		slf4jLogger.info(" Product configuration success ");
		
	}
	catch (Exception e) {
		slf4jLogger.info(e.getMessage());
		Assert.fail(System.currentTimeMillis() + "@"+testID
				+ "Error occured while configuring Managed Equipment");
	}
	return new ProductConfigSteps();
	
}

public ProductConfigSteps selectAttributes_EWAS(String attributeList, String testID) throws Exception {
	WebDriver driver = getDriver();
	Wait<WebDriver> wait = new WebDriverWait(driver, 10000);
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	configKeyValuePair = createConfigKeyValuePair(attributeList);
	Thread.sleep(4000);
	try {
		slf4jLogger.info("Product configuration for EWAS");
		String[] attributes =  attributeList.split(";");
		WaitForPageToLoad(5000);
		
		  for(int i=0;i<attributes.length;i++){
			   String[] keyValuePair =  attributes[i].split(":");
				  String key = keyValuePair[0];
				  String value = keyValuePair[1];
				  WaitForPageToLoad(6000);	
				  driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
					
					if(key.equals("OnsiteInstallation")) {
						  	ExpectedConditions.elementToBeClickable(productConfigPage.dqp_onsiteInstallation);
							productConfigPage.dqp_onsiteInstallation.sendKeys(value);
							WaitForPageToLoad(5000);
							Thread.sleep(2000);
							slf4jLogger.info("selected Onsite Installation");
					  }
					  else if(key.equals("Term")) {
						  	ExpectedConditions.elementToBeClickable(productConfigPage.term);
						  	productConfigPage.term.sendKeys(value);
							WaitForPageToLoad(5000);
							Thread.sleep(2000);
							slf4jLogger.info("selected Term");
					  }
					  else if(key.equals("SPCRID")) {
						  	ExpectedConditions.elementToBeClickable(productConfigPage.spcrID);
						  	productConfigPage.spcrID.sendKeys(value);
							WaitForPageToLoad(5000);
							Thread.sleep(2000);
							slf4jLogger.info("selected SPCR ID");
					  }
					}
		Thread.sleep(5000);
		clickOnContinue();
		WaitForPageToLoad(5000);
		wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.editButton));
		productConfigPage.editButton.click();
		wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.dataPlan));
		productConfigPage.dataPlan.sendKeys(configKeyValuePair.get("DataPlan"));
		WaitForPageToLoad(5000);
		Thread.sleep(2000);
		slf4jLogger.info("selected Data Plan");
		
		wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.saveButton));
		productConfigPage.saveButton.click();
		WaitForPageToLoad(5000);
		
		slf4jLogger.info(" Product configuration success ");
		
	}
	catch (Exception e) {
		slf4jLogger.info(e.getMessage());
		Assert.fail(System.currentTimeMillis() + "@"+testID
				+ "Error occured while configuring EWAS");
	}
	return new ProductConfigSteps();
	
}

public ProductConfigSteps selectAttributes_ManagedServer(String attributeList, String testID) throws Exception {
	WebDriver driver = getDriver();
	Wait<WebDriver> wait = new WebDriverWait(driver, 10000);
	Map<String, String> configKeyValuePair = new HashMap<String, String>();
	configKeyValuePair = createConfigKeyValuePair(attributeList);
	Thread.sleep(4000);
	try {
		slf4jLogger.info("Product configuration for Managed Server");
		String[] attributes =  attributeList.split(";");
		WaitForPageToLoad(5000);
		for(int i=0;i<attributes.length;i++){
			  String[] keyValuePair =  attributes[i].split(":");
			  String key = keyValuePair[0];
			  String value = keyValuePair[1];
			  WaitForPageToLoad(6000);	
			  driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
			  if(key.equals("DataCenter")) {
				  	wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.dataCenter));
					productConfigPage.dataCenter.sendKeys(value);
					WaitForPageToLoad(5000);
					Thread.sleep(2000);
					slf4jLogger.info("selected Data Center");
			  }
			else if(key.equals("DataCenterOther")) {
			  	wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.dataCenterOtherValue));
				productConfigPage.dataCenterOtherValue.sendKeys(value);
				WaitForPageToLoad(5000);
				Thread.sleep(2000);
				slf4jLogger.info("selected Data Center Other Value");
		    }
			 else if(key.equals("Term")) {
				wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.term));
				productConfigPage.term.sendKeys(value);
				WaitForPageToLoad(5000);
			    Thread.sleep(2000);
			    slf4jLogger.info("selected Term");
			 }
		}  
		waitABit(5000);
		clickOnContinue();
		WaitForPageToLoad(5000);
		if(configKeyValuePair.get("SPCRID")!=null) {
		  	ExpectedConditions.elementToBeClickable(productConfigPage.spcrID);
		  	productConfigPage.spcrID.sendKeys(configKeyValuePair.get("SPCRID"));
			WaitForPageToLoad(5000);
			Thread.sleep(2000);
			slf4jLogger.info("selected SPCR ID");
	    }
		waitABit(1000);
		clickOnContinue();
		WaitForPageToLoad(5000);
		if(configKeyValuePair.get("OS")!=null) {
		  	ExpectedConditions.elementToBeClickable(productConfigPage.osOptions);
		  	productConfigPage.osOptions.sendKeys(configKeyValuePair.get("OS"));
			WaitForPageToLoad(5000);
			Thread.sleep(2000);
			slf4jLogger.info("selected OS");
	    }
		Thread.sleep(2000);
		WaitForPageToLoad(5000);
		
		slf4jLogger.info(" Product configuration success ");
		
	}
	catch (Exception e) {
		slf4jLogger.info(e.getMessage());
		Assert.fail(System.currentTimeMillis() + "@"+testID
				+ "Error occured while configuring Managed Server");
	}
	return new ProductConfigSteps();
	
}

@Step
public void selectAttributes_DIA_BA(String testID, String attributesList)  throws Exception{
	try {
		slf4jLogger.info("Product configuration for DIA Billing Arrangement");
		Thread.sleep(10000);
		WebDriver driver = getDriver();
		Wait<WebDriver> wait = new WebDriverWait(driver, 10000);
		Map<String, String> configKeyValuePair = new HashMap<String, String>();
		configKeyValuePair = createConfigKeyValuePair(attributesList);
		
		if(configKeyValuePair.get("billingArrangementName")!=null) {
			slf4jLogger.info("Billing Arrangement Name method");
			wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.billingArrangementNameID));
		  	productConfigPage.billingArrangementNameID.sendKeys(configKeyValuePair.get("billingArrangementName"));
			WaitForPageToLoad(5000);
			Thread.sleep(5000);
			slf4jLogger.info("selected Billing Arrangement Name");
		}
		if(configKeyValuePair.get("cdr")!=null) {
			slf4jLogger.info("CDR method");
			wait.until(ExpectedConditions.elementToBeClickable(productConfigPage.cdrDIABA));
			productConfigPage.cdrDIABA.clear();
			productConfigPage.cdrDIABA.sendKeys(configKeyValuePair.get("cdr"));	
	        WaitForPageToLoad(5000);
	        Thread.sleep(5000);
	        slf4jLogger.info("selected CDR");
		}
	}
	catch (Exception e) {
		slf4jLogger.info("DIA Billing Arrangement Product configuration failed..");
		Assert.fail(e.getMessage());
	}
	}

}
