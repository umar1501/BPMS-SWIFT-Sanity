package com.ctl.it.qa.bpms.steps;



import static org.junit.Assert.assertFalse;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.util.TextUtils;
import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ctl.it.qa.bpms.pages.ProductSummaryPage;
import com.ctl.it.qa.bpms.pages.VendorBidManagementPage;
import com.ctl.it.qa.staf.Steps;

import net.thucydides.core.annotations.Step;


@SuppressWarnings("serial")
public class VendorBidManagementSteps extends Steps{

	private transient Logger slf4jLogger = LoggerFactory.getLogger(VendorBidManagementSteps.class);
	VendorBidManagementPage vendorBidManagementPage;
	ProductSummaryPage productSummaryPage;
	ProductSummarySteps productSummarySteps;
	public int counter=0;
	public static final Map<String, String> rocList = new HashMap<String, String>();
	public transient List<String> rocIds = new ArrayList<String>();
	
	

	@Step
	public void verifyROCIDs() throws Exception {
		try {
		slf4jLogger.info("Verifying ROC IDs");
		String rocID1 = vendorBidManagementPage.rocRows.get(0).findElement(By.xpath("//*[1]/div")).getText();
		String rocID2 = vendorBidManagementPage.rocRows.get(0).findElement(By.xpath("//*[2]/div")).getText();
		
		if(rocID1.equals(rocID2)) {
			Assert.fail("Error : Cloned packages having same ROC ID!");
		}
		slf4jLogger.info("Verified: Cloned packages have different ROC IDs.");
	
	}
		catch(Exception e){
			
			Assert.fail(e.getMessage());
		}
}
	
	@Step
	public void verifyROCStatus(String testID, String validationTexts) {
		try {
			slf4jLogger.info("Verifying ROC Status");
			
			if(testID.equals("2050")) {
				if(counter==0) {
					if(!(vendorBidManagementPage.Approval_Status.getText().contains("Vendor Bid Completed"))) {
						Assert.fail("Error : Approval Status is not VB Completed");
					}
					counter++;
				}
				if(counter==0) {
					if(!(vendorBidManagementPage.Approval_Status.getText().contains("Vendor Bid Assigned"))) {
						Assert.fail("Error : Approval Status is not VB Completed");
					}
				}
			}
			
			slf4jLogger.info("Verified: Approval status...");
	
	}
		catch(Exception e){
			
			Assert.fail(e.getMessage());
		}
}
	public Map<String, String> createConfigKeyValuePair(String entries) {
		
		String[] attributes =  entries.split(";");
		Map<String, String> map = new HashMap<String, String>();
		for (String entry : attributes) {
	        if (!TextUtils.isEmpty(entry) && entry.contains(":")) {
	            String[] keyValue = entry.split(":");
	            map.put(keyValue[0], keyValue[1]);
	        }
	    }
		
		return map;
	}
	@Step
	public void submitROCRequest() throws InterruptedException {
		
		try {
			ExpectedConditions.elementToBeClickable(vendorBidManagementPage.selectAllCheckBox.get(vendorBidManagementPage.selectAllCheckBox.size()-1));
			vendorBidManagementPage.selectAllCheckBox.get(vendorBidManagementPage.selectAllCheckBox.size()-1).click();
			Thread.sleep(4000);
			ExpectedConditions.elementToBeClickable(vendorBidManagementPage.SubmitVendorBid);
			vendorBidManagementPage.SubmitVendorBid.click();
			Thread.sleep(6000);
			ROCHomeSteps.RocID = vendorBidManagementPage.rocGuruID.getText(); 
			slf4jLogger.info("Clicking on Submit ROC requests Success");
	}
		catch(Exception e){
			slf4jLogger.info("Error while \"Clicking on Submit ROC requests button");
			Assert.fail(e.getMessage());
		}
		
}

	
	@Step
	public void submitROCRequest(String testID) throws InterruptedException {
		
		try {
			slf4jLogger.info("ROC Submit method.....!!!");
			Thread.sleep(7000);
			WebDriver driver = getDriver();
			
			if(vendorBidManagementPage.VendorBidCheck.getText().equals("Vendor Bid Required")) {
				vendorBidManagementPage.GridCheckbox.click();
			}
			if(testID.equals("2051")) {
				vendorBidManagementPage.Checkbox.get(vendorBidManagementPage.Checkbox.size()-1).click();
				Thread.sleep(4000);
			}
			
			try {
				WaitForPageToLoad(8000);
				Boolean value = vendorBidManagementPage.SubmitVendorBid.isEnabled();
		        if (!value) {
		        	slf4jLogger.info("Button still disabled.....!!!");

		        	JavascriptExecutor js = (JavascriptExecutor) driver;
		        	js.executeScript("arguments[0].removeAttribute('disabled','disabled')",vendorBidManagementPage.SubmitVendorBid);
		        	slf4jLogger.info("removing the attribute Disabled");
		        	
		        	WebDriverWait wait = new WebDriverWait(driver, 20);
		        	wait.until(ExpectedConditions.elementToBeClickable(vendorBidManagementPage.SubmitVendorBid));
		        	
		        	vendorBidManagementPage.SubmitVendorBid.click();
		        	slf4jLogger.info("Button enabled...!!! Test Success....");
		        }
		        else {
		        	vendorBidManagementPage.SubmitVendorBid.click();
		        	slf4jLogger.info("Button enabled...!!! Test Success....");
		        }
				Thread.sleep(6000);
				
			}
			catch(Exception e) {
				slf4jLogger.info("Button issue..... ");
				Assert.fail(e.getMessage());
			}
			Thread.sleep(6000);
			ROCHomeSteps.RocID = vendorBidManagementPage.rocRows.get(0).findElement(By.xpath("//*[1]/div")).getText();
			updateROCList();
			
			slf4jLogger.info("Clicking on Submit ROC requests Success");
			
			String first=null, second=null;
			if(testID.equals("2062")) {
				Thread.sleep(5000);
				productSummaryPage.count++;
				slf4jLogger.info("ROC/GURU ID: " +vendorBidManagementPage.rocGuruID.getText());
				slf4jLogger.info("Count: " + productSummaryPage.count);
				if(productSummaryPage.count==1) {
					first = vendorBidManagementPage.rocGuruID.getText();
					slf4jLogger.info("first: " + first);
				}
				else if(productSummaryPage.count==2) {
					second = vendorBidManagementPage.rocGuruID.getText();
					if(!(second.equalsIgnoreCase(first))) {
						Thread.sleep(2000);
						if(vendorBidManagementPage.rocInfo!=null) {
							slf4jLogger.info(vendorBidManagementPage.rocInfo.getAttribute("title"));
						}
						else {
							Assert.fail("No replacement icon..!!");
						}
					}
					else {
						Assert.fail("Second ROC ID is the same as the First ROC ID..!!");
					}
				}
				Thread.sleep(5000);
				slf4jLogger.info("returning to SD Page");
				productSummaryPage.returnToScenarioDetailbutton.click();
			}
	}
		catch(Exception e){
			slf4jLogger.info("Error while Clicking on Submit ROC request button");
			Assert.fail(e.getMessage());
		}
		
}
	
public void updateROCList() {
		String rocOperation = "";
		for(int i=1;i<vendorBidManagementPage.rocRows.size();i++) {
			String rocID = vendorBidManagementPage.rocRows.get(0).findElement(By.xpath("//*["+i+"]/div")).getText();
			if(i==1) rocOperation = "Assign";
			else if(i==2) rocOperation = "default";
			else if(i==3) rocOperation = "No Bid";
			else rocOperation = "default";
			rocList.put(rocID, rocOperation);
			rocIds.add(rocID);
			
		}
		
		
	}

	public void verifyROCRequestsBeforeSubmit(String testID) throws InterruptedException {
		Thread.sleep(1000);
		
		if(testID.equals("2069")){
			
			if(!vendorBidManagementPage.rocAddress1.equals(vendorBidManagementPage.rocAddress2)) {
				Assert.fail("Error : Address's on both requests are not same");
			}
			slf4jLogger.info("Verified: Address's on both requests are the same");
			
		}
	}
	
	@Step
	public void verifyInfoColumn()throws InterruptedException {
		try {
			slf4jLogger.info("To Verify info column");
			Thread.sleep(10000);
			productSummaryPage.vendorBidManagementBtn.click();
			Thread.sleep(5000);
			if(!vendorBidManagementPage.infoheader.getText().contains("Info"))
				Assert.fail("Error : info column not found");
			slf4jLogger.info("To Verify info column -completed");
	
	}
		catch(Exception e){
			
			Assert.fail(e.getMessage());
		}
}
	

	@Step
	public void submitGURURequest() throws InterruptedException {
		try {
			Thread.sleep(1000);
			WebDriver driver = getDriver();
			if(vendorBidManagementPage.GuruBidCheck.getText().equals("Guru Bid Required")) {
				vendorBidManagementPage.GridCheckbox.click();
				
				try {
					Thread.sleep(6000);
					slf4jLogger.info(driver.switchTo().alert().getText());
					driver.switchTo().alert().accept();
					WaitForPageToLoad(6000);
					slf4jLogger.info("Clicking on Submit ROC requests Success");
				}
				catch(Exception e){
					slf4jLogger.info("No alert popup for GURU Bid...");
					System.exit(0);
				}
				slf4jLogger.info("Submitting BID......");
				Thread.sleep(4000);
				
				
				try {
					WaitForPageToLoad(8000);
					
					Boolean value = vendorBidManagementPage.SubmitVendorBid.isEnabled();
					
			        if (!value) {
			        	slf4jLogger.info("Button still disabled.....!!!");

			        	JavascriptExecutor js = (JavascriptExecutor) driver;
			        	js.executeScript("arguments[0].removeAttribute('disabled','disabled')",vendorBidManagementPage.SubmitVendorBid);
			        	slf4jLogger.info("removing the attribute Disabled");
			        	
			        	WebDriverWait wait = new WebDriverWait(driver, 20);
			        	wait.until(ExpectedConditions.elementToBeClickable(vendorBidManagementPage.SubmitVendorBid));
			        	
			        	vendorBidManagementPage.SubmitVendorBid.click();
			        	slf4jLogger.info("Button enabled...!!! Test Success....");
			        }
			        else {
			        	vendorBidManagementPage.SubmitVendorBid.click();
			        	slf4jLogger.info("Button enabled...!!! Test Success....");
			        }
					Thread.sleep(6000);
				}
				catch(Exception e) {
					slf4jLogger.info("Button issue..... ");
					Assert.fail(e.getMessage());
				}
			
			}
			
	}
		catch(Exception e){
			slf4jLogger.info("Error while submitting GURU requests.....");
			Assert.fail(e.getMessage());
		}
}
	
	@Step
	public void verifyROCAttributes(String testID, String attributesList)throws InterruptedException {
		try {
			Map<String, String> configKeyValuePair = createConfigKeyValuePair(attributesList);
			
			slf4jLogger.info("To Verify attributes column");
			Thread.sleep(10000);
			productSummaryPage.vendorBidManagementBtn.click();
			Thread.sleep(5000);
			
			if(!vendorBidManagementPage.Approval_Status.getText().contains("Vendor Bid Required"))
				Assert.fail("Error : Approval_Status is not Vendor Bid Required..!");
			
			if(configKeyValuePair.get("portbandwidth")!=null) {
				if(!vendorBidManagementPage.Port_Speed.getText().contains(configKeyValuePair.get("portbandwidth")))
					Assert.fail("Error while verifying Port_Speed");
			}
			
			if(configKeyValuePair.get("Bandwidth")!=null) {
				if(testID.equals("2047")) {
					if(!vendorBidManagementPage.ASide_bandwidth.getText().equals(configKeyValuePair.get("Bandwidth")) || !vendorBidManagementPage.ZSide_bandwidth.getText().equals(configKeyValuePair.get("Bandwidth")))
						Assert.fail("Error : While verifying Bandwidth..!");	
				}
				else {
					if(!vendorBidManagementPage.bandwidth.getText().equals(configKeyValuePair.get("Bandwidth")))
						Assert.fail("Error : While verifying Bandwidth..!");
				}	
			}
			
			if(configKeyValuePair.get("Multi_term_Request")!=null) {
				if(testID.equals("2047")) {
					if(!vendorBidManagementPage.Multi_term_Request.getText().equals(configKeyValuePair.get("Multi_term_Request")))
						Assert.fail("Error : While verifying Multi_term_Request..!");	
					if(!vendorBidManagementPage.Requested_terms.getText().equals(configKeyValuePair.get("Requested_Term")))
						Assert.fail("Error : While verifying Requested_terms..!");
				}
				else {
					if(!vendorBidManagementPage.Multi_term_Request.getText().contains("-") || !vendorBidManagementPage.Multi_term_Request.getText().contains(configKeyValuePair.get("Multi_term_Request")))
						Assert.fail("Error while verifying Multi_term_Request");
				}
			}
			
			if(configKeyValuePair.get("AccessDiversity")!=null || configKeyValuePair.get("ASide_AccessDiversity")!=null  || configKeyValuePair.get("ZSide_AccessDiversity")!=null) {
				if(testID.equals("2047")) {
					if(!vendorBidManagementPage.ASide_AccessDiversity.getText().equals(configKeyValuePair.get("ASide_AccessDiversity")) && !vendorBidManagementPage.ZSide_AccessDiversity.getText().equals(configKeyValuePair.get("ZSide_AccessDiversity")))
						Assert.fail("Error : While verifying Access Diversity..!");	
				}
				else {
					if(!vendorBidManagementPage.AccessDiversity.getText().contains("-") || !vendorBidManagementPage.ASide_AccessDiversity.getText().contains(configKeyValuePair.get("Access_Diversity")))
						Assert.fail("Error while verifying Access_Diversity");
				}
			}
			
			if(configKeyValuePair.get("Specific_Vendor_Reqsts")!=null || configKeyValuePair.get("Specific_Offnet_Vendor_Required")!=null) {
				if(testID.equals("2047")) {
					if(!vendorBidManagementPage.ASide_Specific_Vendor_Reqsts.getText().equals(configKeyValuePair.get("Specific_Offnet_Vendor_Required")))
						Assert.fail("Error : While verifying Specific_Vendor_Reqsts..!");	
					if(!vendorBidManagementPage.ASide_Specific_Vendor_Notes.getText().equals(configKeyValuePair.get("Specific_Vendor_Note")))
						Assert.fail("Error : While verifying Specific_Vendor_Reqsts Notes..!");
				}
				else {
					if(!vendorBidManagementPage.Specific_Vendor_Reqsts.getText().contains("-") || !vendorBidManagementPage.Specific_Vendor_Reqsts.getText().contains(configKeyValuePair.get("Specific_Vendor_Reqsts")))
						Assert.fail("Error while verifying Specific_Vendor_Reqsts");
				}
			}
			
			if(configKeyValuePair.get("Route_Diversity")!=null) {
				if(testID.equals("2047")) {
					if(!vendorBidManagementPage.ASide_Route_Diversity.getText().equals(configKeyValuePair.get("Route_Diversity")))
						Assert.fail("Error : While verifying Route_Diversity..!");	
					if(!vendorBidManagementPage.ASide_Route_Diversity_Notes.getText().equals(configKeyValuePair.get("Route_Diversity_Note")))
						Assert.fail("Error : While verifying Route_Diversity Notes..!");
				}
				else {
					if(!vendorBidManagementPage.Route_Diversity.getText().contains("-") || !vendorBidManagementPage.Route_Diversity.getText().contains(configKeyValuePair.get("Route_Diversity")))
						Assert.fail("Error while verifying Route_Diversity");
				}
			}
			
			if(configKeyValuePair.get("Bldng_Entrance_Diveristy")!=null) {
				if(testID.equals("2047")) {
					if(!vendorBidManagementPage.ASide_Bldng_Entrance_Diveristy.getText().equals(configKeyValuePair.get("Bldng_Entrance_Diveristy")))
						Assert.fail("Error : While verifying Bldng_Entrance_Diveristy..!");	
					if(!vendorBidManagementPage.ASide_Bldng_Entrance_Diveristy_Notes.getText().equals(configKeyValuePair.get("Bldng_Entrance_Diveristy_Note")))
						Assert.fail("Error : While verifying Bldng_Entrance_Diveristy Notes..!");
				}
				else {
					if(!vendorBidManagementPage.Bldng_Entrance_Diveristy.getText().contains("-") || !vendorBidManagementPage.Bldng_Entrance_Diveristy.getText().contains(configKeyValuePair.get("Bldng_Entrance_Diveristy")))
						Assert.fail("Error while verifying Bldng_Entrance_Diveristy");
				}
			}
			
			if(configKeyValuePair.get("Vendor_Equip_Diversity")!=null) {
				if(testID.equals("2047")) {
					if(!vendorBidManagementPage.ASide_Vendor_Equip_Diversity.getText().equals(configKeyValuePair.get("Vendor_Equip_Diversity")))
						Assert.fail("Error : While verifying Vendor_Equip_Diversity..!");	
					if(!vendorBidManagementPage.ASide_Vendor_Equip_Diversity_Notes.getText().equals(configKeyValuePair.get("Vendor_Equip_Diversity_Note")))
						Assert.fail("Error : While verifying Vendor_Equip_Diversity Notes..!");
				}
				else {
					if(!vendorBidManagementPage.Vendor_Equip_Diversity.getText().contains("-") || !vendorBidManagementPage.Vendor_Equip_Diversity.getText().contains(configKeyValuePair.get("Vendor_Equip_Diversity")))
						Assert.fail("Error while verifying Vendor_Equip_Diversity");
				}
			}
			
			if(configKeyValuePair.get("ROC_Instructions")!=null) {
				if(testID.equals("2047")) {
					if(!vendorBidManagementPage.ROC_Instructions.getText().equals(configKeyValuePair.get("ROC_Instructions")))
						Assert.fail("Error : While verifying ROC_Instructions..!");
				}
				else {
				if(!vendorBidManagementPage.ROC_Instructions.getText().contains("-"))
					Assert.fail("Error while verifying ROC_Instructions");
				}	
			}
			if(configKeyValuePair.get("Phone_Number")!=null) {
				if(!vendorBidManagementPage.Phone_Number.getText().contains(configKeyValuePair.get("Phone_Number")))
					Assert.fail("Error : Phone_Number is not displayed..!");
			}
			
			slf4jLogger.info("Verified: ROC attributes in VBM page..!");
			
			vendorBidManagementPage.scenariodetailspagelink.click();
			Thread.sleep(4000);
	
	}
		catch(Exception e){
			
			Assert.fail(e.getMessage());
		}
}
	
	
	@Step
	public void clickProductFilterDropdown(String testID) {
		slf4jLogger.info("Clicking on Product Filter dropdown");
		WebDriver driver = getDriver();
		WebDriverWait wait = new WebDriverWait(driver, 20);
		try {
			wait.until(ExpectedConditions.elementToBeClickable(vendorBidManagementPage.filter));
			vendorBidManagementPage.filter.click();
			wait.until(ExpectedConditions.visibilityOf(vendorBidManagementPage.filter_popup));
			if(testID.equals("2063")) {
				slf4jLogger.info(vendorBidManagementPage.filter_popup_selected_items.getText());
				driver.findElement(By.xpath("/html/body/div[21]/form/ul/li[3]/label/input")).click(); //selected Wavelength 
				Thread.sleep(4000);
				slf4jLogger.info(vendorBidManagementPage.filter_popup_selected_items.getText());
				if(vendorBidManagementPage.filter_popup_selected_items.getText().equalsIgnoreCase("1 items selected")) {
					vendorBidManagementPage.filter_submit.click();
					Thread.sleep(6000);
				}
				else {
					Thread.sleep(4000);
					Assert.fail("Couldnt select one item from the Vendor filter dropdown...");
				}
				if((vendorBidManagementPage.first_product.getText().equalsIgnoreCase("Wavelength"))&&(vendorBidManagementPage.second_product.getText().equalsIgnoreCase("Wavelength"))) {
					slf4jLogger.info("Only one type of product name is displayed");
				}
				submitROCRequest(testID);
				vendorBidManagementPage.exportBidRequest.click();
				slf4jLogger.info("Vendor Bid Report Export!!!..!!");
				Thread.sleep(5000);
				vendorBidManagementPage.filter.click();
				wait.until(ExpectedConditions.visibilityOf(vendorBidManagementPage.filter_popup));
				vendorBidManagementPage.filter_clear.click();
				slf4jLogger.info("Filter cleared..!! All items are displayed..!!");
				Thread.sleep(5000);
			}
		}
		catch(Exception e){
			Assert.fail(e.getMessage());
		}
}
	
	public void verifyReadOnlyAttributesOnVBMpage(String testid) {
		try {
			WebDriver driver = getDriver();
			WebDriverWait wait = new WebDriverWait(driver, 10000);
			slf4jLogger.info("Inside Verify Read Only Attributes on Vendor Bid Management page method");
			wait.until(ExpectedConditions.visibilityOf(vendorBidManagementPage.Approval_Status));
			assertFalse("Vendor Bid checkbox is not disabled..failed", vendorBidManagementPage.GridCheckbox.isEnabled());
			assertFalse("Submit Vendor Bid button is not Disabled...failed", vendorBidManagementPage.SubmitVendorBid.isEnabled());
		//	assertTrue("Edit Vendor Bid is not disabled..failed", vendorBidManagementPage.editPencilVendorBid.getAttribute("style").contains("color:grey"));
			slf4jLogger.info("Verify Read Only Attributes on Vendor Bid Management page Passed....Testcase "+testid+ " Passed");
		}catch (Exception e) {
			slf4jLogger.error("Error while Verifying Read Only Attributes on Vendor Bid Management page....Testcase "+testid+ " Failed...");
			Assert.fail();
		}
		
	}

	
}
